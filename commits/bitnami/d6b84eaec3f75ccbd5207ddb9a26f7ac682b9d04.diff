commit d6b84eaec3f75ccbd5207ddb9a26f7ac682b9d04 (from ecd27a21697076a3ff78dca7ed88c4a3f4950983)
Merge: ecd27a2169 7304b29f66
Author: Tomas Pizarro <tompizmor@users.noreply.github.com>
Date:   Thu Apr 5 13:20:22 2018 +0200

    Merge pull request #506 from tompizmor/node_production_chart
    
    Refactor node chart to be production ready

diff --git a/incubator/node/Chart.yaml b/incubator/node/Chart.yaml
index 5d8ae6a1c5..f205955f6c 100644
--- a/incubator/node/Chart.yaml
+++ b/incubator/node/Chart.yaml
@@ -1,6 +1,6 @@
 name: node
-version: 0.2.15
-appVersion: 6.14.1
+version: 1.0.0
+appVersion: 9.5.0
 description: Event-driven I/O server-side JavaScript environment based on V8
 keywords:
 - node
diff --git a/incubator/node/README.md b/incubator/node/README.md
index 7bb2fc65fd..c3603ca7e2 100644
--- a/incubator/node/README.md
+++ b/incubator/node/README.md
@@ -2,17 +2,17 @@
 
 [Node](https://www.nodejs.org) Event-driven I/O server-side JavaScript environment based on V8
 
-## TL;DR;
+## TL;DR
 
 ```console
-$ helm install incubator/node
+$ helm repo add bitnami-incubator https://charts.bitnami.com/incubator
+$ helm install bitnami-incubator/node
 ```
-
 ## Introduction
 
 This chart bootstraps a [Node](https://github.com/bitnami/bitnami-docker-node) deployment on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.
 
-It clones and deploys a Node.js application from a git repository.
+It clones and deploys a Node.js application from a git repository. Optionally you can set un an Ingress resource to access your application and provision an external database using the k8s service catalog and the Open Service Broker for Azure.
 
 ## Prerequisites
 
@@ -24,7 +24,7 @@ It clones and deploys a Node.js application from a git repository.
 To install the chart with the release name `my-release`:
 
 ```console
-$ helm install --name my-release incubator/node
+$ helm install --name my-release bitnami-incubator/node
 ```
 
 The command deploys Node.js on the Kubernetes cluster in the default configuration. The [configuration](#configuration) section lists the parameters that can be configured during installation. Also includes support for MariaDB chart out of the box.
@@ -45,20 +45,37 @@ The command removes all the Kubernetes components associated with the chart and
 
 ## Configuration
 
-The following tables lists the configurable parameters of the Node chart and their default values.
-
-|           Parameter           |             Description             |                          Default                          |
-|-------------------------------|-------------------------------------|---------------------------------------------------------- |
-| `image.registry`              | NodeJS image registry               | `docker.io`                                               |
-| `image.repository`            | NodeJS Image name                   | `bitnami/node`                                            |
-| `image.tag`                   | NodeJS Image tag                    | `{VERSION}`                                               |
-| `image.pullPolicy`            | NodeJS image pull policy            | `Always` if `imageTag` is `latest`, else `IfNotPresent`   |
-| `image.pullSecrets`           | Specify image pull secrets          | `nil` (does not add image pull secrets to deployed pods)  |
-| `repository`                  | Repo of the application             | `git@github.com:jbianquetti-nami/simple-node-app.git`     |
-| `revision`                    | Revision  to checkout               | `master`                                                  |
-| `mariadb.mariadbRootPassword` | MariaDB admin password              | `nil`                                                     |
-| `serviceType`                 | Kubernetes Service type             | `LoadBalancer`                                            |
-| `resources`                   | CPU/Memory resource requests/limits | Memory: `512Mi`, CPU: `300m`                              |
+The following table lists the configurable parameters of the Node chart and their default values.
+
+|              Parameter                  |            Description                                    |                        Default                            |
+|-----------------------------------------|-----------------------------------------------------------|-----------------------------------------------------------|
+| `image.registry`                        | NodeJS image registry                                     | `docker.io`                                               |
+| `image.repository`                      | NodeJS Image name                                         | `bitnami/node`                                            |
+| `image.tag`                             | NodeJS Image tag                                          | `{VERSION}`                                               |
+| `image.pullPolicy`                      | NodeJS image pull policy                                  | `IfNotPresent`                                            |
+| `image.pullSecrets`                     | Specify image pull secrets                                | `nil` (does not add image pull secrets to deployed pods)  |
+| `gitImage.registry`                     | Git image registry                                        | `docker.io`                                               |
+| `gitImage.repository`                   | Git Image name                                            | `alpine/git`                                              |
+| `gitImage.tag`                          | Git Image tag                                             | `latest`                                                  |
+| `gitImage.pullPolicy`                   | Git image pull policy                                     | `Always` if `imageTag` is `latest`, else `IfNotPresent`   |
+| `gitImage`                              | Image used for initContainers                             | `alpine/git`                                              |
+| `repository`                            | Repo of the application                                   | `https://github.com/bitnami/sample-mean.git`              |
+| `revision`                              | Revision to checkout                                      | `master`                                                  |
+| `replicas`                              | Number of replicas for the application                    | `1`                                                       |
+| `applicationPort`                       | Port where the application will be running                | `3000`                                                    |
+| `serviceType`                           | Kubernetes Service type                                   | `LoadBalancer`                                            |
+| `persistence.enabled`                   | Enable persistence using PVC                              | `false`                                                   |
+| `persistence.path`                      | Path to persisted directory                               | `/app/data`                                               |
+| `persistence.accessMode`                | PVC Access Mode                                           | `ReadWriteOnce`                                           |
+| `persistence.size`                      | PVC Storage Request                                       | `1Gi`                                                     |
+| `mongodb.install`                       | Wheter to install or not the MongoDB chart                | `true`                                                    |
+| `externaldb.secretName`                 | Secret containing existing database credentials           | `nil`                                                     |
+| `externaldb.type`                       | Type of database that defines the database secret mapping | `osba`                                                    |
+| `externaldb.broker.serviceInstanceName` | The existing ServiceInstance to be used                   | `nil`                                                     |
+| `ingress.enabled`                       | Enable ingress creation                                   | `false`                                                   |
+| `ingress.path`                          | Ingress path                                              | `/`                                                       |
+| `ingress.host`                          | Ingress host                                              | `example.local`                                           |
+| `ingress.tls`                           | TLS configuration for the ingress                         | `{}`                                                      |
 
 The above parameters map to the env variables defined in [bitnami/node](http://github.com/bitnami/bitnami-docker-node). For more information please refer to the [bitnami/node](http://github.com/bitnami/bitnami-docker-node) image documentation.
 
@@ -66,11 +83,11 @@ Specify each parameter using the `--set key=value[,key=value]` argument to `helm
 
 ```console
 $ helm install --name my-release \
-  --set repository=https://github.com/jbianquetti-nami/simple-node-app.git,mariadb.mariadbRootPassword=secretpassword \
-    incubator/node
+  --set repository=https://github.com/jbianquetti-nami/simple-node-app.git,replicas=2 \
+    bitnami-incubator/node
 ```
 
-The above command clones the remote git  repository to the `/app/` directory  of the container. Additionally it sets the MariaDB `root` user password to `secretpassword`.
+The above command clones the remote git repository to the `/app/` directory  of the container. Additionally it sets the number of `replicas` to `2`.
 
 Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example,
 
@@ -86,3 +103,100 @@ The [Bitnami Node](https://github.com/bitnami/bitnami-docker-node) image stores
 
 Persistent Volume Claims are used to keep the data across deployments. This is known to work in GCE, AWS, and minikube.
 See the [Configuration](#configuration) section to configure the PVC or to disable persistence.
+
+## Set up an Ingress controller
+
+First install the nginx-ingress controller via helm:
+
+```
+$ helm install stable/nginx-ingress
+```
+
+Now deploy the node helm chart:
+
+```
+$ helm install --name my-release bitnami-incubator/node --set ingress.enabled=true,ingress.host=example.com,serviceType=ClusterIP
+```
+
+### Configure TLS termination for your ingress controller
+
+You must manually create a secret containing the certificate and key for your domain. You can do it with this command:
+
+```
+$ kubectl create secret tls my-tls-secret --cert=path/to/file.cert --key=path/to/file.key
+```
+
+Then ensure you deploy the Helm chart with the following ingress configuration:
+
+```
+ingress:
+  enabled: false
+  path: /
+  host: example.com
+  annotations:
+    kubernetes.io/ingress.class: nginx
+  tls:
+      hosts:
+        - example.com
+```
+
+## Connect your application to an already existing database
+
+1. Create a secret containing your database credentials:
+
+  ```
+  $ kubectl create secret generic my-database-secret --from-literal=host=YOUR_DATABASE_HOST --from-literal=port=YOUR_DATABASE_PORT --from-literal=user=YOUR_DATABASE_USER --from-literal=password=YOUR_DATABASE_PASSWORD
+  ```
+  
+  `YOUR_DATABASE_HOST`, `YOUR_DATABASE_PORT`, `YOUR_DATABASE_USER` and `YOUR_DATABASE_PASSWORD` are placeholders that must be replaced with correct values.
+
+2. Deploy the node chart specifying the secret name
+
+  ```
+  $ helm install --name node-app --set mongodb.install=false,externaldb.secretName=my-database-secret bitnami-incubator/node
+  ```
+
+## Provision a database using the Open Service Broker for Azure
+
+1. Install Service Catalog in your Kubernetes cluster following [this instructions](https://kubernetes.io/docs/tasks/service-catalog/install-service-catalog-using-helm/)
+2. Install the Open Service Broker for Azure in your Kubernetes cluster following [this instructions](https://github.com/Azure/helm-charts/tree/master/open-service-broker-azure)
+3. Create and deploy a ServiceBinding to provision a database server in Azure cloud.
+
+  ```
+  apiVersion: servicecatalog.k8s.io/v1beta1
+  kind: ServiceInstance
+  metadata:
+    name: azure-mongodb-instance
+    labels:
+      app: mongodb
+  spec:
+    clusterServiceClassExternalName: azure-cosmos-mongo-db
+    clusterServicePlanExternalName: mongo-db
+    parameters:
+      location: YOUR_AZURE_LOCATION
+      resourceGroup: mongodb-k8s-service-catalog
+      sslEnforcement: disabled
+      firewallRules:
+      - startIPAddress: "0.0.0.0"
+        endIPAddress: "255.255.255.255"
+        name: "AllowAll"
+  ```
+  Please update the `YOUR_AZURE_LOCATION` placeholder in the above example. 
+
+  ```
+  $ kubectl create -f mongodb-service-instance.yml
+  ```
+
+4. Deploy the helm chart:
+
+    ```
+    $ helm install --name node-app --set mongodb.install=false,externaldb.broker.serviceInstanceName=azure-mongodb-instance bitnami-incubator/node
+    ```
+
+Once the instance has been provisioned in Azure, a new secret should have been automatically created with the connection parameters for your application.
+
+Deploy the helm chart enabling the Azure external database makes the following assumptions:
+  - You would want an Azure CosmosDB MongoDB database
+  - Your application uses DATABASE_HOST, DATABASE_PORT, DATABASE_USER and DATABASE_PASSWORD environment variables to connect to the database.
+
+You can read more about the kubernetes service catalog at https://github.com/kubernetes-incubator/service-catalog 
\ No newline at end of file
diff --git a/incubator/node/requirements.yaml b/incubator/node/requirements.yaml
new file mode 100644
index 0000000000..f5e08d0299
--- /dev/null
+++ b/incubator/node/requirements.yaml
@@ -0,0 +1,8 @@
+dependencies:
+- name: mongodb
+  repository: https://kubernetes-charts.storage.googleapis.com/
+  version: 0.4.x
+  condition: mongodb.install
+- name: bitnami-common
+  repository: https://charts.bitnami.com/library
+  version: 0.0.x
diff --git a/incubator/node/templates/NOTES.txt b/incubator/node/templates/NOTES.txt
index a83ebdb1da..51a7c2c1c7 100644
--- a/incubator/node/templates/NOTES.txt
+++ b/incubator/node/templates/NOTES.txt
@@ -3,20 +3,20 @@
 
 {{- if contains "NodePort" .Values.serviceType }}
 
-  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "fullname" . }})
+  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "node.fullname" . }})
   export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
   echo http://$NODE_IP:$NODE_PORT/
 
 {{- else if contains "LoadBalancer" .Values.serviceType }}
 
   NOTE: It may take a few minutes for the LoadBalancer IP to be available.
-        Watch the status with: 'kubectl get svc -w {{ template "fullname" . }} --namespace {{ .Release.Namespace }}'
+        Watch the status with: 'kubectl get svc -w {{ template "node.fullname" . }} --namespace {{ .Release.Namespace }}'
 
-  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
+  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "node.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
   echo http://$SERVICE_IP/
 {{- else if contains "ClusterIP"  .Values.serviceType }}
 
-  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "fullname" . }}" -o jsonpath="{.items[0].metadata.name}")
+  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "node.name" . }}" -o jsonpath="{.items[0].metadata.name}")
   echo http://127.0.0.1:8080/
   kubectl port-forward $POD_NAME 8080:80
 {{- end }}
diff --git a/incubator/node/templates/_helpers.tpl b/incubator/node/templates/_helpers.tpl
index d21e7fa110..ec47379d8a 100644
--- a/incubator/node/templates/_helpers.tpl
+++ b/incubator/node/templates/_helpers.tpl
@@ -2,7 +2,7 @@
 {{/*
 Expand the name of the chart.
 */}}
-{{- define "name" -}}
+{{- define "node.name" -}}
 {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
 {{- end -}}
 
@@ -10,15 +10,22 @@ Expand the name of the chart.
 Create a default fully qualified app name.
 We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
 */}}
-{{- define "fullname" -}}
+{{- define "node.fullname" -}}
 {{- $name := default .Chart.Name .Values.nameOverride -}}
 {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
 {{- end -}}
 
 {{/*
 Create a default fully qualified app name.
-We truncate at 24 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
+We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
+*/}}
+{{- define "node.mongodb.fullname" -}}
+{{- printf "%s-%s" .Release.Name "mongodb" | trunc 63 | trimSuffix "-" -}}
+{{- end -}}
+
+{{/*
+Create chart name and version as used by the chart label.
 */}}
-{{- define "mariadb.fullname" -}}
-{{- printf "%s-%s" .Release.Name "mariadb" | trunc 63 | trimSuffix "-" -}}
+{{- define "node.chart" -}}
+{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" -}}
 {{- end -}}
diff --git a/incubator/node/templates/deployment.yaml b/incubator/node/templates/deployment.yaml
index ca1d1f494d..f1473de107 100644
--- a/incubator/node/templates/deployment.yaml
+++ b/incubator/node/templates/deployment.yaml
@@ -1,18 +1,19 @@
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
-  name: {{ template "fullname" . }}
+  name: {{ template "node.fullname" . }}
   labels:
-    app: {{ template "fullname" . }}
-    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
+    app: {{ template "node.name" . }}
+    chart: {{ template "node.chart" . }}
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
 spec:
-  replicas: 1
+  replicas: {{ .Values.replicas }}
   template:
     metadata:
       labels:
-        app: {{ template "fullname" . }}
+        app: {{ template "node.name" . }}
+        release: {{ .Release.Name | quote }}
     spec:
       {{- if .Values.image.pullSecrets }}
       imagePullSecrets:
@@ -21,46 +22,88 @@ spec:
       {{- end}}
       {{- end }}
       initContainers:
-      - name: git-clone-app
-        image: {{ .Values.image }}
-        imagePullPolicy: {{ .Values.imagePullPolicy }}
-        command: [ '/bin/sh', '-c' , 'git clone {{ .Values.repository }} /app && git checkout {{ .Values.revision }}']
+      - name: git-clone-repository
+        image: "{{ .Values.gitImage.registry }}/{{ .Values.gitImage.repository }}:{{ .Values.gitImage.tag }}"
+        imagePullPolicy: {{ .Values.gitImage.pullPolicy | quote }}
+        command: [ '/bin/sh', '-c' , 'git clone {{ .Values.repository }} /app && cd /app && git checkout {{ .Values.revision }}']
         volumeMounts:
         - name: app
           mountPath: /app
       - name: npm-install
-        image: {{ .Values.image }}
-        imagePullPolicy: {{ .Values.imagePullPolicy }}
+        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
+        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
         workingDir: /app
-        command: ['npm', 'install']
+        command: ['/bin/bash', '-c', 'useradd bitnami && chown -R bitnami:bitnami /app && npm install']
         volumeMounts:
         - name: app
           mountPath: /app
       containers:
-      - name: {{ template "fullname" . }}
+      - name: {{ template "node.fullname" . }}
         image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
         imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
-        securityContext:
-          readOnlyRootFilesystem: true
         env:
-        - name: GIT_REPO
-          value: {{ .Values.repository }}
-        command: [ "npm", "start" ]
+        {{- if .Values.mongodb.install }}
+        - name: DATABASE_HOST
+          value: {{ template "node.mongodb.fullname" . }}
+        - name: DATABASE_PORT
+          value: "27017"
+        - name: DATABASE_USER
+          value: {{ .Values.mongodb.mongodbUsername | quote }}
+        - name: DATABASE_PASSWORD
+          valueFrom:
+            secretKeyRef:
+              name: {{ template "node.mongodb.fullname" . }}
+              key: mongodb-password 
+        - name: DATABASE_NAME
+          value: {{ .Values.mongodb.mongodbDatabase | quote }}
+        - name: DATABASE_CONNECTION_OPTIONS
+          value: ""
+        {{ else }}
+        {{- $type := dict "type" .Values.externaldb.type }}
+        - name: DATABASE_HOST
+          valueFrom:
+            secretKeyRef:
+              name: {{ .Values.externaldb.secretName }}
+              key: {{ template "externaldb.host" $type }} 
+        - name: DATABASE_PORT
+          valueFrom:
+            secretKeyRef:
+              name: {{ .Values.externaldb.secretName }}
+              key: {{ template "externaldb.port" $type }} 
+        - name: DATABASE_USER
+          valueFrom:
+            secretKeyRef:
+              name: {{ .Values.externaldb.secretName }}
+              key: {{ template "externaldb.username" $type }} 
+        - name: DATABASE_PASSWORD
+          valueFrom:
+            secretKeyRef:
+              name: {{ .Values.externaldb.secretName }}
+              key: {{ template "externaldb.password" $type }} 
+        {{- if .Values.externaldb.ssl }}
+        - name: DATABASE_CONNECTION_OPTIONS
+          value: "ssl=true"
+        {{- end }}
+        {{- end }}
+        - name: DATA_FOLDER
+          value: "/app"
+        workingDir: /app
+        command: ['/bin/bash', '-c', 'useradd bitnami && su bitnami -c "PATH=/opt/bitnami/node/bin:$PATH npm start"']
         ports:
         - name: http
-          containerPort: 3000
+          containerPort: {{ .Values.applicationPort }}
         livenessProbe:
           httpGet:
             path: /
             port: http
-          initialDelaySeconds: 180
+          initialDelaySeconds: 60
           timeoutSeconds: 5
           failureThreshold: 6
         readinessProbe:
           httpGet:
             path: /
             port: http
-          initialDelaySeconds: 30
+          initialDelaySeconds: 10
           timeoutSeconds: 3
           periodSeconds: 5
         resources:
diff --git a/incubator/node/templates/ingress.yaml b/incubator/node/templates/ingress.yaml
new file mode 100644
index 0000000000..4c81a293b6
--- /dev/null
+++ b/incubator/node/templates/ingress.yaml
@@ -0,0 +1,28 @@
+{{- if .Values.ingress.enabled -}}
+apiVersion: extensions/v1beta1
+kind: Ingress
+metadata:
+  labels:
+    app: {{ template "node.name" . }}
+    chart: {{ template "node.chart" . }}
+    heritage: {{ .Release.Service }}
+    release: {{ .Release.Name }}
+  name: {{ template "node.fullname" . }}
+  annotations:
+    {{- range $key, $value := .Values.ingress.annotations }}
+      {{ $key }}: {{ $value | quote }}
+    {{- end }}
+spec:
+  rules:
+    - host: {{ .Values.ingress.host }}
+      http:
+        paths:
+          - path: {{ .Values.ingress.path }}
+            backend:
+              serviceName: {{ include "node.fullname" . }}
+              servicePort: 80
+  {{- if .Values.ingress.tls }}
+  tls:
+{{ toYaml .Values.ingress.tls | indent 4 }}
+  {{- end -}}
+{{- end -}}
diff --git a/incubator/node/templates/mongodb-binding.yaml b/incubator/node/templates/mongodb-binding.yaml
new file mode 100644
index 0000000000..1565fbd95f
--- /dev/null
+++ b/incubator/node/templates/mongodb-binding.yaml
@@ -0,0 +1,19 @@
+{{- if .Values.externaldb.broker.serviceInstanceName }}
+apiVersion: servicecatalog.k8s.io/v1beta1
+kind: ServiceBinding
+metadata:
+  name: {{ template "node.mongodb.fullname" . }}-binding
+  labels:
+    app: {{ template "node.name" . }}
+    chart: {{ template "node.chart" . }}
+    release: "{{ .Release.Name }}"
+    heritage: "{{ .Release.Service }}"
+spec:
+  instanceRef:
+    name: {{ .Values.externaldb.broker.serviceInstanceName }}
+{{- if .Values.externaldb.broker.serviceInstanceName }}
+  secretName: {{ .Values.externaldb.secretName }}
+{{ else }}
+  secretName: {{ template "node.fullname" . }}-mongodb-secret
+{{- end }}
+{{- end }}
diff --git a/incubator/node/templates/pvc.yaml b/incubator/node/templates/pvc.yaml
index 6a21fe551b..92fb26f0d9 100644
--- a/incubator/node/templates/pvc.yaml
+++ b/incubator/node/templates/pvc.yaml
@@ -2,10 +2,10 @@
 kind: PersistentVolumeClaim
 apiVersion: v1
 metadata:
-  name: {{ template "fullname" . }}
+  name: {{ template "node.fullname" . }}
   labels:
-    app: {{ template "fullname" . }}
-    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
+    app: {{ template "node.name" . }}
+    chart: {{ template "node.chart" . }}
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
   annotations:
diff --git a/incubator/node/templates/svc.yaml b/incubator/node/templates/svc.yaml
index cf77abe82e..a344c1fbef 100644
--- a/incubator/node/templates/svc.yaml
+++ b/incubator/node/templates/svc.yaml
@@ -1,10 +1,10 @@
 apiVersion: v1
 kind: Service
 metadata:
-  name: {{ template "fullname" . }}
+  name: {{ template "node.fullname" . }}
   labels:
-    app: {{ template "fullname" . }}
-    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
+    app: {{ template "node.name" . }}
+    chart: {{ template "node.chart" . }}
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
 spec:
@@ -14,4 +14,5 @@ spec:
     port: 80
     targetPort: http
   selector:
-    app: {{ template "fullname" . }}
+    app: {{ template "node.name" . }}
+    release: "{{ .Release.Name }}"
diff --git a/incubator/node/values.yaml b/incubator/node/values.yaml
index 08d633b814..e0d4a5c222 100644
--- a/incubator/node/values.yaml
+++ b/incubator/node/values.yaml
@@ -4,7 +4,7 @@
 image:
   registry: docker.io
   repository: bitnami/node
-  tag: 6.14.1
+  tag: 9.10.1-prod
   ## Specify a imagePullPolicy
   ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
   ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
@@ -17,38 +17,27 @@ image:
   # pullSecrets:
   #   - myRegistrKeySecretName 
 
+gitImage:
+  registry: docker.io
+  repository: alpine/git
+  tag: latest
+  pullPolicy: IfNotPresent
+  
 ## Git repository http/https
 ##
-repository:  https://github.com/jbianquetti-nami/simple-node-app.git
+repository:  https://github.com/bitnami/sample-mean.git
 
 ## Git repository revision to checkout
 ##
-revision: 26679f6
+revision: master
 
-## Specify a imagePullPolicy
-## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
+## Specify the number of replicas for the application
 ##
-imagePullPolicy: IfNotPresent
+replicas: 1
 
+## Specify the port where your applucation will be running
 ##
-## MariaDB chart configuration
-##
-mariadb:
-  ## MariaDB admin password
-  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
-  ## mariadbRootPassword:
-
-  ## Enable persistence using Persistent Volume Claims
-  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
-  ##
-  persistence:
-    enabled: true
-    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
-    ## Default: volume.alpha.kubernetes.io/storage-class: default
-    ##
-    # storageClass:
-    accessMode: ReadWriteOnce
-    size: 8Gi
+applicationPort: 3000
 
 ## Kubernetes configuration
 ## For minikube, set this to NodePort, elsewhere use LoadBalancer
@@ -71,7 +60,51 @@ persistence:
 ## Configure resource requests and limits
 ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
 ##
-resources:
-  requests:
-    memory: 512Mi
-    cpu: 300m
+resources: {}
+  # limits:
+  #   cpu: 500m
+  #   memory: 512Mi
+  # requests:
+  #   cpu: 500m
+  #   memory: 512Mi
+
+##
+## MongoDB chart configuration
+##
+mongodb:
+  ## Whether to deploy a mongodb server to satisfy the applications database requirements.
+  ## To use an external database set this to false and configure the externaldb parameters
+  install: true # Check mongodb chart for configuration values
+
+## Provision an external database (Only if mongodb.install is false)
+## You can:
+##    1) Pass an already existing Secret with your database credentials
+##    2) Pass an already existing ServiceInstance name and specify the service catalog broker to automatically create a ServiceBinding for your application.
+externaldb:
+  # Set to true if your external database has ssl enabled
+  ssl: false
+  # You can use an existing secret containing your database credentials
+  # Please refer to the respective section in the README to know the details about this secret.
+  secretName:
+  # Only if using Kubernetes Service Catalog you can specify the kind of broker used. Available options are osba|gce|aws
+  type: osba
+  # If you provide the serviceInstanceName, the chart will create a ServiceBinding for that ServiceInstance
+  broker:
+    serviceInstanceName:
+
+## Configure ingress resource that allow you to access the application. 
+## ref: http://kubernetes.io/docs/user-guide/ingress/
+##
+ingress:
+  enabled: false
+  path: /
+  # Used to create an Ingress record.
+  host: example.local
+  # annotations:
+  #   kubernetes.io/ingress.class: nginx
+  #   kubernetes.io/tls-acme: "true"
+  # tls:
+  #   Secrets must be manually created in the namespace.
+  #   - secretName: your-tls-cert
+  #     hosts:
+  #       - example.local

commit d6b84eaec3f75ccbd5207ddb9a26f7ac682b9d04 (from 7304b29f66ef8b0b6c5d23978272181d46feb745)
Merge: ecd27a2169 7304b29f66
Author: Tomas Pizarro <tompizmor@users.noreply.github.com>
Date:   Thu Apr 5 13:20:22 2018 +0200

    Merge pull request #506 from tompizmor/node_production_chart
    
    Refactor node chart to be production ready

diff --git a/library/bitnami-common/Chart.yaml b/library/bitnami-common/Chart.yaml
new file mode 100644
index 0000000000..904ef91d7f
--- /dev/null
+++ b/library/bitnami-common/Chart.yaml
@@ -0,0 +1,15 @@
+name: bitnami-common
+version: 0.0.1
+appVersion: 0.0.1
+description: Chart with custom tempaltes used in Bitnami charts.
+keywords:
+- helper
+- template
+- bitnami
+- broker
+- service
+- catalog
+maintainers:
+- name: Bitnami
+  email: containers@bitnami.com
+engine: gotpl
diff --git a/library/bitnami-common/README.md b/library/bitnami-common/README.md
new file mode 100644
index 0000000000..6c38dc41d9
--- /dev/null
+++ b/library/bitnami-common/README.md
@@ -0,0 +1,14 @@
+# Bitnami Common
+
+This chart just defines a set of templates so that they can be reused in other charts.
+
+## Available templates
+
+The following table lists the available templates defined in the Bitnami Common chart.
+
+| Parameter                     | Description                                                                         | Default                |
+| ----------------------------- | ----------------------------------------------------------------------------------- | ---------------------- |
+| `externaldb.host`             | Return the secret key containing the database host given a service broker type      | `host`                 |
+| `externaldb.port`             | Return the secret key containing the database port given a service broker type      | `port`                 |
+| `externaldb.username`         | Return the secret key containing the database user given a service broker type      | `username`             |
+| `externaldb.password`         | Return the secret key containing the database password given a service broker type  | `password`             |
\ No newline at end of file
diff --git a/library/bitnami-common/templates/_helpers.tpl b/library/bitnami-common/templates/_helpers.tpl
new file mode 100644
index 0000000000..5157b97785
--- /dev/null
+++ b/library/bitnami-common/templates/_helpers.tpl
@@ -0,0 +1,56 @@
+{{/* vim: set filetype=mustache: */}}
+{{/*
+CUSTOM TEMPLATES FOR SECRET MAPPING
+    - host
+    - port
+    - username
+    - password
+*/}}
+
+{{- define "externaldb.host" -}}
+  {{- if eq .type "osba"}}
+    {{- printf "%s" "host" -}}
+  {{- else if eq .type "gce"}}
+    {{- printf "%s" "host" -}}
+  {{- else if eq .type "aws"}}
+    {{- printf "%s" "host" -}}
+  {{- else }}
+    {{- printf "%s" "host" -}}
+  {{- end }}
+{{- end -}}
+
+{{- define "externaldb.port" -}}
+  {{- if eq .type "osba"}}
+    {{- printf "%s" "port" -}}
+  {{- else if eq .type "gce"}}
+    {{- printf "%s" "port" -}}
+  {{- else if eq .type "aws"}}
+    {{- printf "%s" "port" -}}
+  {{- else }}
+    {{- printf "%s" "port" -}}
+  {{- end }}
+{{- end -}}
+
+{{- define "externaldb.username" -}}
+  {{- if eq .type "osba"}}
+    {{- printf "%s" "username" -}}
+  {{- else if eq .type "gce"}}
+    {{- printf "%s" "username" -}}
+  {{- else if eq .type "aws"}}
+    {{- printf "%s" "username" -}}
+  {{- else }}
+    {{- printf "%s" "username" -}}
+  {{- end }}
+{{- end -}}
+
+{{- define "externaldb.password" -}}
+  {{- if eq .type "osba"}}
+    {{- printf "%s" "password" -}}
+  {{- else if eq .type "gce"}}
+    {{- printf "%s" "password" -}}
+  {{- else if eq .type "aws"}}
+    {{- printf "%s" "password" -}}
+  {{- else }}
+    {{- printf "%s" "password" -}}
+  {{- end }}
+{{- end -}}
