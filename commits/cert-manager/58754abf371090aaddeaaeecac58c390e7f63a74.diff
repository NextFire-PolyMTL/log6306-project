commit 58754abf371090aaddeaaeecac58c390e7f63a74
Author: James Munnelly <james@munnelly.eu>
Date:   Fri Sep 20 10:31:04 2019 +0100

    Refactor codebase for v1alpha2
    
    Signed-off-by: James Munnelly <james@munnelly.eu>

diff --git a/BUILD.bazel b/BUILD.bazel
index 252fc710f..c3c03c514 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -49,7 +49,7 @@ filegroup(
         "//pkg/apis:all-srcs",
         "//pkg/client/clientset/versioned:all-srcs",
         "//pkg/client/informers/externalversions:all-srcs",
-        "//pkg/client/listers/certmanager/v1alpha1:all-srcs",
+        "//pkg/client/listers/certmanager/v1alpha2:all-srcs",
         "//pkg/controller:all-srcs",
         "//pkg/feature:all-srcs",
         "//pkg/internal:all-srcs",
diff --git a/cmd/controller/app/options/BUILD.bazel b/cmd/controller/app/options/BUILD.bazel
index a5f0eb0d0..b792857fc 100644
--- a/cmd/controller/app/options/BUILD.bazel
+++ b/cmd/controller/app/options/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/cmd/controller/app/options",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/acmechallenges:go_default_library",
         "//pkg/controller/acmeorders:go_default_library",
         "//pkg/controller/certificaterequests/acme:go_default_library",
diff --git a/cmd/controller/app/options/options.go b/cmd/controller/app/options/options.go
index ae6081b26..a2be82313 100644
--- a/cmd/controller/app/options/options.go
+++ b/cmd/controller/app/options/options.go
@@ -24,7 +24,7 @@ import (
 
 	"github.com/spf13/pflag"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	challengescontroller "github.com/jetstack/cert-manager/pkg/controller/acmechallenges"
 	orderscontroller "github.com/jetstack/cert-manager/pkg/controller/acmeorders"
 	cracmecontroller "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/acme"
diff --git a/cmd/webhook/BUILD.bazel b/cmd/webhook/BUILD.bazel
index 7a21a92b0..67e0950ed 100644
--- a/cmd/webhook/BUILD.bazel
+++ b/cmd/webhook/BUILD.bazel
@@ -14,7 +14,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/cmd/webhook",
     visibility = ["//visibility:private"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/logs:go_default_library",
         "//pkg/webhook:go_default_library",
         "//pkg/webhook/handlers:go_default_library",
diff --git a/cmd/webhook/main.go b/cmd/webhook/main.go
index a0995e0eb..d2c0718ab 100644
--- a/cmd/webhook/main.go
+++ b/cmd/webhook/main.go
@@ -25,22 +25,22 @@ import (
 	"k8s.io/apimachinery/pkg/runtime/schema"
 	"k8s.io/klog"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/webhook"
 	"github.com/jetstack/cert-manager/pkg/webhook/handlers"
 )
 
 var (
-	GroupName = "webhook." + v1alpha1.SchemeGroupVersion.Group
+	GroupName = "webhook." + v1alpha2.SchemeGroupVersion.Group
 )
 
 var (
 	validationFuncs = map[schema.GroupVersionKind]handlers.ValidationFunc{
-		v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.CertificateKind):        webhook.ValidateCertificate,
-		v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.CertificateRequestKind): webhook.ValidateCertificateRequest,
-		v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.IssuerKind):             webhook.ValidateIssuer,
-		v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.ClusterIssuerKind):      webhook.ValidateClusterIssuer,
+		v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.CertificateKind):        webhook.ValidateCertificate,
+		v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.CertificateRequestKind): webhook.ValidateCertificateRequest,
+		v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.IssuerKind):             webhook.ValidateIssuer,
+		v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.ClusterIssuerKind):      webhook.ValidateClusterIssuer,
 	}
 )
 
diff --git a/deploy/charts/cert-manager/templates/webhook-mutating-webhook.yaml b/deploy/charts/cert-manager/templates/webhook-mutating-webhook.yaml
index a89d75df9..e0dd65d48 100644
--- a/deploy/charts/cert-manager/templates/webhook-mutating-webhook.yaml
+++ b/deploy/charts/cert-manager/templates/webhook-mutating-webhook.yaml
@@ -19,7 +19,7 @@ webhooks:
       - apiGroups:
           - "certmanager.k8s.io"
         apiVersions:
-          - v1alpha1
+          - v1alpha2
         operations:
           - CREATE
           - UPDATE
diff --git a/deploy/charts/cert-manager/templates/webhook-validating-webhook.yaml b/deploy/charts/cert-manager/templates/webhook-validating-webhook.yaml
index 523d45f5f..183653623 100644
--- a/deploy/charts/cert-manager/templates/webhook-validating-webhook.yaml
+++ b/deploy/charts/cert-manager/templates/webhook-validating-webhook.yaml
@@ -29,7 +29,7 @@ webhooks:
       - apiGroups:
           - "certmanager.k8s.io"
         apiVersions:
-          - v1alpha1
+          - v1alpha2
         operations:
           - CREATE
           - UPDATE
diff --git a/deploy/manifests/00-crds.yaml b/deploy/manifests/00-crds.yaml
index b3ac4834a..ff6312533 100644
--- a/deploy/manifests/00-crds.yaml
+++ b/deploy/manifests/00-crds.yaml
@@ -175,7 +175,7 @@ spec:
           type: object
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
@@ -413,7 +413,7 @@ spec:
           type: object
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
@@ -1787,7 +1787,7 @@ spec:
       - metadata
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
@@ -3411,7 +3411,7 @@ spec:
           type: object
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
@@ -5035,7 +5035,7 @@ spec:
           type: object
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
@@ -5241,7 +5241,7 @@ spec:
       - metadata
       type: object
   versions:
-  - name: v1alpha1
+  - name: v1alpha2
     served: true
     storage: true
 status:
diff --git a/docs/devel/dns01-providers.rst b/docs/devel/dns01-providers.rst
index 4ab5e871d..147547173 100644
--- a/docs/devel/dns01-providers.rst
+++ b/docs/devel/dns01-providers.rst
@@ -25,7 +25,7 @@ Steps to add a ``FooDNS`` DNS-01 provider:
      cert-manager does not use environment variables for internal configuration, so calls to this package should not be required.
 
 3. Add unit test coverage for this package.
-4. Add your provider configuration types to the API (located in ``pkg/apis/certmanager/v1alpha1/types.go``) and regenerate code (run ``./hack/update-codegen.sh``).
+4. Add your provider configuration types to the API (located in ``pkg/apis/certmanager/v1alpha2/types.go``) and regenerate code (run ``./hack/update-codegen.sh``).
    New API types should have an associated short documentation string,
    which is added to the reference API documentation (run ``./hack/update-reference-docs-dockerized.sh`` to update the API documentation).
 5. Register the provider in ``pkg/issuer/acme/dns``:
diff --git a/docs/generated/reference/generate/config.yaml b/docs/generated/reference/generate/config.yaml
index e2016f8d7..d6d63b20a 100644
--- a/docs/generated/reference/generate/config.yaml
+++ b/docs/generated/reference/generate/config.yaml
@@ -6,17 +6,17 @@ resource_categories:
   include: "certmanager"
   resources:
   - name: "Certificate"
-    version: "v1alpha1"
+    version: "v1alpha2"
     group: "certmanager"
   - name: "ClusterIssuer"
-    version: "v1alpha1"
+    version: "v1alpha2"
     group: "certmanager"
   - name: "Issuer"
-    version: "v1alpha1"
+    version: "v1alpha2"
     group: "certmanager"
   - name: "Order"
-    version: "v1alpha1"
+    version: "v1alpha2"
     group: "certmanager"
   - name: "Challenge"
-    version: "v1alpha1"
+    version: "v1alpha2"
     group: "certmanager"
diff --git a/docs/generated/reference/generate/go_openapi/BUILD.bazel b/docs/generated/reference/generate/go_openapi/BUILD.bazel
index b5ddcf703..faa835c54 100644
--- a/docs/generated/reference/generate/go_openapi/BUILD.bazel
+++ b/docs/generated/reference/generate/go_openapi/BUILD.bazel
@@ -9,7 +9,7 @@ openapi_library(
     srcs = ["doc.go"],
     go_prefix = "github.com/jetstack/cert-manager/",
     openapi_targets = [
-        "pkg/apis/certmanager/v1alpha1",
+        "pkg/apis/certmanager/v1alpha2",
     ],
     tags = ["docs"],
     vendor_targets = [
diff --git a/docs/generated/reference/output/reference/api-docs/index.html b/docs/generated/reference/output/reference/api-docs/index.html
index 9a0e249ad..d73028ed5 100755
--- a/docs/generated/reference/output/reference/api-docs/index.html
+++ b/docs/generated/reference/output/reference/api-docs/index.html
@@ -11,7 +11,7 @@
 <link rel="stylesheet" href="stylesheet.css" type="text/css">
 </head>
 <body>
-<div id="sidebar-wrapper" class="side-nav side-bar-nav"><ul><li class="nav-level-1 strong-nav"><a href="#-strong-cert-manager-strong-" class="nav-item"><strong>cert-manager</strong></a></li></ul><ul><li class="nav-level-1"><a href="#certificate-v1alpha1" class="nav-item">Certificate v1alpha1</a></li></ul><ul><li class="nav-level-1"><a href="#clusterissuer-v1alpha1" class="nav-item">ClusterIssuer v1alpha1</a></li></ul><ul><li class="nav-level-1"><a href="#issuer-v1alpha1" class="nav-item">Issuer v1alpha1</a></li></ul><ul><li class="nav-level-1"><a href="#order-v1alpha1" class="nav-item">Order v1alpha1</a></li></ul><ul><li class="nav-level-1"><a href="#challenge-v1alpha1" class="nav-item">Challenge v1alpha1</a></li></ul><ul><li class="nav-level-1 strong-nav"><a href="#-strong-old-api-versions-strong-" class="nav-item"><strong>Old API Versions</strong></a></li></ul><ul><li class="nav-level-1 strong-nav"><a href="#-strong-field-definitions-strong-" class="nav-item"><strong>Field Definitions</strong></a></li><ul id="-strong-field-definitions-strong--nav" style="display: none;"><li class="nav-level-2"><a href="#acmeauthorization-v1alpha1" class="nav-item">ACMEAuthorization v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallenge-v1alpha1" class="nav-item">ACMEChallenge v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolver-v1alpha1" class="nav-item">ACMEChallengeSolver v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolverdns01-v1alpha1" class="nav-item">ACMEChallengeSolverDNS01 v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01-v1alpha1" class="nav-item">ACMEChallengeSolverHTTP01 v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingress-v1alpha1" class="nav-item">ACMEChallengeSolverHTTP01Ingress v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingresspodspec-v1alpha1" class="nav-item">ACMEChallengeSolverHTTP01IngressPodSpec v1alpha1</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha1" class="nav-item">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuer-v1alpha1" class="nav-item">ACMEIssuer v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01provideracmedns-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderAcmeDNS v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerakamai-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderAkamai v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerazuredns-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderAzureDNS v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerclouddns-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderCloudDNS v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providercloudflare-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderCloudflare v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerdigitalocean-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderDigitalOcean v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerrfc2136-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderRFC2136 v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerroute53-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderRoute53 v1alpha1</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerwebhook-v1alpha1" class="nav-item">ACMEIssuerDNS01ProviderWebhook v1alpha1</a></li><li class="nav-level-2"><a href="#caissuer-v1alpha1" class="nav-item">CAIssuer v1alpha1</a></li><li class="nav-level-2"><a href="#certificatecondition-v1alpha1" class="nav-item">CertificateCondition v1alpha1</a></li><li class="nav-level-2"><a href="#certificatednsnameselector-v1alpha1" class="nav-item">CertificateDNSNameSelector v1alpha1</a></li><li class="nav-level-2"><a href="#duration-v1" class="nav-item">Duration v1</a></li><li class="nav-level-2"><a href="#fieldsv1-v1" class="nav-item">FieldsV1 v1</a></li><li class="nav-level-2"><a href="#issuercondition-v1alpha1" class="nav-item">IssuerCondition v1alpha1</a></li><li class="nav-level-2"><a href="#localobjectreference-v1alpha1" class="nav-item">LocalObjectReference v1alpha1</a></li><li class="nav-level-2"><a href="#managedfieldsentry-v1" class="nav-item">ManagedFieldsEntry v1</a></li><li class="nav-level-2"><a href="#objectmeta-v1" class="nav-item">ObjectMeta v1</a></li><li class="nav-level-2"><a href="#objectreference-v1alpha1" class="nav-item">ObjectReference v1alpha1</a></li><li class="nav-level-2"><a href="#ownerreference-v1" class="nav-item">OwnerReference v1</a></li><li class="nav-level-2"><a href="#secretkeyselector-v1alpha1" class="nav-item">SecretKeySelector v1alpha1</a></li><li class="nav-level-2"><a href="#selfsignedissuer-v1alpha1" class="nav-item">SelfSignedIssuer v1alpha1</a></li><li class="nav-level-2"><a href="#time-v1" class="nav-item">Time v1</a></li><li class="nav-level-2"><a href="#vaultapprole-v1alpha1" class="nav-item">VaultAppRole v1alpha1</a></li><li class="nav-level-2"><a href="#vaultauth-v1alpha1" class="nav-item">VaultAuth v1alpha1</a></li><li class="nav-level-2"><a href="#vaultissuer-v1alpha1" class="nav-item">VaultIssuer v1alpha1</a></li><li class="nav-level-2"><a href="#venaficloud-v1alpha1" class="nav-item">VenafiCloud v1alpha1</a></li><li class="nav-level-2"><a href="#venafiissuer-v1alpha1" class="nav-item">VenafiIssuer v1alpha1</a></li><li class="nav-level-2"><a href="#venafitpp-v1alpha1" class="nav-item">VenafiTPP v1alpha1</a></li></ul></ul><br/><div class="copyright"><a href="https://jetstack.io">Copyright 2018 Jetstack Ltd.</a></div></div>
+<div id="sidebar-wrapper" class="side-nav side-bar-nav"><ul><li class="nav-level-1 strong-nav"><a href="#-strong-cert-manager-strong-" class="nav-item"><strong>cert-manager</strong></a></li></ul><ul><li class="nav-level-1"><a href="#certificate-v1alpha2" class="nav-item">Certificate v1alpha2</a></li></ul><ul><li class="nav-level-1"><a href="#clusterissuer-v1alpha2" class="nav-item">ClusterIssuer v1alpha2</a></li></ul><ul><li class="nav-level-1"><a href="#issuer-v1alpha2" class="nav-item">Issuer v1alpha2</a></li></ul><ul><li class="nav-level-1"><a href="#order-v1alpha2" class="nav-item">Order v1alpha2</a></li></ul><ul><li class="nav-level-1"><a href="#challenge-v1alpha2" class="nav-item">Challenge v1alpha2</a></li></ul><ul><li class="nav-level-1 strong-nav"><a href="#-strong-old-api-versions-strong-" class="nav-item"><strong>Old API Versions</strong></a></li></ul><ul><li class="nav-level-1 strong-nav"><a href="#-strong-field-definitions-strong-" class="nav-item"><strong>Field Definitions</strong></a></li><ul id="-strong-field-definitions-strong--nav" style="display: none;"><li class="nav-level-2"><a href="#acmeauthorization-v1alpha2" class="nav-item">ACMEAuthorization v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallenge-v1alpha2" class="nav-item">ACMEChallenge v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolver-v1alpha2" class="nav-item">ACMEChallengeSolver v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolverdns01-v1alpha2" class="nav-item">ACMEChallengeSolverDNS01 v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01-v1alpha2" class="nav-item">ACMEChallengeSolverHTTP01 v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingress-v1alpha2" class="nav-item">ACMEChallengeSolverHTTP01Ingress v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingresspodspec-v1alpha2" class="nav-item">ACMEChallengeSolverHTTP01IngressPodSpec v1alpha2</a></li><li class="nav-level-2"><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha2" class="nav-item">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuer-v1alpha2" class="nav-item">ACMEIssuer v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01provideracmedns-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderAcmeDNS v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerakamai-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderAkamai v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerazuredns-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderAzureDNS v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerclouddns-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderCloudDNS v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providercloudflare-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderCloudflare v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerdigitalocean-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderDigitalOcean v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerrfc2136-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderRFC2136 v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerroute53-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderRoute53 v1alpha2</a></li><li class="nav-level-2"><a href="#acmeissuerdns01providerwebhook-v1alpha2" class="nav-item">ACMEIssuerDNS01ProviderWebhook v1alpha2</a></li><li class="nav-level-2"><a href="#caissuer-v1alpha2" class="nav-item">CAIssuer v1alpha2</a></li><li class="nav-level-2"><a href="#certificatecondition-v1alpha2" class="nav-item">CertificateCondition v1alpha2</a></li><li class="nav-level-2"><a href="#certificatednsnameselector-v1alpha2" class="nav-item">CertificateDNSNameSelector v1alpha2</a></li><li class="nav-level-2"><a href="#duration-v1" class="nav-item">Duration v1</a></li><li class="nav-level-2"><a href="#fieldsv1-v1" class="nav-item">FieldsV1 v1</a></li><li class="nav-level-2"><a href="#issuercondition-v1alpha2" class="nav-item">IssuerCondition v1alpha2</a></li><li class="nav-level-2"><a href="#localobjectreference-v1alpha2" class="nav-item">LocalObjectReference v1alpha2</a></li><li class="nav-level-2"><a href="#managedfieldsentry-v1" class="nav-item">ManagedFieldsEntry v1</a></li><li class="nav-level-2"><a href="#objectmeta-v1" class="nav-item">ObjectMeta v1</a></li><li class="nav-level-2"><a href="#objectreference-v1alpha2" class="nav-item">ObjectReference v1alpha2</a></li><li class="nav-level-2"><a href="#ownerreference-v1" class="nav-item">OwnerReference v1</a></li><li class="nav-level-2"><a href="#secretkeyselector-v1alpha2" class="nav-item">SecretKeySelector v1alpha2</a></li><li class="nav-level-2"><a href="#selfsignedissuer-v1alpha2" class="nav-item">SelfSignedIssuer v1alpha2</a></li><li class="nav-level-2"><a href="#time-v1" class="nav-item">Time v1</a></li><li class="nav-level-2"><a href="#vaultapprole-v1alpha2" class="nav-item">VaultAppRole v1alpha2</a></li><li class="nav-level-2"><a href="#vaultauth-v1alpha2" class="nav-item">VaultAuth v1alpha2</a></li><li class="nav-level-2"><a href="#vaultissuer-v1alpha2" class="nav-item">VaultIssuer v1alpha2</a></li><li class="nav-level-2"><a href="#venaficloud-v1alpha2" class="nav-item">VenafiCloud v1alpha2</a></li><li class="nav-level-2"><a href="#venafiissuer-v1alpha2" class="nav-item">VenafiIssuer v1alpha2</a></li><li class="nav-level-2"><a href="#venafitpp-v1alpha2" class="nav-item">VenafiTPP v1alpha2</a></li></ul></ul><br/><div class="copyright"><a href="https://jetstack.io">Copyright 2018 Jetstack Ltd.</a></div></div>
 <div id="wrapper">
 <div id="code-tabs-wrapper" class="code-tabs"><ul class="code-tab-list"></ul></div>
 <div id="page-content-wrapper" class="body-content container-fluid"><h1 id="-strong-cert-manager-strong-"><strong>cert-manager</strong></h1>
@@ -20,7 +20,7 @@
 <p>For full documentation on how to use cert-manager, please view our
 <a href="https://docs.cert-manager.io/">official documentation</a>.</p>
 <hr>
-<h1 id="certificate-v1alpha1">Certificate v1alpha1</h1>
+<h1 id="certificate-v1alpha2">Certificate v1alpha2</h1>
 <table>
 <thead>
 <tr>
@@ -31,7 +31,7 @@
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>Certificate</code></td>
 </tr>
 </tbody></table>
@@ -56,20 +56,20 @@
 <td></td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#certificatespec-v1alpha1">CertificateSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#certificatespec-v1alpha2">CertificateSpec</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>status</code><br /> *<a href="#certificatestatus-v1alpha1">CertificateStatus</a>*</td>
+<td><code>status</code><br /> *<a href="#certificatestatus-v1alpha2">CertificateStatus</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h3 id="certificatespec-v1alpha1">CertificateSpec v1alpha1</h3>
+<h3 id="certificatespec-v1alpha2">CertificateSpec v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#certificate-v1alpha1">Certificate v1alpha1</a></li>
+<li><a href="#certificate-v1alpha2">Certificate v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -100,7 +100,7 @@ Appears In:
 <td>IsCA will mark this Certificate as valid for signing. This implies that the &#39;cert sign&#39; usage is set</td>
 </tr>
 <tr>
-<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha1">ObjectReference</a>*</td>
+<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha2">ObjectReference</a>*</td>
 <td>IssuerRef is a reference to the issuer for this certificate. If the &#39;kind&#39; field is not set, or set to &#39;Issuer&#39;, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the &#39;kind&#39; field is set to &#39;ClusterIssuer&#39;, a ClusterIssuer with the provided name will be used. The &#39;name&#39; field in this stanza is required at all times.</td>
 </tr>
 <tr>
@@ -132,12 +132,12 @@ Appears In:
 <td>Usages is the set of x509 actions that are enabled for a given key. Defaults are (&#39;digital signature&#39;, &#39;key encipherment&#39;) if empty</td>
 </tr>
 </tbody></table>
-<h3 id="certificatestatus-v1alpha1">CertificateStatus v1alpha1</h3>
+<h3 id="certificatestatus-v1alpha2">CertificateStatus v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#certificate-v1alpha1">Certificate v1alpha1</a></li>
+<li><a href="#certificate-v1alpha2">Certificate v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -148,7 +148,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>conditions</code><br /> *<a href="#certificatecondition-v1alpha1">CertificateCondition</a> array*</td>
+<td><code>conditions</code><br /> *<a href="#certificatecondition-v1alpha2">CertificateCondition</a> array*</td>
 <td></td>
 </tr>
 <tr>
@@ -161,7 +161,7 @@ Appears In:
 </tr>
 </tbody></table>
 <hr>
-<h1 id="clusterissuer-v1alpha1">ClusterIssuer v1alpha1</h1>
+<h1 id="clusterissuer-v1alpha2">ClusterIssuer v1alpha2</h1>
 <table>
 <thead>
 <tr>
@@ -172,7 +172,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ClusterIssuer</code></td>
 </tr>
 </tbody></table>
@@ -196,16 +196,16 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#issuerspec-v1alpha1">IssuerSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#issuerspec-v1alpha2">IssuerSpec</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>status</code><br /> *<a href="#issuerstatus-v1alpha1">IssuerStatus</a>*</td>
+<td><code>status</code><br /> *<a href="#issuerstatus-v1alpha2">IssuerStatus</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
 <hr>
-<h1 id="issuer-v1alpha1">Issuer v1alpha1</h1>
+<h1 id="issuer-v1alpha2">Issuer v1alpha2</h1>
 <table>
 <thead>
 <tr>
@@ -216,7 +216,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>Issuer</code></td>
 </tr>
 </tbody></table>
@@ -240,21 +240,21 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#issuerspec-v1alpha1">IssuerSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#issuerspec-v1alpha2">IssuerSpec</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>status</code><br /> *<a href="#issuerstatus-v1alpha1">IssuerStatus</a>*</td>
+<td><code>status</code><br /> *<a href="#issuerstatus-v1alpha2">IssuerStatus</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h3 id="issuerspec-v1alpha1">IssuerSpec v1alpha1</h3>
+<h3 id="issuerspec-v1alpha2">IssuerSpec v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#clusterissuer-v1alpha1">ClusterIssuer v1alpha1</a></li>
-<li><a href="#issuer-v1alpha1">Issuer v1alpha1</a></li>
+<li><a href="#clusterissuer-v1alpha2">ClusterIssuer v1alpha2</a></li>
+<li><a href="#issuer-v1alpha2">Issuer v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -265,33 +265,33 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>acme</code><br /> *<a href="#acmeissuer-v1alpha1">ACMEIssuer</a>*</td>
+<td><code>acme</code><br /> *<a href="#acmeissuer-v1alpha2">ACMEIssuer</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>ca</code><br /> *<a href="#caissuer-v1alpha1">CAIssuer</a>*</td>
+<td><code>ca</code><br /> *<a href="#caissuer-v1alpha2">CAIssuer</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>selfSigned</code><br /> *<a href="#selfsignedissuer-v1alpha1">SelfSignedIssuer</a>*</td>
+<td><code>selfSigned</code><br /> *<a href="#selfsignedissuer-v1alpha2">SelfSignedIssuer</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>vault</code><br /> *<a href="#vaultissuer-v1alpha1">VaultIssuer</a>*</td>
+<td><code>vault</code><br /> *<a href="#vaultissuer-v1alpha2">VaultIssuer</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>venafi</code><br /> *<a href="#venafiissuer-v1alpha1">VenafiIssuer</a>*</td>
+<td><code>venafi</code><br /> *<a href="#venafiissuer-v1alpha2">VenafiIssuer</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h3 id="issuerstatus-v1alpha1">IssuerStatus v1alpha1</h3>
+<h3 id="issuerstatus-v1alpha2">IssuerStatus v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#clusterissuer-v1alpha1">ClusterIssuer v1alpha1</a></li>
-<li><a href="#issuer-v1alpha1">Issuer v1alpha1</a></li>
+<li><a href="#clusterissuer-v1alpha2">ClusterIssuer v1alpha2</a></li>
+<li><a href="#issuer-v1alpha2">Issuer v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -302,16 +302,16 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>acme</code><br /> *<a href="#acmeissuerstatus-v1alpha1">ACMEIssuerStatus</a>*</td>
+<td><code>acme</code><br /> *<a href="#acmeissuerstatus-v1alpha2">ACMEIssuerStatus</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>conditions</code><br /> *<a href="#issuercondition-v1alpha1">IssuerCondition</a> array*</td>
+<td><code>conditions</code><br /> *<a href="#issuercondition-v1alpha2">IssuerCondition</a> array*</td>
 <td></td>
 </tr>
 </tbody></table>
 <hr>
-<h1 id="order-v1alpha1">Order v1alpha1</h1>
+<h1 id="order-v1alpha2">Order v1alpha2</h1>
 <table>
 <thead>
 <tr>
@@ -322,7 +322,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>Order</code></td>
 </tr>
 </tbody></table>
@@ -347,20 +347,20 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#orderspec-v1alpha1">OrderSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#orderspec-v1alpha2">OrderSpec</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>status</code><br /> *<a href="#orderstatus-v1alpha1">OrderStatus</a>*</td>
+<td><code>status</code><br /> *<a href="#orderstatus-v1alpha2">OrderStatus</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h3 id="orderspec-v1alpha1">OrderSpec v1alpha1</h3>
+<h3 id="orderspec-v1alpha2">OrderSpec v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#order-v1alpha1">Order v1alpha1</a></li>
+<li><a href="#order-v1alpha2">Order v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -383,16 +383,16 @@ Appears In:
 <td>DNSNames is a list of DNS names that should be included as part of the Order validation process. If CommonName is not specified, the first DNSName specified will be used as the CommonName. At least one of CommonName or a DNSNames must be set. This field must match the corresponding field on the DER encoded CSR.</td>
 </tr>
 <tr>
-<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha1">ObjectReference</a>*</td>
+<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha2">ObjectReference</a>*</td>
 <td>IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an &#39;ACME&#39; Issuer, an error will be returned and the Order will be marked as failed.</td>
 </tr>
 </tbody></table>
-<h3 id="orderstatus-v1alpha1">OrderStatus v1alpha1</h3>
+<h3 id="orderstatus-v1alpha2">OrderStatus v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#order-v1alpha1">Order v1alpha1</a></li>
+<li><a href="#order-v1alpha2">Order v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -403,7 +403,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>authorizations</code><br /> *<a href="#acmeauthorization-v1alpha1">ACMEAuthorization</a> array*</td>
+<td><code>authorizations</code><br /> *<a href="#acmeauthorization-v1alpha2">ACMEAuthorization</a> array*</td>
 <td>Authorizations contains data returned from the ACME server on what authoriations must be completed in order to validate the DNS names specified on the Order.</td>
 </tr>
 <tr>
@@ -432,7 +432,7 @@ Appears In:
 </tr>
 </tbody></table>
 <hr>
-<h1 id="challenge-v1alpha1">Challenge v1alpha1</h1>
+<h1 id="challenge-v1alpha2">Challenge v1alpha2</h1>
 <table>
 <thead>
 <tr>
@@ -443,7 +443,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>Challenge</code></td>
 </tr>
 </tbody></table>
@@ -468,20 +468,20 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#challengespec-v1alpha1">ChallengeSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#challengespec-v1alpha2">ChallengeSpec</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>status</code><br /> *<a href="#challengestatus-v1alpha1">ChallengeStatus</a>*</td>
+<td><code>status</code><br /> *<a href="#challengestatus-v1alpha2">ChallengeStatus</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h3 id="challengespec-v1alpha1">ChallengeSpec v1alpha1</h3>
+<h3 id="challengespec-v1alpha2">ChallengeSpec v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#challenge-v1alpha1">Challenge v1alpha1</a></li>
+<li><a href="#challenge-v1alpha2">Challenge v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -500,7 +500,7 @@ Appears In:
 <td>DNSName is the identifier that this challenge is for, e.g. example.com.</td>
 </tr>
 <tr>
-<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha1">ObjectReference</a>*</td>
+<td><code>issuerRef</code><br /> *<a href="#objectreference-v1alpha2">ObjectReference</a>*</td>
 <td>IssuerRef references a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an &#39;ACME&#39; Issuer, an error will be returned and the Challenge will be marked as failed.</td>
 </tr>
 <tr>
@@ -508,7 +508,7 @@ Appears In:
 <td>Key is the ACME challenge key for this challenge</td>
 </tr>
 <tr>
-<td><code>solver</code><br /> *<a href="#acmechallengesolver-v1alpha1">ACMEChallengeSolver</a>*</td>
+<td><code>solver</code><br /> *<a href="#acmechallengesolver-v1alpha2">ACMEChallengeSolver</a>*</td>
 <td>Solver contains the domain solving configuration that should be used to solve this challenge resource. Only <strong>one</strong> of &#39;config&#39; or &#39;solver&#39; may be specified, and if both are specified then no action will be performed on the Challenge resource.</td>
 </tr>
 <tr>
@@ -528,12 +528,12 @@ Appears In:
 <td>Wildcard will be true if this challenge is for a wildcard identifier, for example &#39;*.example.com&#39;</td>
 </tr>
 </tbody></table>
-<h3 id="challengestatus-v1alpha1">ChallengeStatus v1alpha1</h3>
+<h3 id="challengestatus-v1alpha2">ChallengeStatus v1alpha2</h3>
 <aside class="notice">
 Appears In:
 
 <ul>
-<li><a href="#challenge-v1alpha1">Challenge v1alpha1</a></li>
+<li><a href="#challenge-v1alpha2">Challenge v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -564,7 +564,7 @@ Appears In:
 <hr>
 <h1 id="-strong-field-definitions-strong-"><strong>Field Definitions</strong></h1>
 <hr>
-<h2 id="acmeauthorization-v1alpha1">ACMEAuthorization v1alpha1</h2>
+<h2 id="acmeauthorization-v1alpha2">ACMEAuthorization v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -575,7 +575,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEAuthorization</code></td>
 </tr>
 </tbody></table>
@@ -584,7 +584,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#orderstatus-v1alpha1">OrderStatus v1alpha1</a></li>
+<li><a href="#orderstatus-v1alpha2">OrderStatus v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -595,7 +595,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>challenges</code><br /> *<a href="#acmechallenge-v1alpha1">ACMEChallenge</a> array*</td>
+<td><code>challenges</code><br /> *<a href="#acmechallenge-v1alpha2">ACMEChallenge</a> array*</td>
 <td>Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.</td>
 </tr>
 <tr>
@@ -611,7 +611,7 @@ Appears In:
 <td>Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the <em>non-wildcard</em> version of the DNS name. For example, if &#39;*.example.com&#39; is the DNS name being validated, this field will be &#39;true&#39; and the &#39;identifier&#39; field will be &#39;example.com&#39;.</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallenge-v1alpha1">ACMEChallenge v1alpha1</h2>
+<h2 id="acmechallenge-v1alpha2">ACMEChallenge v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -622,7 +622,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallenge</code></td>
 </tr>
 </tbody></table>
@@ -631,7 +631,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmeauthorization-v1alpha1">ACMEAuthorization v1alpha1</a></li>
+<li><a href="#acmeauthorization-v1alpha2">ACMEAuthorization v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -654,7 +654,7 @@ Appears In:
 <td>URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolver-v1alpha1">ACMEChallengeSolver v1alpha1</h2>
+<h2 id="acmechallengesolver-v1alpha2">ACMEChallengeSolver v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -665,7 +665,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolver</code></td>
 </tr>
 </tbody></table>
@@ -673,8 +673,8 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmeissuer-v1alpha1">ACMEIssuer v1alpha1</a></li>
-<li><a href="#challengespec-v1alpha1">ChallengeSpec v1alpha1</a></li>
+<li><a href="#acmeissuer-v1alpha2">ACMEIssuer v1alpha2</a></li>
+<li><a href="#challengespec-v1alpha2">ChallengeSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -685,19 +685,19 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>dns01</code><br /> *<a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01</a>*</td>
+<td><code>dns01</code><br /> *<a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>http01</code><br /> *<a href="#acmechallengesolverhttp01-v1alpha1">ACMEChallengeSolverHTTP01</a>*</td>
+<td><code>http01</code><br /> *<a href="#acmechallengesolverhttp01-v1alpha2">ACMEChallengeSolverHTTP01</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>selector</code><br /> *<a href="#certificatednsnameselector-v1alpha1">CertificateDNSNameSelector</a>*</td>
+<td><code>selector</code><br /> *<a href="#certificatednsnameselector-v1alpha2">CertificateDNSNameSelector</a>*</td>
 <td>Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver.</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</h2>
+<h2 id="acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -708,7 +708,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolverDNS01</code></td>
 </tr>
 </tbody></table>
@@ -716,7 +716,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolver-v1alpha1">ACMEChallengeSolver v1alpha1</a></li>
+<li><a href="#acmechallengesolver-v1alpha2">ACMEChallengeSolver v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -727,23 +727,23 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>acmedns</code><br /> *<a href="#acmeissuerdns01provideracmedns-v1alpha1">ACMEIssuerDNS01ProviderAcmeDNS</a>*</td>
+<td><code>acmedns</code><br /> *<a href="#acmeissuerdns01provideracmedns-v1alpha2">ACMEIssuerDNS01ProviderAcmeDNS</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>akamai</code><br /> *<a href="#acmeissuerdns01providerakamai-v1alpha1">ACMEIssuerDNS01ProviderAkamai</a>*</td>
+<td><code>akamai</code><br /> *<a href="#acmeissuerdns01providerakamai-v1alpha2">ACMEIssuerDNS01ProviderAkamai</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>azuredns</code><br /> *<a href="#acmeissuerdns01providerazuredns-v1alpha1">ACMEIssuerDNS01ProviderAzureDNS</a>*</td>
+<td><code>azuredns</code><br /> *<a href="#acmeissuerdns01providerazuredns-v1alpha2">ACMEIssuerDNS01ProviderAzureDNS</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>clouddns</code><br /> *<a href="#acmeissuerdns01providerclouddns-v1alpha1">ACMEIssuerDNS01ProviderCloudDNS</a>*</td>
+<td><code>clouddns</code><br /> *<a href="#acmeissuerdns01providerclouddns-v1alpha2">ACMEIssuerDNS01ProviderCloudDNS</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>cloudflare</code><br /> *<a href="#acmeissuerdns01providercloudflare-v1alpha1">ACMEIssuerDNS01ProviderCloudflare</a>*</td>
+<td><code>cloudflare</code><br /> *<a href="#acmeissuerdns01providercloudflare-v1alpha2">ACMEIssuerDNS01ProviderCloudflare</a>*</td>
 <td></td>
 </tr>
 <tr>
@@ -751,23 +751,23 @@ Appears In:
 <td>CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.</td>
 </tr>
 <tr>
-<td><code>digitalocean</code><br /> *<a href="#acmeissuerdns01providerdigitalocean-v1alpha1">ACMEIssuerDNS01ProviderDigitalOcean</a>*</td>
+<td><code>digitalocean</code><br /> *<a href="#acmeissuerdns01providerdigitalocean-v1alpha2">ACMEIssuerDNS01ProviderDigitalOcean</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>rfc2136</code><br /> *<a href="#acmeissuerdns01providerrfc2136-v1alpha1">ACMEIssuerDNS01ProviderRFC2136</a>*</td>
+<td><code>rfc2136</code><br /> *<a href="#acmeissuerdns01providerrfc2136-v1alpha2">ACMEIssuerDNS01ProviderRFC2136</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>route53</code><br /> *<a href="#acmeissuerdns01providerroute53-v1alpha1">ACMEIssuerDNS01ProviderRoute53</a>*</td>
+<td><code>route53</code><br /> *<a href="#acmeissuerdns01providerroute53-v1alpha2">ACMEIssuerDNS01ProviderRoute53</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>webhook</code><br /> *<a href="#acmeissuerdns01providerwebhook-v1alpha1">ACMEIssuerDNS01ProviderWebhook</a>*</td>
+<td><code>webhook</code><br /> *<a href="#acmeissuerdns01providerwebhook-v1alpha2">ACMEIssuerDNS01ProviderWebhook</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolverhttp01-v1alpha1">ACMEChallengeSolverHTTP01 v1alpha1</h2>
+<h2 id="acmechallengesolverhttp01-v1alpha2">ACMEChallengeSolverHTTP01 v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -778,7 +778,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolverHTTP01</code></td>
 </tr>
 </tbody></table>
@@ -787,7 +787,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolver-v1alpha1">ACMEChallengeSolver v1alpha1</a></li>
+<li><a href="#acmechallengesolver-v1alpha2">ACMEChallengeSolver v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -798,11 +798,11 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>ingress</code><br /> *<a href="#acmechallengesolverhttp01ingress-v1alpha1">ACMEChallengeSolverHTTP01Ingress</a>*</td>
+<td><code>ingress</code><br /> *<a href="#acmechallengesolverhttp01ingress-v1alpha2">ACMEChallengeSolverHTTP01Ingress</a>*</td>
 <td>The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for &#39;/.well-known/acme-challenge/XYZ&#39; to &#39;challenge solver&#39; pods that are provisioned by cert-manager for each Challenge to be completed.</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolverhttp01ingress-v1alpha1">ACMEChallengeSolverHTTP01Ingress v1alpha1</h2>
+<h2 id="acmechallengesolverhttp01ingress-v1alpha2">ACMEChallengeSolverHTTP01Ingress v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -813,7 +813,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolverHTTP01Ingress</code></td>
 </tr>
 </tbody></table>
@@ -821,7 +821,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverhttp01-v1alpha1">ACMEChallengeSolverHTTP01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverhttp01-v1alpha2">ACMEChallengeSolverHTTP01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -840,7 +840,7 @@ Appears In:
 <td>The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.</td>
 </tr>
 <tr>
-<td><code>podTemplate</code><br /> *<a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha1">ACMEChallengeSolverHTTP01IngressPodTemplate</a>*</td>
+<td><code>podTemplate</code><br /> *<a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha2">ACMEChallengeSolverHTTP01IngressPodTemplate</a>*</td>
 <td>Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges</td>
 </tr>
 <tr>
@@ -848,7 +848,7 @@ Appears In:
 <td>Optional service type for Kubernetes solver service</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolverhttp01ingresspodspec-v1alpha1">ACMEChallengeSolverHTTP01IngressPodSpec v1alpha1</h2>
+<h2 id="acmechallengesolverhttp01ingresspodspec-v1alpha2">ACMEChallengeSolverHTTP01IngressPodSpec v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -859,7 +859,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolverHTTP01IngressPodSpec</code></td>
 </tr>
 </tbody></table>
@@ -867,7 +867,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha1">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha1</a></li>
+<li><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha2">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -890,7 +890,7 @@ Appears In:
 <td>If specified, the pod&#39;s tolerations.</td>
 </tr>
 </tbody></table>
-<h2 id="acmechallengesolverhttp01ingresspodtemplate-v1alpha1">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha1</h2>
+<h2 id="acmechallengesolverhttp01ingresspodtemplate-v1alpha2">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -901,7 +901,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEChallengeSolverHTTP01IngressPodTemplate</code></td>
 </tr>
 </tbody></table>
@@ -909,7 +909,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverhttp01ingress-v1alpha1">ACMEChallengeSolverHTTP01Ingress v1alpha1</a></li>
+<li><a href="#acmechallengesolverhttp01ingress-v1alpha2">ACMEChallengeSolverHTTP01Ingress v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -924,11 +924,11 @@ Appears In:
 <td>ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the &#39;labels&#39; and &#39;annotations&#39; fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.</td>
 </tr>
 <tr>
-<td><code>spec</code><br /> *<a href="#acmechallengesolverhttp01ingresspodspec-v1alpha1">ACMEChallengeSolverHTTP01IngressPodSpec</a>*</td>
+<td><code>spec</code><br /> *<a href="#acmechallengesolverhttp01ingresspodspec-v1alpha2">ACMEChallengeSolverHTTP01IngressPodSpec</a>*</td>
 <td>PodSpec defines overrides for the HTTP01 challenge solver pod. Only the &#39;nodeSelector&#39;, &#39;affinity&#39; and &#39;tolerations&#39; fields are supported currently. All other fields will be ignored.</td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuer-v1alpha1">ACMEIssuer v1alpha1</h2>
+<h2 id="acmeissuer-v1alpha2">ACMEIssuer v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -939,7 +939,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuer</code></td>
 </tr>
 </tbody></table>
@@ -948,7 +948,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerspec-v1alpha1">IssuerSpec v1alpha1</a></li>
+<li><a href="#issuerspec-v1alpha2">IssuerSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -963,7 +963,7 @@ Appears In:
 <td>Email is the email for this account</td>
 </tr>
 <tr>
-<td><code>privateKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>privateKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td>PrivateKey is the name of a secret containing the private key for this user account.</td>
 </tr>
 <tr>
@@ -975,11 +975,11 @@ Appears In:
 <td>If true, skip verifying the ACME server TLS certificate</td>
 </tr>
 <tr>
-<td><code>solvers</code><br /> *<a href="#acmechallengesolver-v1alpha1">ACMEChallengeSolver</a> array*</td>
+<td><code>solvers</code><br /> *<a href="#acmechallengesolver-v1alpha2">ACMEChallengeSolver</a> array*</td>
 <td>Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains.</td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01provideracmedns-v1alpha1">ACMEIssuerDNS01ProviderAcmeDNS v1alpha1</h2>
+<h2 id="acmeissuerdns01provideracmedns-v1alpha2">ACMEIssuerDNS01ProviderAcmeDNS v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -990,7 +990,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderAcmeDNS</code></td>
 </tr>
 </tbody></table>
@@ -999,7 +999,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1010,7 +1010,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>accountSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>accountSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
@@ -1018,7 +1018,7 @@ Appears In:
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerakamai-v1alpha1">ACMEIssuerDNS01ProviderAkamai v1alpha1</h2>
+<h2 id="acmeissuerdns01providerakamai-v1alpha2">ACMEIssuerDNS01ProviderAkamai v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1029,7 +1029,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderAkamai</code></td>
 </tr>
 </tbody></table>
@@ -1038,7 +1038,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1049,15 +1049,15 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>accessTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>accessTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>clientSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>clientSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
-<td><code>clientTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>clientTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
@@ -1065,7 +1065,7 @@ Appears In:
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerazuredns-v1alpha1">ACMEIssuerDNS01ProviderAzureDNS v1alpha1</h2>
+<h2 id="acmeissuerdns01providerazuredns-v1alpha2">ACMEIssuerDNS01ProviderAzureDNS v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1076,7 +1076,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderAzureDNS</code></td>
 </tr>
 </tbody></table>
@@ -1085,7 +1085,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1100,7 +1100,7 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>clientSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>clientSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
@@ -1124,7 +1124,7 @@ Appears In:
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerclouddns-v1alpha1">ACMEIssuerDNS01ProviderCloudDNS v1alpha1</h2>
+<h2 id="acmeissuerdns01providerclouddns-v1alpha2">ACMEIssuerDNS01ProviderCloudDNS v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1135,7 +1135,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderCloudDNS</code></td>
 </tr>
 </tbody></table>
@@ -1144,7 +1144,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1159,11 +1159,11 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>serviceAccountSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>serviceAccountSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providercloudflare-v1alpha1">ACMEIssuerDNS01ProviderCloudflare v1alpha1</h2>
+<h2 id="acmeissuerdns01providercloudflare-v1alpha2">ACMEIssuerDNS01ProviderCloudflare v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1174,7 +1174,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderCloudflare</code></td>
 </tr>
 </tbody></table>
@@ -1183,7 +1183,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1194,7 +1194,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>apiKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>apiKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 <tr>
@@ -1202,7 +1202,7 @@ Appears In:
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerdigitalocean-v1alpha1">ACMEIssuerDNS01ProviderDigitalOcean v1alpha1</h2>
+<h2 id="acmeissuerdns01providerdigitalocean-v1alpha2">ACMEIssuerDNS01ProviderDigitalOcean v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1213,7 +1213,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderDigitalOcean</code></td>
 </tr>
 </tbody></table>
@@ -1222,7 +1222,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1233,11 +1233,11 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>tokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>tokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerrfc2136-v1alpha1">ACMEIssuerDNS01ProviderRFC2136 v1alpha1</h2>
+<h2 id="acmeissuerdns01providerrfc2136-v1alpha2">ACMEIssuerDNS01ProviderRFC2136 v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1248,7 +1248,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderRFC2136</code></td>
 </tr>
 </tbody></table>
@@ -1257,7 +1257,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1280,11 +1280,11 @@ Appears In:
 <td>The TSIG Key name configured in the DNS. If <code>tsigSecretSecretRef</code> is defined, this field is required.</td>
 </tr>
 <tr>
-<td><code>tsigSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>tsigSecretSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td>The name of the secret containing the TSIG value. If <code>tsigKeyName</code> is defined, this field is required.</td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerroute53-v1alpha1">ACMEIssuerDNS01ProviderRoute53 v1alpha1</h2>
+<h2 id="acmeissuerdns01providerroute53-v1alpha2">ACMEIssuerDNS01ProviderRoute53 v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1295,7 +1295,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderRoute53</code></td>
 </tr>
 </tbody></table>
@@ -1304,7 +1304,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1331,11 +1331,11 @@ Appears In:
 <td>Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata</td>
 </tr>
 <tr>
-<td><code>secretAccessKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>secretAccessKeySecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td>The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata <a href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials">https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials</a></td>
 </tr>
 </tbody></table>
-<h2 id="acmeissuerdns01providerwebhook-v1alpha1">ACMEIssuerDNS01ProviderWebhook v1alpha1</h2>
+<h2 id="acmeissuerdns01providerwebhook-v1alpha2">ACMEIssuerDNS01ProviderWebhook v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1346,7 +1346,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ACMEIssuerDNS01ProviderWebhook</code></td>
 </tr>
 </tbody></table>
@@ -1355,7 +1355,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverdns01-v1alpha1">ACMEChallengeSolverDNS01 v1alpha1</a></li>
+<li><a href="#acmechallengesolverdns01-v1alpha2">ACMEChallengeSolverDNS01 v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1378,7 +1378,7 @@ Appears In:
 <td>The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. &#39;cloudflare&#39;.</td>
 </tr>
 </tbody></table>
-<h2 id="caissuer-v1alpha1">CAIssuer v1alpha1</h2>
+<h2 id="caissuer-v1alpha2">CAIssuer v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1389,7 +1389,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>CAIssuer</code></td>
 </tr>
 </tbody></table>
@@ -1397,7 +1397,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerspec-v1alpha1">IssuerSpec v1alpha1</a></li>
+<li><a href="#issuerspec-v1alpha2">IssuerSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1412,7 +1412,7 @@ Appears In:
 <td>SecretName is the name of the secret used to sign Certificates issued by this Issuer.</td>
 </tr>
 </tbody></table>
-<h2 id="certificatecondition-v1alpha1">CertificateCondition v1alpha1</h2>
+<h2 id="certificatecondition-v1alpha2">CertificateCondition v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1423,7 +1423,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>CertificateCondition</code></td>
 </tr>
 </tbody></table>
@@ -1432,7 +1432,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#certificatestatus-v1alpha1">CertificateStatus v1alpha1</a></li>
+<li><a href="#certificatestatus-v1alpha2">CertificateStatus v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1463,7 +1463,7 @@ Appears In:
 <td>Type of the condition, currently (&#39;Ready&#39;).</td>
 </tr>
 </tbody></table>
-<h2 id="certificatednsnameselector-v1alpha1">CertificateDNSNameSelector v1alpha1</h2>
+<h2 id="certificatednsnameselector-v1alpha2">CertificateDNSNameSelector v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1474,7 +1474,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>CertificateDNSNameSelector</code></td>
 </tr>
 </tbody></table>
@@ -1483,7 +1483,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolver-v1alpha1">ACMEChallengeSolver v1alpha1</a></li>
+<li><a href="#acmechallengesolver-v1alpha2">ACMEChallengeSolver v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1526,7 +1526,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#certificatespec-v1alpha1">CertificateSpec v1alpha1</a></li>
+<li><a href="#certificatespec-v1alpha2">CertificateSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1570,7 +1570,7 @@ Appears In:
 </tr>
 </thead>
 </table>
-<h2 id="issuercondition-v1alpha1">IssuerCondition v1alpha1</h2>
+<h2 id="issuercondition-v1alpha2">IssuerCondition v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1581,7 +1581,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>IssuerCondition</code></td>
 </tr>
 </tbody></table>
@@ -1590,7 +1590,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerstatus-v1alpha1">IssuerStatus v1alpha1</a></li>
+<li><a href="#issuerstatus-v1alpha2">IssuerStatus v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1621,7 +1621,7 @@ Appears In:
 <td>Type of the condition, currently (&#39;Ready&#39;).</td>
 </tr>
 </tbody></table>
-<h2 id="localobjectreference-v1alpha1">LocalObjectReference v1alpha1</h2>
+<h2 id="localobjectreference-v1alpha2">LocalObjectReference v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1632,7 +1632,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>LocalObjectReference</code></td>
 </tr>
 </tbody></table>
@@ -1640,7 +1640,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#venafitpp-v1alpha1">VenafiTPP v1alpha1</a></li>
+<li><a href="#venafitpp-v1alpha2">VenafiTPP v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1730,12 +1730,12 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha1">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha1</a></li>
-<li><a href="#certificate-v1alpha1">Certificate v1alpha1</a></li>
-<li><a href="#challenge-v1alpha1">Challenge v1alpha1</a></li>
-<li><a href="#clusterissuer-v1alpha1">ClusterIssuer v1alpha1</a></li>
-<li><a href="#issuer-v1alpha1">Issuer v1alpha1</a></li>
-<li><a href="#order-v1alpha1">Order v1alpha1</a></li>
+<li><a href="#acmechallengesolverhttp01ingresspodtemplate-v1alpha2">ACMEChallengeSolverHTTP01IngressPodTemplate v1alpha2</a></li>
+<li><a href="#certificate-v1alpha2">Certificate v1alpha2</a></li>
+<li><a href="#challenge-v1alpha2">Challenge v1alpha2</a></li>
+<li><a href="#clusterissuer-v1alpha2">ClusterIssuer v1alpha2</a></li>
+<li><a href="#issuer-v1alpha2">Issuer v1alpha2</a></li>
+<li><a href="#order-v1alpha2">Order v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1810,7 +1810,7 @@ Appears In:
 <td>UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: <a href="http://kubernetes.io/docs/user-guide/identifiers#uids">http://kubernetes.io/docs/user-guide/identifiers#uids</a></td>
 </tr>
 </tbody></table>
-<h2 id="objectreference-v1alpha1">ObjectReference v1alpha1</h2>
+<h2 id="objectreference-v1alpha2">ObjectReference v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1821,7 +1821,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>ObjectReference</code></td>
 </tr>
 </tbody></table>
@@ -1830,9 +1830,9 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#certificatespec-v1alpha1">CertificateSpec v1alpha1</a></li>
-<li><a href="#challengespec-v1alpha1">ChallengeSpec v1alpha1</a></li>
-<li><a href="#orderspec-v1alpha1">OrderSpec v1alpha1</a></li>
+<li><a href="#certificatespec-v1alpha2">CertificateSpec v1alpha2</a></li>
+<li><a href="#challengespec-v1alpha2">ChallengeSpec v1alpha2</a></li>
+<li><a href="#orderspec-v1alpha2">OrderSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1910,7 +1910,7 @@ Appears In:
 <td>UID of the referent. More info: <a href="http://kubernetes.io/docs/user-guide/identifiers#uids">http://kubernetes.io/docs/user-guide/identifiers#uids</a></td>
 </tr>
 </tbody></table>
-<h2 id="secretkeyselector-v1alpha1">SecretKeySelector v1alpha1</h2>
+<h2 id="secretkeyselector-v1alpha2">SecretKeySelector v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1921,7 +1921,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>SecretKeySelector</code></td>
 </tr>
 </tbody></table>
@@ -1929,18 +1929,18 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#acmeissuer-v1alpha1">ACMEIssuer v1alpha1</a></li>
-<li><a href="#acmeissuerdns01provideracmedns-v1alpha1">ACMEIssuerDNS01ProviderAcmeDNS v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerakamai-v1alpha1">ACMEIssuerDNS01ProviderAkamai v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerazuredns-v1alpha1">ACMEIssuerDNS01ProviderAzureDNS v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerclouddns-v1alpha1">ACMEIssuerDNS01ProviderCloudDNS v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providercloudflare-v1alpha1">ACMEIssuerDNS01ProviderCloudflare v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerdigitalocean-v1alpha1">ACMEIssuerDNS01ProviderDigitalOcean v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerrfc2136-v1alpha1">ACMEIssuerDNS01ProviderRFC2136 v1alpha1</a></li>
-<li><a href="#acmeissuerdns01providerroute53-v1alpha1">ACMEIssuerDNS01ProviderRoute53 v1alpha1</a></li>
-<li><a href="#vaultapprole-v1alpha1">VaultAppRole v1alpha1</a></li>
-<li><a href="#vaultauth-v1alpha1">VaultAuth v1alpha1</a></li>
-<li><a href="#venaficloud-v1alpha1">VenafiCloud v1alpha1</a></li>
+<li><a href="#acmeissuer-v1alpha2">ACMEIssuer v1alpha2</a></li>
+<li><a href="#acmeissuerdns01provideracmedns-v1alpha2">ACMEIssuerDNS01ProviderAcmeDNS v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerakamai-v1alpha2">ACMEIssuerDNS01ProviderAkamai v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerazuredns-v1alpha2">ACMEIssuerDNS01ProviderAzureDNS v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerclouddns-v1alpha2">ACMEIssuerDNS01ProviderCloudDNS v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providercloudflare-v1alpha2">ACMEIssuerDNS01ProviderCloudflare v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerdigitalocean-v1alpha2">ACMEIssuerDNS01ProviderDigitalOcean v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerrfc2136-v1alpha2">ACMEIssuerDNS01ProviderRFC2136 v1alpha2</a></li>
+<li><a href="#acmeissuerdns01providerroute53-v1alpha2">ACMEIssuerDNS01ProviderRoute53 v1alpha2</a></li>
+<li><a href="#vaultapprole-v1alpha2">VaultAppRole v1alpha2</a></li>
+<li><a href="#vaultauth-v1alpha2">VaultAuth v1alpha2</a></li>
+<li><a href="#venaficloud-v1alpha2">VenafiCloud v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -1959,7 +1959,7 @@ Appears In:
 <td>Name of the referent. More info: <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names">https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</a></td>
 </tr>
 </tbody></table>
-<h2 id="selfsignedissuer-v1alpha1">SelfSignedIssuer v1alpha1</h2>
+<h2 id="selfsignedissuer-v1alpha2">SelfSignedIssuer v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -1970,7 +1970,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>SelfSignedIssuer</code></td>
 </tr>
 </tbody></table>
@@ -1978,7 +1978,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerspec-v1alpha1">IssuerSpec v1alpha1</a></li>
+<li><a href="#issuerspec-v1alpha2">IssuerSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2009,12 +2009,12 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#certificatecondition-v1alpha1">CertificateCondition v1alpha1</a></li>
-<li><a href="#certificatestatus-v1alpha1">CertificateStatus v1alpha1</a></li>
-<li><a href="#issuercondition-v1alpha1">IssuerCondition v1alpha1</a></li>
+<li><a href="#certificatecondition-v1alpha2">CertificateCondition v1alpha2</a></li>
+<li><a href="#certificatestatus-v1alpha2">CertificateStatus v1alpha2</a></li>
+<li><a href="#issuercondition-v1alpha2">IssuerCondition v1alpha2</a></li>
 <li><a href="#managedfieldsentry-v1">ManagedFieldsEntry v1</a></li>
 <li><a href="#objectmeta-v1">ObjectMeta v1</a></li>
-<li><a href="#orderstatus-v1alpha1">OrderStatus v1alpha1</a></li>
+<li><a href="#orderstatus-v1alpha2">OrderStatus v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2025,7 +2025,7 @@ Appears In:
 </tr>
 </thead>
 </table>
-<h2 id="vaultapprole-v1alpha1">VaultAppRole v1alpha1</h2>
+<h2 id="vaultapprole-v1alpha2">VaultAppRole v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2036,7 +2036,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VaultAppRole</code></td>
 </tr>
 </tbody></table>
@@ -2044,7 +2044,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#vaultauth-v1alpha1">VaultAuth v1alpha1</a></li>
+<li><a href="#vaultauth-v1alpha2">VaultAuth v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2063,11 +2063,11 @@ Appears In:
 <td></td>
 </tr>
 <tr>
-<td><code>secretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>secretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td></td>
 </tr>
 </tbody></table>
-<h2 id="vaultauth-v1alpha1">VaultAuth v1alpha1</h2>
+<h2 id="vaultauth-v1alpha2">VaultAuth v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2078,7 +2078,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VaultAuth</code></td>
 </tr>
 </tbody></table>
@@ -2088,7 +2088,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#vaultissuer-v1alpha1">VaultIssuer v1alpha1</a></li>
+<li><a href="#vaultissuer-v1alpha2">VaultIssuer v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2099,15 +2099,15 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>appRole</code><br /> *<a href="#vaultapprole-v1alpha1">VaultAppRole</a>*</td>
+<td><code>appRole</code><br /> *<a href="#vaultapprole-v1alpha2">VaultAppRole</a>*</td>
 <td>This Secret contains a AppRole and Secret</td>
 </tr>
 <tr>
-<td><code>tokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>tokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td>This Secret contains the Vault token key</td>
 </tr>
 </tbody></table>
-<h2 id="vaultissuer-v1alpha1">VaultIssuer v1alpha1</h2>
+<h2 id="vaultissuer-v1alpha2">VaultIssuer v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2118,7 +2118,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VaultIssuer</code></td>
 </tr>
 </tbody></table>
@@ -2126,7 +2126,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerspec-v1alpha1">IssuerSpec v1alpha1</a></li>
+<li><a href="#issuerspec-v1alpha2">IssuerSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2137,7 +2137,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>auth</code><br /> *<a href="#vaultauth-v1alpha1">VaultAuth</a>*</td>
+<td><code>auth</code><br /> *<a href="#vaultauth-v1alpha2">VaultAuth</a>*</td>
 <td>Vault authentication</td>
 </tr>
 <tr>
@@ -2153,7 +2153,7 @@ Appears In:
 <td>Server is the vault connection address</td>
 </tr>
 </tbody></table>
-<h2 id="venaficloud-v1alpha1">VenafiCloud v1alpha1</h2>
+<h2 id="venaficloud-v1alpha2">VenafiCloud v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2164,7 +2164,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VenafiCloud</code></td>
 </tr>
 </tbody></table>
@@ -2173,7 +2173,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#venafiissuer-v1alpha1">VenafiIssuer v1alpha1</a></li>
+<li><a href="#venafiissuer-v1alpha2">VenafiIssuer v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2184,7 +2184,7 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>apiTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha1">SecretKeySelector</a>*</td>
+<td><code>apiTokenSecretRef</code><br /> *<a href="#secretkeyselector-v1alpha2">SecretKeySelector</a>*</td>
 <td>APITokenSecretRef is a secret key selector for the Venafi Cloud API token.</td>
 </tr>
 <tr>
@@ -2192,7 +2192,7 @@ Appears In:
 <td>URL is the base URL for Venafi Cloud</td>
 </tr>
 </tbody></table>
-<h2 id="venafiissuer-v1alpha1">VenafiIssuer v1alpha1</h2>
+<h2 id="venafiissuer-v1alpha2">VenafiIssuer v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2203,7 +2203,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VenafiIssuer</code></td>
 </tr>
 </tbody></table>
@@ -2212,7 +2212,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#issuerspec-v1alpha1">IssuerSpec v1alpha1</a></li>
+<li><a href="#issuerspec-v1alpha2">IssuerSpec v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2223,11 +2223,11 @@ Appears In:
 </tr>
 </thead>
 <tbody><tr>
-<td><code>cloud</code><br /> *<a href="#venaficloud-v1alpha1">VenafiCloud</a>*</td>
+<td><code>cloud</code><br /> *<a href="#venaficloud-v1alpha2">VenafiCloud</a>*</td>
 <td>Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.</td>
 </tr>
 <tr>
-<td><code>tpp</code><br /> *<a href="#venafitpp-v1alpha1">VenafiTPP</a>*</td>
+<td><code>tpp</code><br /> *<a href="#venafitpp-v1alpha2">VenafiTPP</a>*</td>
 <td>TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.</td>
 </tr>
 <tr>
@@ -2235,7 +2235,7 @@ Appears In:
 <td>Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.</td>
 </tr>
 </tbody></table>
-<h2 id="venafitpp-v1alpha1">VenafiTPP v1alpha1</h2>
+<h2 id="venafitpp-v1alpha2">VenafiTPP v1alpha2</h2>
 <table>
 <thead>
 <tr>
@@ -2246,7 +2246,7 @@ Appears In:
 </thead>
 <tbody><tr>
 <td><code>certmanager</code></td>
-<td><code>v1alpha1</code></td>
+<td><code>v1alpha2</code></td>
 <td><code>VenafiTPP</code></td>
 </tr>
 </tbody></table>
@@ -2255,7 +2255,7 @@ Appears In:
 Appears In:
 
 <ul> 
-<li><a href="#venafiissuer-v1alpha1">VenafiIssuer v1alpha1</a></li>
+<li><a href="#venafiissuer-v1alpha2">VenafiIssuer v1alpha2</a></li>
 </ul></aside>
 
 <table>
@@ -2270,7 +2270,7 @@ Appears In:
 <td>CABundle is a PEM encoded TLS certifiate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.</td>
 </tr>
 <tr>
-<td><code>credentialsRef</code><br /> *<a href="#localobjectreference-v1alpha1">LocalObjectReference</a>*</td>
+<td><code>credentialsRef</code><br /> *<a href="#localobjectreference-v1alpha2">LocalObjectReference</a>*</td>
 <td>CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, &#39;username&#39; and &#39;password&#39;.</td>
 </tr>
 <tr>
diff --git a/docs/generated/reference/output/reference/api-docs/navData.js b/docs/generated/reference/output/reference/api-docs/navData.js
index 04e79bc60..03addc20b 100755
--- a/docs/generated/reference/output/reference/api-docs/navData.js
+++ b/docs/generated/reference/output/reference/api-docs/navData.js
@@ -1 +1 @@
-(function(){navData = {"toc":[{"section":"-strong-field-definitions-strong-","subsections":[{"section":"venafitpp-v1alpha1"},{"section":"venafiissuer-v1alpha1"},{"section":"venaficloud-v1alpha1"},{"section":"vaultissuer-v1alpha1"},{"section":"vaultauth-v1alpha1"},{"section":"vaultapprole-v1alpha1"},{"section":"time-v1"},{"section":"selfsignedissuer-v1alpha1"},{"section":"secretkeyselector-v1alpha1"},{"section":"ownerreference-v1"},{"section":"objectreference-v1alpha1"},{"section":"objectmeta-v1"},{"section":"managedfieldsentry-v1"},{"section":"localobjectreference-v1alpha1"},{"section":"issuercondition-v1alpha1"},{"section":"fieldsv1-v1"},{"section":"duration-v1"},{"section":"certificatednsnameselector-v1alpha1"},{"section":"certificatecondition-v1alpha1"},{"section":"caissuer-v1alpha1"},{"section":"acmeissuerdns01providerwebhook-v1alpha1"},{"section":"acmeissuerdns01providerroute53-v1alpha1"},{"section":"acmeissuerdns01providerrfc2136-v1alpha1"},{"section":"acmeissuerdns01providerdigitalocean-v1alpha1"},{"section":"acmeissuerdns01providercloudflare-v1alpha1"},{"section":"acmeissuerdns01providerclouddns-v1alpha1"},{"section":"acmeissuerdns01providerazuredns-v1alpha1"},{"section":"acmeissuerdns01providerakamai-v1alpha1"},{"section":"acmeissuerdns01provideracmedns-v1alpha1"},{"section":"acmeissuer-v1alpha1"},{"section":"acmechallengesolverhttp01ingresspodtemplate-v1alpha1"},{"section":"acmechallengesolverhttp01ingresspodspec-v1alpha1"},{"section":"acmechallengesolverhttp01ingress-v1alpha1"},{"section":"acmechallengesolverhttp01-v1alpha1"},{"section":"acmechallengesolverdns01-v1alpha1"},{"section":"acmechallengesolver-v1alpha1"},{"section":"acmechallenge-v1alpha1"},{"section":"acmeauthorization-v1alpha1"}]},{"section":"-strong-old-api-versions-strong-","subsections":[]},{"section":"challenge-v1alpha1","subsections":[]},{"section":"order-v1alpha1","subsections":[]},{"section":"issuer-v1alpha1","subsections":[]},{"section":"clusterissuer-v1alpha1","subsections":[]},{"section":"certificate-v1alpha1","subsections":[]},{"section":"-strong-cert-manager-strong-","subsections":[]}],"flatToc":["venafitpp-v1alpha1","venafiissuer-v1alpha1","venaficloud-v1alpha1","vaultissuer-v1alpha1","vaultauth-v1alpha1","vaultapprole-v1alpha1","time-v1","selfsignedissuer-v1alpha1","secretkeyselector-v1alpha1","ownerreference-v1","objectreference-v1alpha1","objectmeta-v1","managedfieldsentry-v1","localobjectreference-v1alpha1","issuercondition-v1alpha1","fieldsv1-v1","duration-v1","certificatednsnameselector-v1alpha1","certificatecondition-v1alpha1","caissuer-v1alpha1","acmeissuerdns01providerwebhook-v1alpha1","acmeissuerdns01providerroute53-v1alpha1","acmeissuerdns01providerrfc2136-v1alpha1","acmeissuerdns01providerdigitalocean-v1alpha1","acmeissuerdns01providercloudflare-v1alpha1","acmeissuerdns01providerclouddns-v1alpha1","acmeissuerdns01providerazuredns-v1alpha1","acmeissuerdns01providerakamai-v1alpha1","acmeissuerdns01provideracmedns-v1alpha1","acmeissuer-v1alpha1","acmechallengesolverhttp01ingresspodtemplate-v1alpha1","acmechallengesolverhttp01ingresspodspec-v1alpha1","acmechallengesolverhttp01ingress-v1alpha1","acmechallengesolverhttp01-v1alpha1","acmechallengesolverdns01-v1alpha1","acmechallengesolver-v1alpha1","acmechallenge-v1alpha1","acmeauthorization-v1alpha1","-strong-field-definitions-strong-","-strong-old-api-versions-strong-","challenge-v1alpha1","order-v1alpha1","issuer-v1alpha1","clusterissuer-v1alpha1","certificate-v1alpha1","-strong-cert-manager-strong-"]};})();
\ No newline at end of file
+(function(){navData = {"toc":[{"section":"-strong-field-definitions-strong-","subsections":[{"section":"venafitpp-v1alpha2"},{"section":"venafiissuer-v1alpha2"},{"section":"venaficloud-v1alpha2"},{"section":"vaultissuer-v1alpha2"},{"section":"vaultauth-v1alpha2"},{"section":"vaultapprole-v1alpha2"},{"section":"time-v1"},{"section":"selfsignedissuer-v1alpha2"},{"section":"secretkeyselector-v1alpha2"},{"section":"ownerreference-v1"},{"section":"objectreference-v1alpha2"},{"section":"objectmeta-v1"},{"section":"managedfieldsentry-v1"},{"section":"localobjectreference-v1alpha2"},{"section":"issuercondition-v1alpha2"},{"section":"fieldsv1-v1"},{"section":"duration-v1"},{"section":"certificatednsnameselector-v1alpha2"},{"section":"certificatecondition-v1alpha2"},{"section":"caissuer-v1alpha2"},{"section":"acmeissuerdns01providerwebhook-v1alpha2"},{"section":"acmeissuerdns01providerroute53-v1alpha2"},{"section":"acmeissuerdns01providerrfc2136-v1alpha2"},{"section":"acmeissuerdns01providerdigitalocean-v1alpha2"},{"section":"acmeissuerdns01providercloudflare-v1alpha2"},{"section":"acmeissuerdns01providerclouddns-v1alpha2"},{"section":"acmeissuerdns01providerazuredns-v1alpha2"},{"section":"acmeissuerdns01providerakamai-v1alpha2"},{"section":"acmeissuerdns01provideracmedns-v1alpha2"},{"section":"acmeissuer-v1alpha2"},{"section":"acmechallengesolverhttp01ingresspodtemplate-v1alpha2"},{"section":"acmechallengesolverhttp01ingresspodspec-v1alpha2"},{"section":"acmechallengesolverhttp01ingress-v1alpha2"},{"section":"acmechallengesolverhttp01-v1alpha2"},{"section":"acmechallengesolverdns01-v1alpha2"},{"section":"acmechallengesolver-v1alpha2"},{"section":"acmechallenge-v1alpha2"},{"section":"acmeauthorization-v1alpha2"}]},{"section":"-strong-old-api-versions-strong-","subsections":[]},{"section":"challenge-v1alpha2","subsections":[]},{"section":"order-v1alpha2","subsections":[]},{"section":"issuer-v1alpha2","subsections":[]},{"section":"clusterissuer-v1alpha2","subsections":[]},{"section":"certificate-v1alpha2","subsections":[]},{"section":"-strong-cert-manager-strong-","subsections":[]}],"flatToc":["venafitpp-v1alpha2","venafiissuer-v1alpha2","venaficloud-v1alpha2","vaultissuer-v1alpha2","vaultauth-v1alpha2","vaultapprole-v1alpha2","time-v1","selfsignedissuer-v1alpha2","secretkeyselector-v1alpha2","ownerreference-v1","objectreference-v1alpha2","objectmeta-v1","managedfieldsentry-v1","localobjectreference-v1alpha2","issuercondition-v1alpha2","fieldsv1-v1","duration-v1","certificatednsnameselector-v1alpha2","certificatecondition-v1alpha2","caissuer-v1alpha2","acmeissuerdns01providerwebhook-v1alpha2","acmeissuerdns01providerroute53-v1alpha2","acmeissuerdns01providerrfc2136-v1alpha2","acmeissuerdns01providerdigitalocean-v1alpha2","acmeissuerdns01providercloudflare-v1alpha2","acmeissuerdns01providerclouddns-v1alpha2","acmeissuerdns01providerazuredns-v1alpha2","acmeissuerdns01providerakamai-v1alpha2","acmeissuerdns01provideracmedns-v1alpha2","acmeissuer-v1alpha2","acmechallengesolverhttp01ingresspodtemplate-v1alpha2","acmechallengesolverhttp01ingresspodspec-v1alpha2","acmechallengesolverhttp01ingress-v1alpha2","acmechallengesolverhttp01-v1alpha2","acmechallengesolverdns01-v1alpha2","acmechallengesolver-v1alpha2","acmechallenge-v1alpha2","acmeauthorization-v1alpha2","-strong-field-definitions-strong-","-strong-old-api-versions-strong-","challenge-v1alpha2","order-v1alpha2","issuer-v1alpha2","clusterissuer-v1alpha2","certificate-v1alpha2","-strong-cert-manager-strong-"]};})();
\ No newline at end of file
diff --git a/docs/getting-started/install/kubernetes.rst b/docs/getting-started/install/kubernetes.rst
index 7c2cc0a6e..893fd6b48 100644
--- a/docs/getting-started/install/kubernetes.rst
+++ b/docs/getting-started/install/kubernetes.rst
@@ -178,7 +178,7 @@ to issue basic certificate types:
    metadata:
      name: cert-manager-test
    ---
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: test-selfsigned
@@ -186,7 +186,7 @@ to issue basic certificate types:
    spec:
      selfSigned: {}
    ---
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: selfsigned-cert
diff --git a/docs/reference/certificaterequests.rst b/docs/reference/certificaterequests.rst
index b3c073d66..aaa85cfbb 100644
--- a/docs/reference/certificaterequests.rst
+++ b/docs/reference/certificaterequests.rst
@@ -20,7 +20,7 @@ A simple CertificateRequest looks like the following:
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: CertificateRequest
    metadata:
      name: my-ca-cr
diff --git a/docs/reference/certificates.rst b/docs/reference/certificates.rst
index d4756f50e..0fd3ffb64 100644
--- a/docs/reference/certificates.rst
+++ b/docs/reference/certificates.rst
@@ -12,7 +12,7 @@ A simple Certificate could be defined as:
    :linenos:
    :emphasize-lines: 17-20
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: acme-crt
@@ -97,7 +97,7 @@ expiration.
    :linenos:
    :emphasize-lines: 7,8
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example
@@ -134,7 +134,7 @@ its private key.
    :linenos:
    :emphasize-lines: 7
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-pkcs8-cert
diff --git a/docs/reference/clusterissuers.rst b/docs/reference/clusterissuers.rst
index 2fb20aec1..5d7276dc2 100644
--- a/docs/reference/clusterissuers.rst
+++ b/docs/reference/clusterissuers.rst
@@ -19,7 +19,7 @@ an Issuer to ``ClusterIssuer``, and removing the ``metadata.namespace`` attribut
 .. code-block:: yaml
    :emphasize-lines: 2
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-prod
@@ -32,7 +32,7 @@ the ``spec.issuerRef.kind`` field to ClusterIssuer:
 .. code-block:: yaml
    :emphasize-lines: 10
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: my-certificate
diff --git a/docs/reference/issuers.rst b/docs/reference/issuers.rst
index bf7e2f03e..d2f0de72b 100644
--- a/docs/reference/issuers.rst
+++ b/docs/reference/issuers.rst
@@ -13,7 +13,7 @@ An example of an Issuer type is ACME. A simple ACME issuer could be defined as:
    :linenos:
    :emphasize-lines: 11, 16
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: letsencrypt-prod
@@ -72,7 +72,7 @@ those credentials to perform the ACME DNS01 challenge with route53.
    :linenos:
    :emphasize-lines: 14-15
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-prod
diff --git a/docs/tasks/issuers/setup-acme/dns01/acme-dns.rst b/docs/tasks/issuers/setup-acme/dns01/acme-dns.rst
index c8083149a..c377bd463 100644
--- a/docs/tasks/issuers/setup-acme/dns01/acme-dns.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/acme-dns.rst
@@ -5,7 +5,7 @@ ACME-DNS
 .. code-block:: yaml
    :emphasize-lines: 10-14
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/akamai.rst b/docs/tasks/issuers/setup-acme/dns01/akamai.rst
index 2517ea60b..64e3b88af 100644
--- a/docs/tasks/issuers/setup-acme/dns01/akamai.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/akamai.rst
@@ -5,7 +5,7 @@ Akamai FastDNS
 .. code-block:: yaml
    :emphasize-lines: 10-20
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/azuredns.rst b/docs/tasks/issuers/setup-acme/dns01/azuredns.rst
index 31140f422..6e65474db 100644
--- a/docs/tasks/issuers/setup-acme/dns01/azuredns.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/azuredns.rst
@@ -42,7 +42,7 @@ You can configure the issuer like so:
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/cloudflare.rst b/docs/tasks/issuers/setup-acme/dns01/cloudflare.rst
index 149945089..8d651d2ea 100644
--- a/docs/tasks/issuers/setup-acme/dns01/cloudflare.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/cloudflare.rst
@@ -5,7 +5,7 @@ Cloudflare
 .. code-block:: yaml
    :emphasize-lines: 10-14
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/digitalocean.rst b/docs/tasks/issuers/setup-acme/dns01/digitalocean.rst
index 27e495ff6..0ec0784bc 100644
--- a/docs/tasks/issuers/setup-acme/dns01/digitalocean.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/digitalocean.rst
@@ -13,7 +13,7 @@ Handy direct link: https://cloud.digitalocean.com/account/api/tokens/new
 .. code-block:: yaml
    :emphasize-lines: 10-13
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/google.rst b/docs/tasks/issuers/setup-acme/dns01/google.rst
index 9b2a36291..9d5490be2 100644
--- a/docs/tasks/issuers/setup-acme/dns01/google.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/google.rst
@@ -58,7 +58,7 @@ Next, create an Issuer (or ClusterIssuer) with a ``clouddns`` provider. An examp
    :linenos:
    :emphasize-lines: 10-16
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
@@ -83,7 +83,7 @@ Once an Issuer (or ClusterIssuer) has been created successfully a Certificate ca
    :linenos:
    :emphasize-lines: 9-10
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com
diff --git a/docs/tasks/issuers/setup-acme/dns01/index.rst b/docs/tasks/issuers/setup-acme/dns01/index.rst
index a4c91049a..5c4cc1b8e 100644
--- a/docs/tasks/issuers/setup-acme/dns01/index.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/index.rst
@@ -21,7 +21,7 @@ You can read about how the DNS01 challenge type works on the
    :linenos:
    :emphasize-lines: 12-17
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
@@ -81,7 +81,7 @@ relevant `dns01` solver:
    :linenos:
    :emphasize-lines: 11
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      ...
diff --git a/docs/tasks/issuers/setup-acme/dns01/rfc2136.rst b/docs/tasks/issuers/setup-acme/dns01/rfc2136.rst
index d936f2f18..9f96857fe 100644
--- a/docs/tasks/issuers/setup-acme/dns01/rfc2136.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/rfc2136.rst
@@ -118,7 +118,7 @@ sufficiently, let’s focus on the provider here.
 .. code:: yaml
    :emphasize-lines: 10-16
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: example-issuer
diff --git a/docs/tasks/issuers/setup-acme/dns01/route53.rst b/docs/tasks/issuers/setup-acme/dns01/route53.rst
index cc80b4d3f..06767f2af 100644
--- a/docs/tasks/issuers/setup-acme/dns01/route53.rst
+++ b/docs/tasks/issuers/setup-acme/dns01/route53.rst
@@ -87,7 +87,7 @@ Here is an example configuration for a ClusterIssuer:
 
 .. code:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-prod
diff --git a/docs/tasks/issuers/setup-acme/http01/index.rst b/docs/tasks/issuers/setup-acme/http01/index.rst
index 34a22df9f..00879e7f9 100644
--- a/docs/tasks/issuers/setup-acme/http01/index.rst
+++ b/docs/tasks/issuers/setup-acme/http01/index.rst
@@ -23,7 +23,7 @@ The HTTP01 Issuer supports a number of additional options.
 For full details on the range of options available, read the
 `reference documentation`_.
 
-.. _`reference documentation`: https://docs.cert-manager.io/en/latest/reference/api-docs/index.html#acmeissuerhttp01config-v1alpha1
+.. _`reference documentation`: https://docs.cert-manager.io/en/latest/reference/api-docs/index.html#acmeissuerhttp01config-v1alpha2
 
 ingressClass
 ------------
@@ -84,7 +84,7 @@ An example of how you could configure the template is as so:
    :linenos:
    :emphasize-lines: 13-20
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: ...
diff --git a/docs/tasks/issuers/setup-acme/index.rst b/docs/tasks/issuers/setup-acme/index.rst
index b32f7d636..dc3cfc060 100644
--- a/docs/tasks/issuers/setup-acme/index.rst
+++ b/docs/tasks/issuers/setup-acme/index.rst
@@ -30,7 +30,7 @@ own email address.
    :linenos:
    :emphasize-lines: 7-10, 13-14, 19
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-staging
@@ -101,7 +101,7 @@ along with a DNS01 solver that can be used for wildcard certificates:
    :linenos:
    :emphasize-lines: 14-15
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-staging
@@ -140,7 +140,7 @@ For example:
    :linenos:
    :emphasize-lines: 14-15
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-staging
diff --git a/docs/tasks/issuers/setup-ca.rst b/docs/tasks/issuers/setup-ca.rst
index 1526a4a7b..03cc3e82e 100644
--- a/docs/tasks/issuers/setup-ca.rst
+++ b/docs/tasks/issuers/setup-ca.rst
@@ -66,7 +66,7 @@ We can now create an Issuer referencing the Secret resource we just created:
    :linenos:
    :emphasize-lines: 8
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: ca-issuer
@@ -88,7 +88,7 @@ desired certificate. You can read more about the Certificate resource in
    :linenos:
    :emphasize-lines: 9, 10, 11, 12
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com
diff --git a/docs/tasks/issuers/setup-selfsigned.rst b/docs/tasks/issuers/setup-selfsigned.rst
index 8c9400dcb..704bb4bbb 100644
--- a/docs/tasks/issuers/setup-selfsigned.rst
+++ b/docs/tasks/issuers/setup-selfsigned.rst
@@ -15,7 +15,7 @@ created with a resource like so:
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: selfsigning-issuer
@@ -31,7 +31,7 @@ referencing the newly created Issuer in your ``issuerRef``:
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-crt
diff --git a/docs/tasks/issuers/setup-vault.rst b/docs/tasks/issuers/setup-vault.rst
index f716fd9ed..392f5d18f 100644
--- a/docs/tasks/issuers/setup-vault.rst
+++ b/docs/tasks/issuers/setup-vault.rst
@@ -46,7 +46,7 @@ We can now create a cluster issuer referencing this secret:
 
 .. code-block:: yaml
 
-    apiVersion: certmanager.k8s.io/v1alpha1
+    apiVersion: certmanager.k8s.io/v1alpha2
     kind: Issuer
     metadata:
       name: vault-issuer
@@ -83,7 +83,7 @@ Once we have created the above Issuer we can use it to obtain a certificate.
 
 .. code-block:: yaml
 
-    apiVersion: certmanager.k8s.io/v1alpha1
+    apiVersion: certmanager.k8s.io/v1alpha2
     kind: Certificate
     metadata:
       name: example-com
@@ -147,7 +147,7 @@ We can now create an issuer referencing this secret:
 
 .. code-block:: yaml
 
-    apiVersion: certmanager.k8s.io/v1alpha1
+    apiVersion: certmanager.k8s.io/v1alpha2
     kind: Issuer
     metadata:
       name: vault-issuer
@@ -176,7 +176,7 @@ Once we have created the above Issuer we can use it to obtain a certificate.
 
 .. code-block:: yaml
 
-    apiVersion: certmanager.k8s.io/v1alpha1
+    apiVersion: certmanager.k8s.io/v1alpha2
     kind: Certificate
     metadata:
       name: example-com
diff --git a/docs/tasks/issuers/setup-venafi.rst b/docs/tasks/issuers/setup-venafi.rst
index db57f08b0..715ba3237 100644
--- a/docs/tasks/issuers/setup-venafi.rst
+++ b/docs/tasks/issuers/setup-venafi.rst
@@ -65,7 +65,7 @@ Save the below content after making your amendments to a file named
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: cloud-venafi-issuer
@@ -142,7 +142,7 @@ Save the below content after making your amendments to a file named
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: tpp-venafi-issuer
diff --git a/docs/tasks/issuing-certificates/index.rst b/docs/tasks/issuing-certificates/index.rst
index ac9d27fd2..d36265767 100644
--- a/docs/tasks/issuing-certificates/index.rst
+++ b/docs/tasks/issuing-certificates/index.rst
@@ -28,7 +28,7 @@ DNS names that is valid for 90d and renews 15d before expiry is below:
    :linenos:
    :emphasize-lines: 9, 10, 11, 12
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com
@@ -82,7 +82,7 @@ A full list of the fields supported on the Certificate resource can be found in
 the `API reference documentation`_.
 
 .. _`#1269`: https://github.com/jetstack/cert-manager/issues/1269
-.. _`API reference documentation`: https://docs.cert-manager.io/en/release-0.10/reference/api-docs/index.html#certificatespec-v1alpha1
+.. _`API reference documentation`: https://docs.cert-manager.io/en/release-0.10/reference/api-docs/index.html#certificatespec-v1alpha2
 
 Temporary certificates whilst issuing
 =====================================
diff --git a/docs/tasks/upgrading/upgrading-0.2-0.3.rst b/docs/tasks/upgrading/upgrading-0.2-0.3.rst
index 01f5b5bba..0cc32c174 100644
--- a/docs/tasks/upgrading/upgrading-0.2-0.3.rst
+++ b/docs/tasks/upgrading/upgrading-0.2-0.3.rst
@@ -84,7 +84,7 @@ server URL:
 
 .. code-block:: yaml
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    ...
    spec:
diff --git a/docs/tasks/upgrading/upgrading-0.7-0.8.rst b/docs/tasks/upgrading/upgrading-0.7-0.8.rst
index 95153efe5..11f610db9 100644
--- a/docs/tasks/upgrading/upgrading-0.7-0.8.rst
+++ b/docs/tasks/upgrading/upgrading-0.7-0.8.rst
@@ -46,7 +46,7 @@ explicitly set a ``certificate.spec.acme`` field:
    :linenos:
    :emphasize-lines: 12-17, 28-52
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-staging
@@ -195,7 +195,7 @@ the following:
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-staging
diff --git a/docs/tutorials/acme/dns-validation.rst b/docs/tutorials/acme/dns-validation.rst
index 23ff6863c..b41ccb928 100644
--- a/docs/tutorials/acme/dns-validation.rst
+++ b/docs/tutorials/acme/dns-validation.rst
@@ -21,7 +21,7 @@ You can read more about the Issuer resource in the :doc:`Issuer reference docs <
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: letsencrypt-staging
@@ -86,7 +86,7 @@ Once we have created the above Issuer we can use it to obtain a certificate.
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com
diff --git a/docs/tutorials/acme/http-validation.rst b/docs/tutorials/acme/http-validation.rst
index 4ce738f44..ae526e19f 100644
--- a/docs/tutorials/acme/http-validation.rst
+++ b/docs/tutorials/acme/http-validation.rst
@@ -18,7 +18,7 @@ You can read more about the Issuer resource in the :doc:`Issuer reference docs <
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: letsencrypt-staging
@@ -60,7 +60,7 @@ Once we have created the above Issuer we can use it to obtain a certificate.
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com
diff --git a/docs/tutorials/acme/migrating-from-kube-lego.rst b/docs/tutorials/acme/migrating-from-kube-lego.rst
index 44d785675..45ae5eb5b 100644
--- a/docs/tutorials/acme/migrating-from-kube-lego.rst
+++ b/docs/tutorials/acme/migrating-from-kube-lego.rst
@@ -146,7 +146,7 @@ Create a file named ``cluster-issuer.yaml``:
    :linenos:
    :emphasize-lines: 11
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      # Adjust the name here accordingly
diff --git a/docs/tutorials/acme/quick-start/example/production-issuer.yaml b/docs/tutorials/acme/quick-start/example/production-issuer.yaml
index 8ac1b8481..7bd9edc86 100644
--- a/docs/tutorials/acme/quick-start/example/production-issuer.yaml
+++ b/docs/tutorials/acme/quick-start/example/production-issuer.yaml
@@ -1,4 +1,4 @@
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: letsencrypt-prod
diff --git a/docs/tutorials/acme/quick-start/example/staging-issuer.yaml b/docs/tutorials/acme/quick-start/example/staging-issuer.yaml
index ca378e5d4..ca24475ca 100644
--- a/docs/tutorials/acme/quick-start/example/staging-issuer.yaml
+++ b/docs/tutorials/acme/quick-start/example/staging-issuer.yaml
@@ -1,4 +1,4 @@
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: letsencrypt-staging
diff --git a/docs/tutorials/acme/quick-start/index.rst b/docs/tutorials/acme/quick-start/index.rst
index 020ca858b..cdfe9ef68 100644
--- a/docs/tutorials/acme/quick-start/index.rst
+++ b/docs/tutorials/acme/quick-start/index.rst
@@ -441,15 +441,15 @@ Check on the status of the issuer after you create it:
     Name:         letsencrypt-staging
     Namespace:    default
     Labels:       <none>
-    Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"certmanager.k8s.io/v1alpha1","kind":"Issuer","metadata":{"annotations":{},"name":"letsencrypt-staging","namespace":"default"},"spec":{"a...
-    API Version:  certmanager.k8s.io/v1alpha1
+    Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"certmanager.k8s.io/v1alpha2","kind":"Issuer","metadata":{"annotations":{},"name":"letsencrypt-staging","namespace":"default"},"spec":{"a...
+    API Version:  certmanager.k8s.io/v1alpha2
     Kind:         Issuer
     Metadata:
       Cluster Name:
       Creation Timestamp:  2018-11-17T18:03:54Z
       Generation:          0
       Resource Version:    9092
-      Self Link:           /apis/certmanager.k8s.io/v1alpha1/namespaces/default/issuers/letsencrypt-staging
+      Self Link:           /apis/certmanager.k8s.io/v1alpha2/namespaces/default/issuers/letsencrypt-staging
       UID:                 25b7ae77-ea93-11e8-82f8-42010a8a00b5
     Spec:
       Acme:
@@ -537,7 +537,7 @@ certificate object. You can view this information using the
     Namespace:    default
     Labels:       <none>
     Annotations:  <none>
-    API Version:  certmanager.k8s.io/v1alpha1
+    API Version:  certmanager.k8s.io/v1alpha2
     Kind:         Certificate
     Metadata:
       Cluster Name:
@@ -551,7 +551,7 @@ certificate object. You can view this information using the
         Name:                  kuard
         UID:                   a3e9f935-ea87-11e8-82f8-42010a8a00b5
       Resource Version:        9295
-      Self Link:               /apis/certmanager.k8s.io/v1alpha1/namespaces/default/certificates/quickstart-example-tls
+      Self Link:               /apis/certmanager.k8s.io/v1alpha2/namespaces/default/certificates/quickstart-example-tls
       UID:                     68d43400-ea92-11e8-82f8-42010a8a00b5
     Spec:
       Dns Names:
@@ -646,7 +646,7 @@ certificate.
     Namespace:    default
     Labels:       <none>
     Annotations:  <none>
-    API Version:  certmanager.k8s.io/v1alpha1
+    API Version:  certmanager.k8s.io/v1alpha2
     Kind:         Certificate
     Metadata:
       Cluster Name:
@@ -660,7 +660,7 @@ certificate.
         Name:                  kuard
         UID:                   a3e9f935-ea87-11e8-82f8-42010a8a00b5
       Resource Version:        283686
-      Self Link:               /apis/certmanager.k8s.io/v1alpha1/namespaces/default/certificates/quickstart-example-tls
+      Self Link:               /apis/certmanager.k8s.io/v1alpha2/namespaces/default/certificates/quickstart-example-tls
       UID:                     bdd93b32-ea97-11e8-82f8-42010a8a00b5
     Spec:
       Dns Names:
diff --git a/docs/tutorials/venafi/securing-ingress.rst b/docs/tutorials/venafi/securing-ingress.rst
index af82c68b5..2df4f5831 100644
--- a/docs/tutorials/venafi/securing-ingress.rst
+++ b/docs/tutorials/venafi/securing-ingress.rst
@@ -282,7 +282,7 @@ Save the following YAML into a file named ``venafi-issuer.yaml``:
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: venafi-issuer
@@ -349,7 +349,7 @@ Save the following YAML into a file named ``venafi-issuer.yaml``:
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Issuer
    metadata:
      name: venafi-issuer
@@ -409,7 +409,7 @@ For now, we will create a basic x509 Certificate that is valid for our domain,
 .. code-block:: yaml
    :linenos:
 
-   apiVersion: certmanager.k8s.io/v1alpha1
+   apiVersion: certmanager.k8s.io/v1alpha2
    kind: Certificate
    metadata:
      name: example-com-tls
diff --git a/hack/update-codegen.sh b/hack/update-codegen.sh
index d5d047e9c..962436749 100755
--- a/hack/update-codegen.sh
+++ b/hack/update-codegen.sh
@@ -35,7 +35,7 @@ generate-groups.sh "deepcopy" \
 generate-groups.sh "deepcopy,client,informer,lister" \
   github.com/jetstack/cert-manager/pkg/client \
   github.com/jetstack/cert-manager/pkg/apis \
-  certmanager:v1alpha1 \
+  certmanager:v1alpha2 \
   --output-base "${GOPATH}/src/" \
   --go-header-file "${runfiles}/hack/boilerplate/boilerplate.go.txt"
 
@@ -43,7 +43,7 @@ generate-groups-internal.sh "deepcopy,defaulter,conversion" \
   github.com/jetstack/cert-manager/pkg/client \
   github.com/jetstack/cert-manager/pkg/internal/apis \
   github.com/jetstack/cert-manager/pkg/internal/apis \
-  certmanager:v1alpha1 \
+  certmanager:v1alpha2 \
   --output-base "${GOPATH}/src/" \
   --go-header-file "${runfiles}/hack/boilerplate/boilerplate.go.txt"
 
diff --git a/pkg/acme/BUILD.bazel b/pkg/acme/BUILD.bazel
index be2ff6675..18a7e36ab 100644
--- a/pkg/acme/BUILD.bazel
+++ b/pkg/acme/BUILD.bazel
@@ -12,7 +12,7 @@ go_library(
     deps = [
         "//pkg/acme/client:go_default_library",
         "//pkg/acme/client/middleware:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//pkg/util/errors:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/pkg/acme/cache.go b/pkg/acme/cache.go
index f406dc33a..5ab6c00d6 100644
--- a/pkg/acme/cache.go
+++ b/pkg/acme/cache.go
@@ -28,7 +28,7 @@ import (
 
 	acme "github.com/jetstack/cert-manager/pkg/acme/client"
 	acmemw "github.com/jetstack/cert-manager/pkg/acme/client/middleware"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 	acmecl "github.com/jetstack/cert-manager/third_party/crypto/acme"
 )
diff --git a/pkg/acme/fake/BUILD.bazel b/pkg/acme/fake/BUILD.bazel
index 2a479e45f..0565f51e2 100644
--- a/pkg/acme/fake/BUILD.bazel
+++ b/pkg/acme/fake/BUILD.bazel
@@ -8,7 +8,7 @@ go_library(
     deps = [
         "//pkg/acme:go_default_library",
         "//pkg/acme/client:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
     ],
 )
 
diff --git a/pkg/acme/fake/fake.go b/pkg/acme/fake/fake.go
index bcc839be6..26076c108 100644
--- a/pkg/acme/fake/fake.go
+++ b/pkg/acme/fake/fake.go
@@ -21,7 +21,7 @@ import (
 
 	acmepkg "github.com/jetstack/cert-manager/pkg/acme"
 	acme "github.com/jetstack/cert-manager/pkg/acme/client"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // Helper implements a simple fake structure that implements the Helper
diff --git a/pkg/acme/helper.go b/pkg/acme/helper.go
index 519516f31..cdc3ab449 100644
--- a/pkg/acme/helper.go
+++ b/pkg/acme/helper.go
@@ -22,7 +22,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	acme "github.com/jetstack/cert-manager/pkg/acme/client"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmerrors "github.com/jetstack/cert-manager/pkg/util/errors"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 )
diff --git a/pkg/acme/util.go b/pkg/acme/util.go
index 290f70576..730b9e2a0 100644
--- a/pkg/acme/util.go
+++ b/pkg/acme/util.go
@@ -19,7 +19,7 @@ package acme
 import (
 	corev1 "k8s.io/api/core/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // IsFinalState will return true if the given ACME State is a 'final' state.
diff --git a/pkg/api/BUILD.bazel b/pkg/api/BUILD.bazel
index 3ccc756ea..2417ca464 100644
--- a/pkg/api/BUILD.bazel
+++ b/pkg/api/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/acme/webhook/apis/acme/v1alpha1:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
diff --git a/pkg/api/scheme.go b/pkg/api/scheme.go
index ee67beb17..7e9163b20 100644
--- a/pkg/api/scheme.go
+++ b/pkg/api/scheme.go
@@ -27,7 +27,7 @@ import (
 	apireg "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1beta1"
 
 	whapi "github.com/jetstack/cert-manager/pkg/acme/webhook/apis/acme/v1alpha1"
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // This package defines a Scheme and Codec that has the *external* API types
@@ -43,7 +43,7 @@ var Scheme = runtime.NewScheme()
 var Codecs = serializer.NewCodecFactory(Scheme)
 var ParameterCodec = runtime.NewParameterCodec(Scheme)
 var localSchemeBuilder = runtime.SchemeBuilder{
-	certmanagerv1alpha1.AddToScheme,
+	cmapi.AddToScheme,
 	whapi.AddToScheme,
 	kscheme.AddToScheme,
 	apireg.AddToScheme,
diff --git a/pkg/api/util/BUILD.bazel b/pkg/api/util/BUILD.bazel
index e91b9e1ba..22f84cdd3 100644
--- a/pkg/api/util/BUILD.bazel
+++ b/pkg/api/util/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/api/util",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/klog:go_default_library",
         "//vendor/k8s.io/utils/clock:go_default_library",
diff --git a/pkg/api/util/conditions.go b/pkg/api/util/conditions.go
index c8c9734c3..1babdd284 100644
--- a/pkg/api/util/conditions.go
+++ b/pkg/api/util/conditions.go
@@ -21,7 +21,7 @@ import (
 	"k8s.io/klog"
 	"k8s.io/utils/clock"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // Clock is defined as a package var so it can be stubbed out during tests.
diff --git a/pkg/api/util/duration.go b/pkg/api/util/duration.go
index 35810e48e..5c5e45d15 100644
--- a/pkg/api/util/duration.go
+++ b/pkg/api/util/duration.go
@@ -21,11 +21,11 @@ import (
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func DefaultCertDuration(d *metav1.Duration) time.Duration {
-	certDuration := v1alpha1.DefaultCertificateDuration
+	certDuration := v1alpha2.DefaultCertificateDuration
 	if d != nil {
 		certDuration = d.Duration
 	}
diff --git a/pkg/api/util/issuers.go b/pkg/api/util/issuers.go
index b82beda5d..fd04aef75 100644
--- a/pkg/api/util/issuers.go
+++ b/pkg/api/util/issuers.go
@@ -19,7 +19,7 @@ package util
 import (
 	"fmt"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 const (
diff --git a/pkg/api/util/usages.go b/pkg/api/util/usages.go
index 39158970c..016b9ab90 100644
--- a/pkg/api/util/usages.go
+++ b/pkg/api/util/usages.go
@@ -19,7 +19,7 @@ package util
 import (
 	"crypto/x509"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 var keyUsages = map[cmapi.KeyUsage]x509.KeyUsage{
diff --git a/pkg/apis/certmanager/BUILD.bazel b/pkg/apis/certmanager/BUILD.bazel
index c861db32f..a801c7862 100644
--- a/pkg/apis/certmanager/BUILD.bazel
+++ b/pkg/apis/certmanager/BUILD.bazel
@@ -18,7 +18,7 @@ filegroup(
     name = "all-srcs",
     srcs = [
         ":package-srcs",
-        "//pkg/apis/certmanager/v1alpha1:all-srcs",
+        "//pkg/apis/certmanager/v1alpha2:all-srcs",
     ],
     tags = ["automanaged"],
     visibility = ["//visibility:public"],
diff --git a/pkg/apis/certmanager/v1alpha2/BUILD.bazel b/pkg/apis/certmanager/v1alpha2/BUILD.bazel
index 3fca26c21..d491e4296 100644
--- a/pkg/apis/certmanager/v1alpha2/BUILD.bazel
+++ b/pkg/apis/certmanager/v1alpha2/BUILD.bazel
@@ -15,7 +15,7 @@ go_library(
         "types_order.go",
         "zz_generated.deepcopy.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1",
+    importpath = "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2",
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/apis/certmanager:go_default_library",
diff --git a/pkg/apis/certmanager/v1alpha2/const.go b/pkg/apis/certmanager/v1alpha2/const.go
index c2ebc29c3..86c9d63d3 100644
--- a/pkg/apis/certmanager/v1alpha2/const.go
+++ b/pkg/apis/certmanager/v1alpha2/const.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import "time"
 
diff --git a/pkg/apis/certmanager/v1alpha2/doc.go b/pkg/apis/certmanager/v1alpha2/doc.go
index 8d187e6be..0864c304f 100644
--- a/pkg/apis/certmanager/v1alpha2/doc.go
+++ b/pkg/apis/certmanager/v1alpha2/doc.go
@@ -19,6 +19,6 @@ limitations under the License.
 // +k8s:openapi-gen=true
 // +k8s:defaulter-gen=TypeMeta
 
-// Package v1alpha1 is the v1alpha1 version of the API.
+// Package v1alpha2 is the v1alpha2 version of the API.
 // +groupName=certmanager.k8s.io
-package v1alpha1
+package v1alpha2
diff --git a/pkg/apis/certmanager/v1alpha2/generic_issuer.go b/pkg/apis/certmanager/v1alpha2/generic_issuer.go
index 042c04734..ecf20adc1 100644
--- a/pkg/apis/certmanager/v1alpha2/generic_issuer.go
+++ b/pkg/apis/certmanager/v1alpha2/generic_issuer.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
diff --git a/pkg/apis/certmanager/v1alpha2/register.go b/pkg/apis/certmanager/v1alpha2/register.go
index e778cb6c3..3f9afa859 100644
--- a/pkg/apis/certmanager/v1alpha2/register.go
+++ b/pkg/apis/certmanager/v1alpha2/register.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -25,7 +25,7 @@ import (
 )
 
 // SchemeGroupVersion is group version used to register these objects
-var SchemeGroupVersion = schema.GroupVersion{Group: certmanager.GroupName, Version: "v1alpha1"}
+var SchemeGroupVersion = schema.GroupVersion{Group: certmanager.GroupName, Version: "v1alpha2"}
 
 // Resource takes an unqualified resource and returns a Group qualified GroupResource
 func Resource(resource string) schema.GroupResource {
diff --git a/pkg/apis/certmanager/v1alpha2/types.go b/pkg/apis/certmanager/v1alpha2/types.go
index f13775007..3b5186878 100644
--- a/pkg/apis/certmanager/v1alpha2/types.go
+++ b/pkg/apis/certmanager/v1alpha2/types.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 // Annotation names for Secrets
 const (
diff --git a/pkg/apis/certmanager/v1alpha2/types_certificate.go b/pkg/apis/certmanager/v1alpha2/types_certificate.go
index 4c91616b3..2dd28650f 100644
--- a/pkg/apis/certmanager/v1alpha2/types_certificate.go
+++ b/pkg/apis/certmanager/v1alpha2/types_certificate.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
diff --git a/pkg/apis/certmanager/v1alpha2/types_certificaterequest.go b/pkg/apis/certmanager/v1alpha2/types_certificaterequest.go
index a3147eba1..42526e22e 100644
--- a/pkg/apis/certmanager/v1alpha2/types_certificaterequest.go
+++ b/pkg/apis/certmanager/v1alpha2/types_certificaterequest.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
diff --git a/pkg/apis/certmanager/v1alpha2/types_challenge.go b/pkg/apis/certmanager/v1alpha2/types_challenge.go
index 960c6fc19..d89f1f787 100644
--- a/pkg/apis/certmanager/v1alpha2/types_challenge.go
+++ b/pkg/apis/certmanager/v1alpha2/types_challenge.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
diff --git a/pkg/apis/certmanager/v1alpha2/types_issuer.go b/pkg/apis/certmanager/v1alpha2/types_issuer.go
index 13338bdb9..9ed5cee85 100644
--- a/pkg/apis/certmanager/v1alpha2/types_issuer.go
+++ b/pkg/apis/certmanager/v1alpha2/types_issuer.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	corev1 "k8s.io/api/core/v1"
diff --git a/pkg/apis/certmanager/v1alpha2/types_order.go b/pkg/apis/certmanager/v1alpha2/types_order.go
index 4f42069c8..249cf6587 100644
--- a/pkg/apis/certmanager/v1alpha2/types_order.go
+++ b/pkg/apis/certmanager/v1alpha2/types_order.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
diff --git a/pkg/apis/certmanager/v1alpha2/zz_generated.deepcopy.go b/pkg/apis/certmanager/v1alpha2/zz_generated.deepcopy.go
index 61bf82bd4..c7d3a3248 100644
--- a/pkg/apis/certmanager/v1alpha2/zz_generated.deepcopy.go
+++ b/pkg/apis/certmanager/v1alpha2/zz_generated.deepcopy.go
@@ -18,7 +18,7 @@ limitations under the License.
 
 // Code generated by deepcopy-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	v1 "k8s.io/api/core/v1"
diff --git a/pkg/client/clientset/versioned/BUILD.bazel b/pkg/client/clientset/versioned/BUILD.bazel
index 515c6a217..4d238bc98 100644
--- a/pkg/client/clientset/versioned/BUILD.bazel
+++ b/pkg/client/clientset/versioned/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/client-go/discovery:go_default_library",
         "//vendor/k8s.io/client-go/rest:go_default_library",
         "//vendor/k8s.io/client-go/util/flowcontrol:go_default_library",
@@ -29,7 +29,7 @@ filegroup(
         ":package-srcs",
         "//pkg/client/clientset/versioned/fake:all-srcs",
         "//pkg/client/clientset/versioned/scheme:all-srcs",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:all-srcs",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:all-srcs",
     ],
     tags = ["automanaged"],
     visibility = ["//visibility:public"],
diff --git a/pkg/client/clientset/versioned/clientset.go b/pkg/client/clientset/versioned/clientset.go
index 4923f944b..780e6f934 100644
--- a/pkg/client/clientset/versioned/clientset.go
+++ b/pkg/client/clientset/versioned/clientset.go
@@ -21,7 +21,7 @@ package versioned
 import (
 	"fmt"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2"
 	discovery "k8s.io/client-go/discovery"
 	rest "k8s.io/client-go/rest"
 	flowcontrol "k8s.io/client-go/util/flowcontrol"
@@ -29,19 +29,19 @@ import (
 
 type Interface interface {
 	Discovery() discovery.DiscoveryInterface
-	CertmanagerV1alpha1() certmanagerv1alpha1.CertmanagerV1alpha1Interface
+	CertmanagerV1alpha2() certmanagerv1alpha2.CertmanagerV1alpha2Interface
 }
 
 // Clientset contains the clients for groups. Each group has exactly one
 // version included in a Clientset.
 type Clientset struct {
 	*discovery.DiscoveryClient
-	certmanagerV1alpha1 *certmanagerv1alpha1.CertmanagerV1alpha1Client
+	certmanagerV1alpha2 *certmanagerv1alpha2.CertmanagerV1alpha2Client
 }
 
-// CertmanagerV1alpha1 retrieves the CertmanagerV1alpha1Client
-func (c *Clientset) CertmanagerV1alpha1() certmanagerv1alpha1.CertmanagerV1alpha1Interface {
-	return c.certmanagerV1alpha1
+// CertmanagerV1alpha2 retrieves the CertmanagerV1alpha2Client
+func (c *Clientset) CertmanagerV1alpha2() certmanagerv1alpha2.CertmanagerV1alpha2Interface {
+	return c.certmanagerV1alpha2
 }
 
 // Discovery retrieves the DiscoveryClient
@@ -65,7 +65,7 @@ func NewForConfig(c *rest.Config) (*Clientset, error) {
 	}
 	var cs Clientset
 	var err error
-	cs.certmanagerV1alpha1, err = certmanagerv1alpha1.NewForConfig(&configShallowCopy)
+	cs.certmanagerV1alpha2, err = certmanagerv1alpha2.NewForConfig(&configShallowCopy)
 	if err != nil {
 		return nil, err
 	}
@@ -81,7 +81,7 @@ func NewForConfig(c *rest.Config) (*Clientset, error) {
 // panics if there is an error in the config.
 func NewForConfigOrDie(c *rest.Config) *Clientset {
 	var cs Clientset
-	cs.certmanagerV1alpha1 = certmanagerv1alpha1.NewForConfigOrDie(c)
+	cs.certmanagerV1alpha2 = certmanagerv1alpha2.NewForConfigOrDie(c)
 
 	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
 	return &cs
@@ -90,7 +90,7 @@ func NewForConfigOrDie(c *rest.Config) *Clientset {
 // New creates a new Clientset for the given RESTClient.
 func New(c rest.Interface) *Clientset {
 	var cs Clientset
-	cs.certmanagerV1alpha1 = certmanagerv1alpha1.New(c)
+	cs.certmanagerV1alpha2 = certmanagerv1alpha2.New(c)
 
 	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
 	return &cs
diff --git a/pkg/client/clientset/versioned/fake/BUILD.bazel b/pkg/client/clientset/versioned/fake/BUILD.bazel
index 5c58b34c0..fd94d69d0 100644
--- a/pkg/client/clientset/versioned/fake/BUILD.bazel
+++ b/pkg/client/clientset/versioned/fake/BUILD.bazel
@@ -10,10 +10,10 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/fake",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime/schema:go_default_library",
diff --git a/pkg/client/clientset/versioned/fake/clientset_generated.go b/pkg/client/clientset/versioned/fake/clientset_generated.go
index 887305bb9..438e9f89c 100644
--- a/pkg/client/clientset/versioned/fake/clientset_generated.go
+++ b/pkg/client/clientset/versioned/fake/clientset_generated.go
@@ -20,8 +20,8 @@ package fake
 
 import (
 	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
-	fakecertmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2"
+	fakecertmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/watch"
 	"k8s.io/client-go/discovery"
@@ -76,7 +76,7 @@ func (c *Clientset) Tracker() testing.ObjectTracker {
 
 var _ clientset.Interface = &Clientset{}
 
-// CertmanagerV1alpha1 retrieves the CertmanagerV1alpha1Client
-func (c *Clientset) CertmanagerV1alpha1() certmanagerv1alpha1.CertmanagerV1alpha1Interface {
-	return &fakecertmanagerv1alpha1.FakeCertmanagerV1alpha1{Fake: &c.Fake}
+// CertmanagerV1alpha2 retrieves the CertmanagerV1alpha2Client
+func (c *Clientset) CertmanagerV1alpha2() certmanagerv1alpha2.CertmanagerV1alpha2Interface {
+	return &fakecertmanagerv1alpha2.FakeCertmanagerV1alpha2{Fake: &c.Fake}
 }
diff --git a/pkg/client/clientset/versioned/fake/register.go b/pkg/client/clientset/versioned/fake/register.go
index 05141e02e..42651f392 100644
--- a/pkg/client/clientset/versioned/fake/register.go
+++ b/pkg/client/clientset/versioned/fake/register.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -31,7 +31,7 @@ var scheme = runtime.NewScheme()
 var codecs = serializer.NewCodecFactory(scheme)
 var parameterCodec = runtime.NewParameterCodec(scheme)
 var localSchemeBuilder = runtime.SchemeBuilder{
-	certmanagerv1alpha1.AddToScheme,
+	certmanagerv1alpha2.AddToScheme,
 }
 
 // AddToScheme adds all types of this clientset into the given scheme. This allows composition
diff --git a/pkg/client/clientset/versioned/scheme/BUILD.bazel b/pkg/client/clientset/versioned/scheme/BUILD.bazel
index ca8a46de9..143a60fc4 100644
--- a/pkg/client/clientset/versioned/scheme/BUILD.bazel
+++ b/pkg/client/clientset/versioned/scheme/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime/schema:go_default_library",
diff --git a/pkg/client/clientset/versioned/scheme/register.go b/pkg/client/clientset/versioned/scheme/register.go
index 7326bba91..391285939 100644
--- a/pkg/client/clientset/versioned/scheme/register.go
+++ b/pkg/client/clientset/versioned/scheme/register.go
@@ -19,7 +19,7 @@ limitations under the License.
 package scheme
 
 import (
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -31,7 +31,7 @@ var Scheme = runtime.NewScheme()
 var Codecs = serializer.NewCodecFactory(Scheme)
 var ParameterCodec = runtime.NewParameterCodec(Scheme)
 var localSchemeBuilder = runtime.SchemeBuilder{
-	certmanagerv1alpha1.AddToScheme,
+	certmanagerv1alpha2.AddToScheme,
 }
 
 // AddToScheme adds all types of this clientset into the given scheme. This allows composition
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/BUILD.bazel b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/BUILD.bazel
similarity index 90%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/BUILD.bazel
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/BUILD.bazel
index a27129c07..7b8aed99b 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/BUILD.bazel
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/BUILD.bazel
@@ -13,10 +13,10 @@ go_library(
         "issuer.go",
         "order.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1",
+    importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned/scheme:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/types:go_default_library",
@@ -36,7 +36,7 @@ filegroup(
     name = "all-srcs",
     srcs = [
         ":package-srcs",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake:all-srcs",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake:all-srcs",
     ],
     tags = ["automanaged"],
     visibility = ["//visibility:public"],
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificate.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificate.go
similarity index 80%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificate.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificate.go
index 3a1a1517f..330ea2797 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificate.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificate.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type CertificatesGetter interface {
 
 // CertificateInterface has methods to work with Certificate resources.
 type CertificateInterface interface {
-	Create(*v1alpha1.Certificate) (*v1alpha1.Certificate, error)
-	Update(*v1alpha1.Certificate) (*v1alpha1.Certificate, error)
-	UpdateStatus(*v1alpha1.Certificate) (*v1alpha1.Certificate, error)
+	Create(*v1alpha2.Certificate) (*v1alpha2.Certificate, error)
+	Update(*v1alpha2.Certificate) (*v1alpha2.Certificate, error)
+	UpdateStatus(*v1alpha2.Certificate) (*v1alpha2.Certificate, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.Certificate, error)
-	List(opts v1.ListOptions) (*v1alpha1.CertificateList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.Certificate, error)
+	List(opts v1.ListOptions) (*v1alpha2.CertificateList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Certificate, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Certificate, err error)
 	CertificateExpansion
 }
 
@@ -56,7 +56,7 @@ type certificates struct {
 }
 
 // newCertificates returns a Certificates
-func newCertificates(c *CertmanagerV1alpha1Client, namespace string) *certificates {
+func newCertificates(c *CertmanagerV1alpha2Client, namespace string) *certificates {
 	return &certificates{
 		client: c.RESTClient(),
 		ns:     namespace,
@@ -64,8 +64,8 @@ func newCertificates(c *CertmanagerV1alpha1Client, namespace string) *certificat
 }
 
 // Get takes name of the certificate, and returns the corresponding certificate object, and an error if there is any.
-func (c *certificates) Get(name string, options v1.GetOptions) (result *v1alpha1.Certificate, err error) {
-	result = &v1alpha1.Certificate{}
+func (c *certificates) Get(name string, options v1.GetOptions) (result *v1alpha2.Certificate, err error) {
+	result = &v1alpha2.Certificate{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("certificates").
@@ -77,12 +77,12 @@ func (c *certificates) Get(name string, options v1.GetOptions) (result *v1alpha1
 }
 
 // List takes label and field selectors, and returns the list of Certificates that match those selectors.
-func (c *certificates) List(opts v1.ListOptions) (result *v1alpha1.CertificateList, err error) {
+func (c *certificates) List(opts v1.ListOptions) (result *v1alpha2.CertificateList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.CertificateList{}
+	result = &v1alpha2.CertificateList{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("certificates").
@@ -109,8 +109,8 @@ func (c *certificates) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a certificate and creates it.  Returns the server's representation of the certificate, and an error, if there is any.
-func (c *certificates) Create(certificate *v1alpha1.Certificate) (result *v1alpha1.Certificate, err error) {
-	result = &v1alpha1.Certificate{}
+func (c *certificates) Create(certificate *v1alpha2.Certificate) (result *v1alpha2.Certificate, err error) {
+	result = &v1alpha2.Certificate{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("certificates").
@@ -121,8 +121,8 @@ func (c *certificates) Create(certificate *v1alpha1.Certificate) (result *v1alph
 }
 
 // Update takes the representation of a certificate and updates it. Returns the server's representation of the certificate, and an error, if there is any.
-func (c *certificates) Update(certificate *v1alpha1.Certificate) (result *v1alpha1.Certificate, err error) {
-	result = &v1alpha1.Certificate{}
+func (c *certificates) Update(certificate *v1alpha2.Certificate) (result *v1alpha2.Certificate, err error) {
+	result = &v1alpha2.Certificate{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("certificates").
@@ -136,8 +136,8 @@ func (c *certificates) Update(certificate *v1alpha1.Certificate) (result *v1alph
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *certificates) UpdateStatus(certificate *v1alpha1.Certificate) (result *v1alpha1.Certificate, err error) {
-	result = &v1alpha1.Certificate{}
+func (c *certificates) UpdateStatus(certificate *v1alpha2.Certificate) (result *v1alpha2.Certificate, err error) {
+	result = &v1alpha2.Certificate{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("certificates").
@@ -177,8 +177,8 @@ func (c *certificates) DeleteCollection(options *v1.DeleteOptions, listOptions v
 }
 
 // Patch applies the patch and returns the patched certificate.
-func (c *certificates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Certificate, err error) {
-	result = &v1alpha1.Certificate{}
+func (c *certificates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Certificate, err error) {
+	result = &v1alpha2.Certificate{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
 		Resource("certificates").
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificaterequest.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificaterequest.go
similarity index 83%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificaterequest.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificaterequest.go
index 0bc4b226b..61174c257 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certificaterequest.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certificaterequest.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type CertificateRequestsGetter interface {
 
 // CertificateRequestInterface has methods to work with CertificateRequest resources.
 type CertificateRequestInterface interface {
-	Create(*v1alpha1.CertificateRequest) (*v1alpha1.CertificateRequest, error)
-	Update(*v1alpha1.CertificateRequest) (*v1alpha1.CertificateRequest, error)
-	UpdateStatus(*v1alpha1.CertificateRequest) (*v1alpha1.CertificateRequest, error)
+	Create(*v1alpha2.CertificateRequest) (*v1alpha2.CertificateRequest, error)
+	Update(*v1alpha2.CertificateRequest) (*v1alpha2.CertificateRequest, error)
+	UpdateStatus(*v1alpha2.CertificateRequest) (*v1alpha2.CertificateRequest, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.CertificateRequest, error)
-	List(opts v1.ListOptions) (*v1alpha1.CertificateRequestList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.CertificateRequest, error)
+	List(opts v1.ListOptions) (*v1alpha2.CertificateRequestList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CertificateRequest, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.CertificateRequest, err error)
 	CertificateRequestExpansion
 }
 
@@ -56,7 +56,7 @@ type certificateRequests struct {
 }
 
 // newCertificateRequests returns a CertificateRequests
-func newCertificateRequests(c *CertmanagerV1alpha1Client, namespace string) *certificateRequests {
+func newCertificateRequests(c *CertmanagerV1alpha2Client, namespace string) *certificateRequests {
 	return &certificateRequests{
 		client: c.RESTClient(),
 		ns:     namespace,
@@ -64,8 +64,8 @@ func newCertificateRequests(c *CertmanagerV1alpha1Client, namespace string) *cer
 }
 
 // Get takes name of the certificateRequest, and returns the corresponding certificateRequest object, and an error if there is any.
-func (c *certificateRequests) Get(name string, options v1.GetOptions) (result *v1alpha1.CertificateRequest, err error) {
-	result = &v1alpha1.CertificateRequest{}
+func (c *certificateRequests) Get(name string, options v1.GetOptions) (result *v1alpha2.CertificateRequest, err error) {
+	result = &v1alpha2.CertificateRequest{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("certificaterequests").
@@ -77,12 +77,12 @@ func (c *certificateRequests) Get(name string, options v1.GetOptions) (result *v
 }
 
 // List takes label and field selectors, and returns the list of CertificateRequests that match those selectors.
-func (c *certificateRequests) List(opts v1.ListOptions) (result *v1alpha1.CertificateRequestList, err error) {
+func (c *certificateRequests) List(opts v1.ListOptions) (result *v1alpha2.CertificateRequestList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.CertificateRequestList{}
+	result = &v1alpha2.CertificateRequestList{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("certificaterequests").
@@ -109,8 +109,8 @@ func (c *certificateRequests) Watch(opts v1.ListOptions) (watch.Interface, error
 }
 
 // Create takes the representation of a certificateRequest and creates it.  Returns the server's representation of the certificateRequest, and an error, if there is any.
-func (c *certificateRequests) Create(certificateRequest *v1alpha1.CertificateRequest) (result *v1alpha1.CertificateRequest, err error) {
-	result = &v1alpha1.CertificateRequest{}
+func (c *certificateRequests) Create(certificateRequest *v1alpha2.CertificateRequest) (result *v1alpha2.CertificateRequest, err error) {
+	result = &v1alpha2.CertificateRequest{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("certificaterequests").
@@ -121,8 +121,8 @@ func (c *certificateRequests) Create(certificateRequest *v1alpha1.CertificateReq
 }
 
 // Update takes the representation of a certificateRequest and updates it. Returns the server's representation of the certificateRequest, and an error, if there is any.
-func (c *certificateRequests) Update(certificateRequest *v1alpha1.CertificateRequest) (result *v1alpha1.CertificateRequest, err error) {
-	result = &v1alpha1.CertificateRequest{}
+func (c *certificateRequests) Update(certificateRequest *v1alpha2.CertificateRequest) (result *v1alpha2.CertificateRequest, err error) {
+	result = &v1alpha2.CertificateRequest{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("certificaterequests").
@@ -136,8 +136,8 @@ func (c *certificateRequests) Update(certificateRequest *v1alpha1.CertificateReq
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *certificateRequests) UpdateStatus(certificateRequest *v1alpha1.CertificateRequest) (result *v1alpha1.CertificateRequest, err error) {
-	result = &v1alpha1.CertificateRequest{}
+func (c *certificateRequests) UpdateStatus(certificateRequest *v1alpha2.CertificateRequest) (result *v1alpha2.CertificateRequest, err error) {
+	result = &v1alpha2.CertificateRequest{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("certificaterequests").
@@ -177,8 +177,8 @@ func (c *certificateRequests) DeleteCollection(options *v1.DeleteOptions, listOp
 }
 
 // Patch applies the patch and returns the patched certificateRequest.
-func (c *certificateRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CertificateRequest, err error) {
-	result = &v1alpha1.CertificateRequest{}
+func (c *certificateRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.CertificateRequest, err error) {
+	result = &v1alpha2.CertificateRequest{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
 		Resource("certificaterequests").
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certmanager_client.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certmanager_client.go
similarity index 64%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certmanager_client.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certmanager_client.go
index 50cbbfb79..657e10dee 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/certmanager_client.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/certmanager_client.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	rest "k8s.io/client-go/rest"
 )
 
-type CertmanagerV1alpha1Interface interface {
+type CertmanagerV1alpha2Interface interface {
 	RESTClient() rest.Interface
 	CertificatesGetter
 	CertificateRequestsGetter
@@ -34,37 +34,37 @@ type CertmanagerV1alpha1Interface interface {
 	OrdersGetter
 }
 
-// CertmanagerV1alpha1Client is used to interact with features provided by the certmanager.k8s.io group.
-type CertmanagerV1alpha1Client struct {
+// CertmanagerV1alpha2Client is used to interact with features provided by the certmanager.k8s.io group.
+type CertmanagerV1alpha2Client struct {
 	restClient rest.Interface
 }
 
-func (c *CertmanagerV1alpha1Client) Certificates(namespace string) CertificateInterface {
+func (c *CertmanagerV1alpha2Client) Certificates(namespace string) CertificateInterface {
 	return newCertificates(c, namespace)
 }
 
-func (c *CertmanagerV1alpha1Client) CertificateRequests(namespace string) CertificateRequestInterface {
+func (c *CertmanagerV1alpha2Client) CertificateRequests(namespace string) CertificateRequestInterface {
 	return newCertificateRequests(c, namespace)
 }
 
-func (c *CertmanagerV1alpha1Client) Challenges(namespace string) ChallengeInterface {
+func (c *CertmanagerV1alpha2Client) Challenges(namespace string) ChallengeInterface {
 	return newChallenges(c, namespace)
 }
 
-func (c *CertmanagerV1alpha1Client) ClusterIssuers() ClusterIssuerInterface {
+func (c *CertmanagerV1alpha2Client) ClusterIssuers() ClusterIssuerInterface {
 	return newClusterIssuers(c)
 }
 
-func (c *CertmanagerV1alpha1Client) Issuers(namespace string) IssuerInterface {
+func (c *CertmanagerV1alpha2Client) Issuers(namespace string) IssuerInterface {
 	return newIssuers(c, namespace)
 }
 
-func (c *CertmanagerV1alpha1Client) Orders(namespace string) OrderInterface {
+func (c *CertmanagerV1alpha2Client) Orders(namespace string) OrderInterface {
 	return newOrders(c, namespace)
 }
 
-// NewForConfig creates a new CertmanagerV1alpha1Client for the given config.
-func NewForConfig(c *rest.Config) (*CertmanagerV1alpha1Client, error) {
+// NewForConfig creates a new CertmanagerV1alpha2Client for the given config.
+func NewForConfig(c *rest.Config) (*CertmanagerV1alpha2Client, error) {
 	config := *c
 	if err := setConfigDefaults(&config); err != nil {
 		return nil, err
@@ -73,12 +73,12 @@ func NewForConfig(c *rest.Config) (*CertmanagerV1alpha1Client, error) {
 	if err != nil {
 		return nil, err
 	}
-	return &CertmanagerV1alpha1Client{client}, nil
+	return &CertmanagerV1alpha2Client{client}, nil
 }
 
-// NewForConfigOrDie creates a new CertmanagerV1alpha1Client for the given config and
+// NewForConfigOrDie creates a new CertmanagerV1alpha2Client for the given config and
 // panics if there is an error in the config.
-func NewForConfigOrDie(c *rest.Config) *CertmanagerV1alpha1Client {
+func NewForConfigOrDie(c *rest.Config) *CertmanagerV1alpha2Client {
 	client, err := NewForConfig(c)
 	if err != nil {
 		panic(err)
@@ -86,13 +86,13 @@ func NewForConfigOrDie(c *rest.Config) *CertmanagerV1alpha1Client {
 	return client
 }
 
-// New creates a new CertmanagerV1alpha1Client for the given RESTClient.
-func New(c rest.Interface) *CertmanagerV1alpha1Client {
-	return &CertmanagerV1alpha1Client{c}
+// New creates a new CertmanagerV1alpha2Client for the given RESTClient.
+func New(c rest.Interface) *CertmanagerV1alpha2Client {
+	return &CertmanagerV1alpha2Client{c}
 }
 
 func setConfigDefaults(config *rest.Config) error {
-	gv := v1alpha1.SchemeGroupVersion
+	gv := v1alpha2.SchemeGroupVersion
 	config.GroupVersion = &gv
 	config.APIPath = "/apis"
 	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
@@ -106,7 +106,7 @@ func setConfigDefaults(config *rest.Config) error {
 
 // RESTClient returns a RESTClient that is used to communicate
 // with API server by this client implementation.
-func (c *CertmanagerV1alpha1Client) RESTClient() rest.Interface {
+func (c *CertmanagerV1alpha2Client) RESTClient() rest.Interface {
 	if c == nil {
 		return nil
 	}
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/challenge.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/challenge.go
similarity index 80%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/challenge.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/challenge.go
index b637a066b..8ea4597f9 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/challenge.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/challenge.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type ChallengesGetter interface {
 
 // ChallengeInterface has methods to work with Challenge resources.
 type ChallengeInterface interface {
-	Create(*v1alpha1.Challenge) (*v1alpha1.Challenge, error)
-	Update(*v1alpha1.Challenge) (*v1alpha1.Challenge, error)
-	UpdateStatus(*v1alpha1.Challenge) (*v1alpha1.Challenge, error)
+	Create(*v1alpha2.Challenge) (*v1alpha2.Challenge, error)
+	Update(*v1alpha2.Challenge) (*v1alpha2.Challenge, error)
+	UpdateStatus(*v1alpha2.Challenge) (*v1alpha2.Challenge, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.Challenge, error)
-	List(opts v1.ListOptions) (*v1alpha1.ChallengeList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.Challenge, error)
+	List(opts v1.ListOptions) (*v1alpha2.ChallengeList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Challenge, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Challenge, err error)
 	ChallengeExpansion
 }
 
@@ -56,7 +56,7 @@ type challenges struct {
 }
 
 // newChallenges returns a Challenges
-func newChallenges(c *CertmanagerV1alpha1Client, namespace string) *challenges {
+func newChallenges(c *CertmanagerV1alpha2Client, namespace string) *challenges {
 	return &challenges{
 		client: c.RESTClient(),
 		ns:     namespace,
@@ -64,8 +64,8 @@ func newChallenges(c *CertmanagerV1alpha1Client, namespace string) *challenges {
 }
 
 // Get takes name of the challenge, and returns the corresponding challenge object, and an error if there is any.
-func (c *challenges) Get(name string, options v1.GetOptions) (result *v1alpha1.Challenge, err error) {
-	result = &v1alpha1.Challenge{}
+func (c *challenges) Get(name string, options v1.GetOptions) (result *v1alpha2.Challenge, err error) {
+	result = &v1alpha2.Challenge{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("challenges").
@@ -77,12 +77,12 @@ func (c *challenges) Get(name string, options v1.GetOptions) (result *v1alpha1.C
 }
 
 // List takes label and field selectors, and returns the list of Challenges that match those selectors.
-func (c *challenges) List(opts v1.ListOptions) (result *v1alpha1.ChallengeList, err error) {
+func (c *challenges) List(opts v1.ListOptions) (result *v1alpha2.ChallengeList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.ChallengeList{}
+	result = &v1alpha2.ChallengeList{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("challenges").
@@ -109,8 +109,8 @@ func (c *challenges) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a challenge and creates it.  Returns the server's representation of the challenge, and an error, if there is any.
-func (c *challenges) Create(challenge *v1alpha1.Challenge) (result *v1alpha1.Challenge, err error) {
-	result = &v1alpha1.Challenge{}
+func (c *challenges) Create(challenge *v1alpha2.Challenge) (result *v1alpha2.Challenge, err error) {
+	result = &v1alpha2.Challenge{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("challenges").
@@ -121,8 +121,8 @@ func (c *challenges) Create(challenge *v1alpha1.Challenge) (result *v1alpha1.Cha
 }
 
 // Update takes the representation of a challenge and updates it. Returns the server's representation of the challenge, and an error, if there is any.
-func (c *challenges) Update(challenge *v1alpha1.Challenge) (result *v1alpha1.Challenge, err error) {
-	result = &v1alpha1.Challenge{}
+func (c *challenges) Update(challenge *v1alpha2.Challenge) (result *v1alpha2.Challenge, err error) {
+	result = &v1alpha2.Challenge{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("challenges").
@@ -136,8 +136,8 @@ func (c *challenges) Update(challenge *v1alpha1.Challenge) (result *v1alpha1.Cha
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *challenges) UpdateStatus(challenge *v1alpha1.Challenge) (result *v1alpha1.Challenge, err error) {
-	result = &v1alpha1.Challenge{}
+func (c *challenges) UpdateStatus(challenge *v1alpha2.Challenge) (result *v1alpha2.Challenge, err error) {
+	result = &v1alpha2.Challenge{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("challenges").
@@ -177,8 +177,8 @@ func (c *challenges) DeleteCollection(options *v1.DeleteOptions, listOptions v1.
 }
 
 // Patch applies the patch and returns the patched challenge.
-func (c *challenges) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Challenge, err error) {
-	result = &v1alpha1.Challenge{}
+func (c *challenges) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Challenge, err error) {
+	result = &v1alpha2.Challenge{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
 		Resource("challenges").
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/clusterissuer.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/clusterissuer.go
similarity index 79%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/clusterissuer.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/clusterissuer.go
index b46780492..da6502d5b 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/clusterissuer.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/clusterissuer.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type ClusterIssuersGetter interface {
 
 // ClusterIssuerInterface has methods to work with ClusterIssuer resources.
 type ClusterIssuerInterface interface {
-	Create(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
-	Update(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
-	UpdateStatus(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
+	Create(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
+	Update(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
+	UpdateStatus(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.ClusterIssuer, error)
-	List(opts v1.ListOptions) (*v1alpha1.ClusterIssuerList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.ClusterIssuer, error)
+	List(opts v1.ListOptions) (*v1alpha2.ClusterIssuerList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterIssuer, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.ClusterIssuer, err error)
 	ClusterIssuerExpansion
 }
 
@@ -55,15 +55,15 @@ type clusterIssuers struct {
 }
 
 // newClusterIssuers returns a ClusterIssuers
-func newClusterIssuers(c *CertmanagerV1alpha1Client) *clusterIssuers {
+func newClusterIssuers(c *CertmanagerV1alpha2Client) *clusterIssuers {
 	return &clusterIssuers{
 		client: c.RESTClient(),
 	}
 }
 
 // Get takes name of the clusterIssuer, and returns the corresponding clusterIssuer object, and an error if there is any.
-func (c *clusterIssuers) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterIssuer, err error) {
-	result = &v1alpha1.ClusterIssuer{}
+func (c *clusterIssuers) Get(name string, options v1.GetOptions) (result *v1alpha2.ClusterIssuer, err error) {
+	result = &v1alpha2.ClusterIssuer{}
 	err = c.client.Get().
 		Resource("clusterissuers").
 		Name(name).
@@ -74,12 +74,12 @@ func (c *clusterIssuers) Get(name string, options v1.GetOptions) (result *v1alph
 }
 
 // List takes label and field selectors, and returns the list of ClusterIssuers that match those selectors.
-func (c *clusterIssuers) List(opts v1.ListOptions) (result *v1alpha1.ClusterIssuerList, err error) {
+func (c *clusterIssuers) List(opts v1.ListOptions) (result *v1alpha2.ClusterIssuerList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.ClusterIssuerList{}
+	result = &v1alpha2.ClusterIssuerList{}
 	err = c.client.Get().
 		Resource("clusterissuers").
 		VersionedParams(&opts, scheme.ParameterCodec).
@@ -104,8 +104,8 @@ func (c *clusterIssuers) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a clusterIssuer and creates it.  Returns the server's representation of the clusterIssuer, and an error, if there is any.
-func (c *clusterIssuers) Create(clusterIssuer *v1alpha1.ClusterIssuer) (result *v1alpha1.ClusterIssuer, err error) {
-	result = &v1alpha1.ClusterIssuer{}
+func (c *clusterIssuers) Create(clusterIssuer *v1alpha2.ClusterIssuer) (result *v1alpha2.ClusterIssuer, err error) {
+	result = &v1alpha2.ClusterIssuer{}
 	err = c.client.Post().
 		Resource("clusterissuers").
 		Body(clusterIssuer).
@@ -115,8 +115,8 @@ func (c *clusterIssuers) Create(clusterIssuer *v1alpha1.ClusterIssuer) (result *
 }
 
 // Update takes the representation of a clusterIssuer and updates it. Returns the server's representation of the clusterIssuer, and an error, if there is any.
-func (c *clusterIssuers) Update(clusterIssuer *v1alpha1.ClusterIssuer) (result *v1alpha1.ClusterIssuer, err error) {
-	result = &v1alpha1.ClusterIssuer{}
+func (c *clusterIssuers) Update(clusterIssuer *v1alpha2.ClusterIssuer) (result *v1alpha2.ClusterIssuer, err error) {
+	result = &v1alpha2.ClusterIssuer{}
 	err = c.client.Put().
 		Resource("clusterissuers").
 		Name(clusterIssuer.Name).
@@ -129,8 +129,8 @@ func (c *clusterIssuers) Update(clusterIssuer *v1alpha1.ClusterIssuer) (result *
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *clusterIssuers) UpdateStatus(clusterIssuer *v1alpha1.ClusterIssuer) (result *v1alpha1.ClusterIssuer, err error) {
-	result = &v1alpha1.ClusterIssuer{}
+func (c *clusterIssuers) UpdateStatus(clusterIssuer *v1alpha2.ClusterIssuer) (result *v1alpha2.ClusterIssuer, err error) {
+	result = &v1alpha2.ClusterIssuer{}
 	err = c.client.Put().
 		Resource("clusterissuers").
 		Name(clusterIssuer.Name).
@@ -167,8 +167,8 @@ func (c *clusterIssuers) DeleteCollection(options *v1.DeleteOptions, listOptions
 }
 
 // Patch applies the patch and returns the patched clusterIssuer.
-func (c *clusterIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterIssuer, err error) {
-	result = &v1alpha1.ClusterIssuer{}
+func (c *clusterIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.ClusterIssuer, err error) {
+	result = &v1alpha2.ClusterIssuer{}
 	err = c.client.Patch(pt).
 		Resource("clusterissuers").
 		SubResource(subresources...).
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/doc.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/doc.go
similarity index 97%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/doc.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/doc.go
index 74c5de930..18a30036c 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/doc.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/doc.go
@@ -17,4 +17,4 @@ limitations under the License.
 // Code generated by client-gen. DO NOT EDIT.
 
 // This package has the automatically generated typed clients.
-package v1alpha1
+package v1alpha2
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/BUILD.bazel b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/BUILD.bazel
similarity index 90%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/BUILD.bazel
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/BUILD.bazel
index bb7810f09..0d4dda127 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/BUILD.bazel
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/BUILD.bazel
@@ -12,11 +12,11 @@ go_library(
         "fake_issuer.go",
         "fake_order.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake",
+    importpath = "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime/schema:go_default_library",
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/doc.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/doc.go
similarity index 100%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/doc.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/doc.go
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificate.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificate.go
similarity index 73%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificate.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificate.go
index cee2feb76..865b97339 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificate.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificate.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,29 +30,29 @@ import (
 
 // FakeCertificates implements CertificateInterface
 type FakeCertificates struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 	ns   string
 }
 
-var certificatesResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "certificates"}
+var certificatesResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "certificates"}
 
-var certificatesKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "Certificate"}
+var certificatesKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "Certificate"}
 
 // Get takes name of the certificate, and returns the corresponding certificate object, and an error if there is any.
-func (c *FakeCertificates) Get(name string, options v1.GetOptions) (result *v1alpha1.Certificate, err error) {
+func (c *FakeCertificates) Get(name string, options v1.GetOptions) (result *v1alpha2.Certificate, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewGetAction(certificatesResource, c.ns, name), &v1alpha1.Certificate{})
+		Invokes(testing.NewGetAction(certificatesResource, c.ns, name), &v1alpha2.Certificate{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Certificate), err
+	return obj.(*v1alpha2.Certificate), err
 }
 
 // List takes label and field selectors, and returns the list of Certificates that match those selectors.
-func (c *FakeCertificates) List(opts v1.ListOptions) (result *v1alpha1.CertificateList, err error) {
+func (c *FakeCertificates) List(opts v1.ListOptions) (result *v1alpha2.CertificateList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewListAction(certificatesResource, certificatesKind, c.ns, opts), &v1alpha1.CertificateList{})
+		Invokes(testing.NewListAction(certificatesResource, certificatesKind, c.ns, opts), &v1alpha2.CertificateList{})
 
 	if obj == nil {
 		return nil, err
@@ -62,8 +62,8 @@ func (c *FakeCertificates) List(opts v1.ListOptions) (result *v1alpha1.Certifica
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.CertificateList{ListMeta: obj.(*v1alpha1.CertificateList).ListMeta}
-	for _, item := range obj.(*v1alpha1.CertificateList).Items {
+	list := &v1alpha2.CertificateList{ListMeta: obj.(*v1alpha2.CertificateList).ListMeta}
+	for _, item := range obj.(*v1alpha2.CertificateList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -79,43 +79,43 @@ func (c *FakeCertificates) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a certificate and creates it.  Returns the server's representation of the certificate, and an error, if there is any.
-func (c *FakeCertificates) Create(certificate *v1alpha1.Certificate) (result *v1alpha1.Certificate, err error) {
+func (c *FakeCertificates) Create(certificate *v1alpha2.Certificate) (result *v1alpha2.Certificate, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewCreateAction(certificatesResource, c.ns, certificate), &v1alpha1.Certificate{})
+		Invokes(testing.NewCreateAction(certificatesResource, c.ns, certificate), &v1alpha2.Certificate{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Certificate), err
+	return obj.(*v1alpha2.Certificate), err
 }
 
 // Update takes the representation of a certificate and updates it. Returns the server's representation of the certificate, and an error, if there is any.
-func (c *FakeCertificates) Update(certificate *v1alpha1.Certificate) (result *v1alpha1.Certificate, err error) {
+func (c *FakeCertificates) Update(certificate *v1alpha2.Certificate) (result *v1alpha2.Certificate, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateAction(certificatesResource, c.ns, certificate), &v1alpha1.Certificate{})
+		Invokes(testing.NewUpdateAction(certificatesResource, c.ns, certificate), &v1alpha2.Certificate{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Certificate), err
+	return obj.(*v1alpha2.Certificate), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeCertificates) UpdateStatus(certificate *v1alpha1.Certificate) (*v1alpha1.Certificate, error) {
+func (c *FakeCertificates) UpdateStatus(certificate *v1alpha2.Certificate) (*v1alpha2.Certificate, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateSubresourceAction(certificatesResource, "status", c.ns, certificate), &v1alpha1.Certificate{})
+		Invokes(testing.NewUpdateSubresourceAction(certificatesResource, "status", c.ns, certificate), &v1alpha2.Certificate{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Certificate), err
+	return obj.(*v1alpha2.Certificate), err
 }
 
 // Delete takes name of the certificate and deletes it. Returns an error if one occurs.
 func (c *FakeCertificates) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewDeleteAction(certificatesResource, c.ns, name), &v1alpha1.Certificate{})
+		Invokes(testing.NewDeleteAction(certificatesResource, c.ns, name), &v1alpha2.Certificate{})
 
 	return err
 }
@@ -124,17 +124,17 @@ func (c *FakeCertificates) Delete(name string, options *v1.DeleteOptions) error
 func (c *FakeCertificates) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewDeleteCollectionAction(certificatesResource, c.ns, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.CertificateList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.CertificateList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched certificate.
-func (c *FakeCertificates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Certificate, err error) {
+func (c *FakeCertificates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Certificate, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewPatchSubresourceAction(certificatesResource, c.ns, name, pt, data, subresources...), &v1alpha1.Certificate{})
+		Invokes(testing.NewPatchSubresourceAction(certificatesResource, c.ns, name, pt, data, subresources...), &v1alpha2.Certificate{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Certificate), err
+	return obj.(*v1alpha2.Certificate), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificaterequest.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificaterequest.go
similarity index 74%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificaterequest.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificaterequest.go
index bfcf263db..46f2a6fcd 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certificaterequest.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certificaterequest.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,29 +30,29 @@ import (
 
 // FakeCertificateRequests implements CertificateRequestInterface
 type FakeCertificateRequests struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 	ns   string
 }
 
-var certificaterequestsResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "certificaterequests"}
+var certificaterequestsResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "certificaterequests"}
 
-var certificaterequestsKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "CertificateRequest"}
+var certificaterequestsKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "CertificateRequest"}
 
 // Get takes name of the certificateRequest, and returns the corresponding certificateRequest object, and an error if there is any.
-func (c *FakeCertificateRequests) Get(name string, options v1.GetOptions) (result *v1alpha1.CertificateRequest, err error) {
+func (c *FakeCertificateRequests) Get(name string, options v1.GetOptions) (result *v1alpha2.CertificateRequest, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewGetAction(certificaterequestsResource, c.ns, name), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewGetAction(certificaterequestsResource, c.ns, name), &v1alpha2.CertificateRequest{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.CertificateRequest), err
+	return obj.(*v1alpha2.CertificateRequest), err
 }
 
 // List takes label and field selectors, and returns the list of CertificateRequests that match those selectors.
-func (c *FakeCertificateRequests) List(opts v1.ListOptions) (result *v1alpha1.CertificateRequestList, err error) {
+func (c *FakeCertificateRequests) List(opts v1.ListOptions) (result *v1alpha2.CertificateRequestList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewListAction(certificaterequestsResource, certificaterequestsKind, c.ns, opts), &v1alpha1.CertificateRequestList{})
+		Invokes(testing.NewListAction(certificaterequestsResource, certificaterequestsKind, c.ns, opts), &v1alpha2.CertificateRequestList{})
 
 	if obj == nil {
 		return nil, err
@@ -62,8 +62,8 @@ func (c *FakeCertificateRequests) List(opts v1.ListOptions) (result *v1alpha1.Ce
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.CertificateRequestList{ListMeta: obj.(*v1alpha1.CertificateRequestList).ListMeta}
-	for _, item := range obj.(*v1alpha1.CertificateRequestList).Items {
+	list := &v1alpha2.CertificateRequestList{ListMeta: obj.(*v1alpha2.CertificateRequestList).ListMeta}
+	for _, item := range obj.(*v1alpha2.CertificateRequestList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -79,43 +79,43 @@ func (c *FakeCertificateRequests) Watch(opts v1.ListOptions) (watch.Interface, e
 }
 
 // Create takes the representation of a certificateRequest and creates it.  Returns the server's representation of the certificateRequest, and an error, if there is any.
-func (c *FakeCertificateRequests) Create(certificateRequest *v1alpha1.CertificateRequest) (result *v1alpha1.CertificateRequest, err error) {
+func (c *FakeCertificateRequests) Create(certificateRequest *v1alpha2.CertificateRequest) (result *v1alpha2.CertificateRequest, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewCreateAction(certificaterequestsResource, c.ns, certificateRequest), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewCreateAction(certificaterequestsResource, c.ns, certificateRequest), &v1alpha2.CertificateRequest{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.CertificateRequest), err
+	return obj.(*v1alpha2.CertificateRequest), err
 }
 
 // Update takes the representation of a certificateRequest and updates it. Returns the server's representation of the certificateRequest, and an error, if there is any.
-func (c *FakeCertificateRequests) Update(certificateRequest *v1alpha1.CertificateRequest) (result *v1alpha1.CertificateRequest, err error) {
+func (c *FakeCertificateRequests) Update(certificateRequest *v1alpha2.CertificateRequest) (result *v1alpha2.CertificateRequest, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateAction(certificaterequestsResource, c.ns, certificateRequest), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewUpdateAction(certificaterequestsResource, c.ns, certificateRequest), &v1alpha2.CertificateRequest{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.CertificateRequest), err
+	return obj.(*v1alpha2.CertificateRequest), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeCertificateRequests) UpdateStatus(certificateRequest *v1alpha1.CertificateRequest) (*v1alpha1.CertificateRequest, error) {
+func (c *FakeCertificateRequests) UpdateStatus(certificateRequest *v1alpha2.CertificateRequest) (*v1alpha2.CertificateRequest, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateSubresourceAction(certificaterequestsResource, "status", c.ns, certificateRequest), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewUpdateSubresourceAction(certificaterequestsResource, "status", c.ns, certificateRequest), &v1alpha2.CertificateRequest{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.CertificateRequest), err
+	return obj.(*v1alpha2.CertificateRequest), err
 }
 
 // Delete takes name of the certificateRequest and deletes it. Returns an error if one occurs.
 func (c *FakeCertificateRequests) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewDeleteAction(certificaterequestsResource, c.ns, name), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewDeleteAction(certificaterequestsResource, c.ns, name), &v1alpha2.CertificateRequest{})
 
 	return err
 }
@@ -124,17 +124,17 @@ func (c *FakeCertificateRequests) Delete(name string, options *v1.DeleteOptions)
 func (c *FakeCertificateRequests) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewDeleteCollectionAction(certificaterequestsResource, c.ns, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.CertificateRequestList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.CertificateRequestList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched certificateRequest.
-func (c *FakeCertificateRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CertificateRequest, err error) {
+func (c *FakeCertificateRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.CertificateRequest, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewPatchSubresourceAction(certificaterequestsResource, c.ns, name, pt, data, subresources...), &v1alpha1.CertificateRequest{})
+		Invokes(testing.NewPatchSubresourceAction(certificaterequestsResource, c.ns, name, pt, data, subresources...), &v1alpha2.CertificateRequest{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.CertificateRequest), err
+	return obj.(*v1alpha2.CertificateRequest), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certmanager_client.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certmanager_client.go
similarity index 61%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certmanager_client.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certmanager_client.go
index bfc650e7b..8bef0ed6a 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_certmanager_client.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_certmanager_client.go
@@ -19,42 +19,42 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2"
 	rest "k8s.io/client-go/rest"
 	testing "k8s.io/client-go/testing"
 )
 
-type FakeCertmanagerV1alpha1 struct {
+type FakeCertmanagerV1alpha2 struct {
 	*testing.Fake
 }
 
-func (c *FakeCertmanagerV1alpha1) Certificates(namespace string) v1alpha1.CertificateInterface {
+func (c *FakeCertmanagerV1alpha2) Certificates(namespace string) v1alpha2.CertificateInterface {
 	return &FakeCertificates{c, namespace}
 }
 
-func (c *FakeCertmanagerV1alpha1) CertificateRequests(namespace string) v1alpha1.CertificateRequestInterface {
+func (c *FakeCertmanagerV1alpha2) CertificateRequests(namespace string) v1alpha2.CertificateRequestInterface {
 	return &FakeCertificateRequests{c, namespace}
 }
 
-func (c *FakeCertmanagerV1alpha1) Challenges(namespace string) v1alpha1.ChallengeInterface {
+func (c *FakeCertmanagerV1alpha2) Challenges(namespace string) v1alpha2.ChallengeInterface {
 	return &FakeChallenges{c, namespace}
 }
 
-func (c *FakeCertmanagerV1alpha1) ClusterIssuers() v1alpha1.ClusterIssuerInterface {
+func (c *FakeCertmanagerV1alpha2) ClusterIssuers() v1alpha2.ClusterIssuerInterface {
 	return &FakeClusterIssuers{c}
 }
 
-func (c *FakeCertmanagerV1alpha1) Issuers(namespace string) v1alpha1.IssuerInterface {
+func (c *FakeCertmanagerV1alpha2) Issuers(namespace string) v1alpha2.IssuerInterface {
 	return &FakeIssuers{c, namespace}
 }
 
-func (c *FakeCertmanagerV1alpha1) Orders(namespace string) v1alpha1.OrderInterface {
+func (c *FakeCertmanagerV1alpha2) Orders(namespace string) v1alpha2.OrderInterface {
 	return &FakeOrders{c, namespace}
 }
 
 // RESTClient returns a RESTClient that is used to communicate
 // with API server by this client implementation.
-func (c *FakeCertmanagerV1alpha1) RESTClient() rest.Interface {
+func (c *FakeCertmanagerV1alpha2) RESTClient() rest.Interface {
 	var ret *rest.RESTClient
 	return ret
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_challenge.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_challenge.go
similarity index 74%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_challenge.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_challenge.go
index d1cb852ad..9fd914a63 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_challenge.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_challenge.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,29 +30,29 @@ import (
 
 // FakeChallenges implements ChallengeInterface
 type FakeChallenges struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 	ns   string
 }
 
-var challengesResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "challenges"}
+var challengesResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "challenges"}
 
-var challengesKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "Challenge"}
+var challengesKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "Challenge"}
 
 // Get takes name of the challenge, and returns the corresponding challenge object, and an error if there is any.
-func (c *FakeChallenges) Get(name string, options v1.GetOptions) (result *v1alpha1.Challenge, err error) {
+func (c *FakeChallenges) Get(name string, options v1.GetOptions) (result *v1alpha2.Challenge, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewGetAction(challengesResource, c.ns, name), &v1alpha1.Challenge{})
+		Invokes(testing.NewGetAction(challengesResource, c.ns, name), &v1alpha2.Challenge{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Challenge), err
+	return obj.(*v1alpha2.Challenge), err
 }
 
 // List takes label and field selectors, and returns the list of Challenges that match those selectors.
-func (c *FakeChallenges) List(opts v1.ListOptions) (result *v1alpha1.ChallengeList, err error) {
+func (c *FakeChallenges) List(opts v1.ListOptions) (result *v1alpha2.ChallengeList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewListAction(challengesResource, challengesKind, c.ns, opts), &v1alpha1.ChallengeList{})
+		Invokes(testing.NewListAction(challengesResource, challengesKind, c.ns, opts), &v1alpha2.ChallengeList{})
 
 	if obj == nil {
 		return nil, err
@@ -62,8 +62,8 @@ func (c *FakeChallenges) List(opts v1.ListOptions) (result *v1alpha1.ChallengeLi
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.ChallengeList{ListMeta: obj.(*v1alpha1.ChallengeList).ListMeta}
-	for _, item := range obj.(*v1alpha1.ChallengeList).Items {
+	list := &v1alpha2.ChallengeList{ListMeta: obj.(*v1alpha2.ChallengeList).ListMeta}
+	for _, item := range obj.(*v1alpha2.ChallengeList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -79,43 +79,43 @@ func (c *FakeChallenges) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a challenge and creates it.  Returns the server's representation of the challenge, and an error, if there is any.
-func (c *FakeChallenges) Create(challenge *v1alpha1.Challenge) (result *v1alpha1.Challenge, err error) {
+func (c *FakeChallenges) Create(challenge *v1alpha2.Challenge) (result *v1alpha2.Challenge, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewCreateAction(challengesResource, c.ns, challenge), &v1alpha1.Challenge{})
+		Invokes(testing.NewCreateAction(challengesResource, c.ns, challenge), &v1alpha2.Challenge{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Challenge), err
+	return obj.(*v1alpha2.Challenge), err
 }
 
 // Update takes the representation of a challenge and updates it. Returns the server's representation of the challenge, and an error, if there is any.
-func (c *FakeChallenges) Update(challenge *v1alpha1.Challenge) (result *v1alpha1.Challenge, err error) {
+func (c *FakeChallenges) Update(challenge *v1alpha2.Challenge) (result *v1alpha2.Challenge, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateAction(challengesResource, c.ns, challenge), &v1alpha1.Challenge{})
+		Invokes(testing.NewUpdateAction(challengesResource, c.ns, challenge), &v1alpha2.Challenge{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Challenge), err
+	return obj.(*v1alpha2.Challenge), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeChallenges) UpdateStatus(challenge *v1alpha1.Challenge) (*v1alpha1.Challenge, error) {
+func (c *FakeChallenges) UpdateStatus(challenge *v1alpha2.Challenge) (*v1alpha2.Challenge, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateSubresourceAction(challengesResource, "status", c.ns, challenge), &v1alpha1.Challenge{})
+		Invokes(testing.NewUpdateSubresourceAction(challengesResource, "status", c.ns, challenge), &v1alpha2.Challenge{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Challenge), err
+	return obj.(*v1alpha2.Challenge), err
 }
 
 // Delete takes name of the challenge and deletes it. Returns an error if one occurs.
 func (c *FakeChallenges) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewDeleteAction(challengesResource, c.ns, name), &v1alpha1.Challenge{})
+		Invokes(testing.NewDeleteAction(challengesResource, c.ns, name), &v1alpha2.Challenge{})
 
 	return err
 }
@@ -124,17 +124,17 @@ func (c *FakeChallenges) Delete(name string, options *v1.DeleteOptions) error {
 func (c *FakeChallenges) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewDeleteCollectionAction(challengesResource, c.ns, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.ChallengeList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.ChallengeList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched challenge.
-func (c *FakeChallenges) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Challenge, err error) {
+func (c *FakeChallenges) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Challenge, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewPatchSubresourceAction(challengesResource, c.ns, name, pt, data, subresources...), &v1alpha1.Challenge{})
+		Invokes(testing.NewPatchSubresourceAction(challengesResource, c.ns, name, pt, data, subresources...), &v1alpha2.Challenge{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Challenge), err
+	return obj.(*v1alpha2.Challenge), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_clusterissuer.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_clusterissuer.go
similarity index 73%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_clusterissuer.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_clusterissuer.go
index c9a7ba3e5..6a58849ac 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_clusterissuer.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_clusterissuer.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,27 +30,27 @@ import (
 
 // FakeClusterIssuers implements ClusterIssuerInterface
 type FakeClusterIssuers struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 }
 
-var clusterissuersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "clusterissuers"}
+var clusterissuersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "clusterissuers"}
 
-var clusterissuersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "ClusterIssuer"}
+var clusterissuersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "ClusterIssuer"}
 
 // Get takes name of the clusterIssuer, and returns the corresponding clusterIssuer object, and an error if there is any.
-func (c *FakeClusterIssuers) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterIssuer, err error) {
+func (c *FakeClusterIssuers) Get(name string, options v1.GetOptions) (result *v1alpha2.ClusterIssuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootGetAction(clusterissuersResource, name), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootGetAction(clusterissuersResource, name), &v1alpha2.ClusterIssuer{})
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.ClusterIssuer), err
+	return obj.(*v1alpha2.ClusterIssuer), err
 }
 
 // List takes label and field selectors, and returns the list of ClusterIssuers that match those selectors.
-func (c *FakeClusterIssuers) List(opts v1.ListOptions) (result *v1alpha1.ClusterIssuerList, err error) {
+func (c *FakeClusterIssuers) List(opts v1.ListOptions) (result *v1alpha2.ClusterIssuerList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootListAction(clusterissuersResource, clusterissuersKind, opts), &v1alpha1.ClusterIssuerList{})
+		Invokes(testing.NewRootListAction(clusterissuersResource, clusterissuersKind, opts), &v1alpha2.ClusterIssuerList{})
 	if obj == nil {
 		return nil, err
 	}
@@ -59,8 +59,8 @@ func (c *FakeClusterIssuers) List(opts v1.ListOptions) (result *v1alpha1.Cluster
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.ClusterIssuerList{ListMeta: obj.(*v1alpha1.ClusterIssuerList).ListMeta}
-	for _, item := range obj.(*v1alpha1.ClusterIssuerList).Items {
+	list := &v1alpha2.ClusterIssuerList{ListMeta: obj.(*v1alpha2.ClusterIssuerList).ListMeta}
+	for _, item := range obj.(*v1alpha2.ClusterIssuerList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -75,40 +75,40 @@ func (c *FakeClusterIssuers) Watch(opts v1.ListOptions) (watch.Interface, error)
 }
 
 // Create takes the representation of a clusterIssuer and creates it.  Returns the server's representation of the clusterIssuer, and an error, if there is any.
-func (c *FakeClusterIssuers) Create(clusterIssuer *v1alpha1.ClusterIssuer) (result *v1alpha1.ClusterIssuer, err error) {
+func (c *FakeClusterIssuers) Create(clusterIssuer *v1alpha2.ClusterIssuer) (result *v1alpha2.ClusterIssuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootCreateAction(clusterissuersResource, clusterIssuer), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootCreateAction(clusterissuersResource, clusterIssuer), &v1alpha2.ClusterIssuer{})
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.ClusterIssuer), err
+	return obj.(*v1alpha2.ClusterIssuer), err
 }
 
 // Update takes the representation of a clusterIssuer and updates it. Returns the server's representation of the clusterIssuer, and an error, if there is any.
-func (c *FakeClusterIssuers) Update(clusterIssuer *v1alpha1.ClusterIssuer) (result *v1alpha1.ClusterIssuer, err error) {
+func (c *FakeClusterIssuers) Update(clusterIssuer *v1alpha2.ClusterIssuer) (result *v1alpha2.ClusterIssuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootUpdateAction(clusterissuersResource, clusterIssuer), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootUpdateAction(clusterissuersResource, clusterIssuer), &v1alpha2.ClusterIssuer{})
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.ClusterIssuer), err
+	return obj.(*v1alpha2.ClusterIssuer), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeClusterIssuers) UpdateStatus(clusterIssuer *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
+func (c *FakeClusterIssuers) UpdateStatus(clusterIssuer *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootUpdateSubresourceAction(clusterissuersResource, "status", clusterIssuer), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootUpdateSubresourceAction(clusterissuersResource, "status", clusterIssuer), &v1alpha2.ClusterIssuer{})
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.ClusterIssuer), err
+	return obj.(*v1alpha2.ClusterIssuer), err
 }
 
 // Delete takes name of the clusterIssuer and deletes it. Returns an error if one occurs.
 func (c *FakeClusterIssuers) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewRootDeleteAction(clusterissuersResource, name), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootDeleteAction(clusterissuersResource, name), &v1alpha2.ClusterIssuer{})
 	return err
 }
 
@@ -116,16 +116,16 @@ func (c *FakeClusterIssuers) Delete(name string, options *v1.DeleteOptions) erro
 func (c *FakeClusterIssuers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewRootDeleteCollectionAction(clusterissuersResource, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterIssuerList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.ClusterIssuerList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched clusterIssuer.
-func (c *FakeClusterIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterIssuer, err error) {
+func (c *FakeClusterIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.ClusterIssuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewRootPatchSubresourceAction(clusterissuersResource, name, pt, data, subresources...), &v1alpha1.ClusterIssuer{})
+		Invokes(testing.NewRootPatchSubresourceAction(clusterissuersResource, name, pt, data, subresources...), &v1alpha2.ClusterIssuer{})
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.ClusterIssuer), err
+	return obj.(*v1alpha2.ClusterIssuer), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_issuer.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_issuer.go
similarity index 76%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_issuer.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_issuer.go
index e27d45ca9..5c668130d 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_issuer.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_issuer.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,29 +30,29 @@ import (
 
 // FakeIssuers implements IssuerInterface
 type FakeIssuers struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 	ns   string
 }
 
-var issuersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "issuers"}
+var issuersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "issuers"}
 
-var issuersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "Issuer"}
+var issuersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "Issuer"}
 
 // Get takes name of the issuer, and returns the corresponding issuer object, and an error if there is any.
-func (c *FakeIssuers) Get(name string, options v1.GetOptions) (result *v1alpha1.Issuer, err error) {
+func (c *FakeIssuers) Get(name string, options v1.GetOptions) (result *v1alpha2.Issuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewGetAction(issuersResource, c.ns, name), &v1alpha1.Issuer{})
+		Invokes(testing.NewGetAction(issuersResource, c.ns, name), &v1alpha2.Issuer{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Issuer), err
+	return obj.(*v1alpha2.Issuer), err
 }
 
 // List takes label and field selectors, and returns the list of Issuers that match those selectors.
-func (c *FakeIssuers) List(opts v1.ListOptions) (result *v1alpha1.IssuerList, err error) {
+func (c *FakeIssuers) List(opts v1.ListOptions) (result *v1alpha2.IssuerList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewListAction(issuersResource, issuersKind, c.ns, opts), &v1alpha1.IssuerList{})
+		Invokes(testing.NewListAction(issuersResource, issuersKind, c.ns, opts), &v1alpha2.IssuerList{})
 
 	if obj == nil {
 		return nil, err
@@ -62,8 +62,8 @@ func (c *FakeIssuers) List(opts v1.ListOptions) (result *v1alpha1.IssuerList, er
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.IssuerList{ListMeta: obj.(*v1alpha1.IssuerList).ListMeta}
-	for _, item := range obj.(*v1alpha1.IssuerList).Items {
+	list := &v1alpha2.IssuerList{ListMeta: obj.(*v1alpha2.IssuerList).ListMeta}
+	for _, item := range obj.(*v1alpha2.IssuerList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -79,43 +79,43 @@ func (c *FakeIssuers) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a issuer and creates it.  Returns the server's representation of the issuer, and an error, if there is any.
-func (c *FakeIssuers) Create(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err error) {
+func (c *FakeIssuers) Create(issuer *v1alpha2.Issuer) (result *v1alpha2.Issuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewCreateAction(issuersResource, c.ns, issuer), &v1alpha1.Issuer{})
+		Invokes(testing.NewCreateAction(issuersResource, c.ns, issuer), &v1alpha2.Issuer{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Issuer), err
+	return obj.(*v1alpha2.Issuer), err
 }
 
 // Update takes the representation of a issuer and updates it. Returns the server's representation of the issuer, and an error, if there is any.
-func (c *FakeIssuers) Update(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err error) {
+func (c *FakeIssuers) Update(issuer *v1alpha2.Issuer) (result *v1alpha2.Issuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateAction(issuersResource, c.ns, issuer), &v1alpha1.Issuer{})
+		Invokes(testing.NewUpdateAction(issuersResource, c.ns, issuer), &v1alpha2.Issuer{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Issuer), err
+	return obj.(*v1alpha2.Issuer), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeIssuers) UpdateStatus(issuer *v1alpha1.Issuer) (*v1alpha1.Issuer, error) {
+func (c *FakeIssuers) UpdateStatus(issuer *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateSubresourceAction(issuersResource, "status", c.ns, issuer), &v1alpha1.Issuer{})
+		Invokes(testing.NewUpdateSubresourceAction(issuersResource, "status", c.ns, issuer), &v1alpha2.Issuer{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Issuer), err
+	return obj.(*v1alpha2.Issuer), err
 }
 
 // Delete takes name of the issuer and deletes it. Returns an error if one occurs.
 func (c *FakeIssuers) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewDeleteAction(issuersResource, c.ns, name), &v1alpha1.Issuer{})
+		Invokes(testing.NewDeleteAction(issuersResource, c.ns, name), &v1alpha2.Issuer{})
 
 	return err
 }
@@ -124,17 +124,17 @@ func (c *FakeIssuers) Delete(name string, options *v1.DeleteOptions) error {
 func (c *FakeIssuers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewDeleteCollectionAction(issuersResource, c.ns, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.IssuerList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.IssuerList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched issuer.
-func (c *FakeIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Issuer, err error) {
+func (c *FakeIssuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Issuer, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewPatchSubresourceAction(issuersResource, c.ns, name, pt, data, subresources...), &v1alpha1.Issuer{})
+		Invokes(testing.NewPatchSubresourceAction(issuersResource, c.ns, name, pt, data, subresources...), &v1alpha2.Issuer{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Issuer), err
+	return obj.(*v1alpha2.Issuer), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_order.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_order.go
similarity index 75%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_order.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_order.go
index a4e217b20..533bbbf75 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/fake/fake_order.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/fake/fake_order.go
@@ -19,7 +19,7 @@ limitations under the License.
 package fake
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
@@ -30,29 +30,29 @@ import (
 
 // FakeOrders implements OrderInterface
 type FakeOrders struct {
-	Fake *FakeCertmanagerV1alpha1
+	Fake *FakeCertmanagerV1alpha2
 	ns   string
 }
 
-var ordersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha1", Resource: "orders"}
+var ordersResource = schema.GroupVersionResource{Group: "certmanager.k8s.io", Version: "v1alpha2", Resource: "orders"}
 
-var ordersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha1", Kind: "Order"}
+var ordersKind = schema.GroupVersionKind{Group: "certmanager.k8s.io", Version: "v1alpha2", Kind: "Order"}
 
 // Get takes name of the order, and returns the corresponding order object, and an error if there is any.
-func (c *FakeOrders) Get(name string, options v1.GetOptions) (result *v1alpha1.Order, err error) {
+func (c *FakeOrders) Get(name string, options v1.GetOptions) (result *v1alpha2.Order, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewGetAction(ordersResource, c.ns, name), &v1alpha1.Order{})
+		Invokes(testing.NewGetAction(ordersResource, c.ns, name), &v1alpha2.Order{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Order), err
+	return obj.(*v1alpha2.Order), err
 }
 
 // List takes label and field selectors, and returns the list of Orders that match those selectors.
-func (c *FakeOrders) List(opts v1.ListOptions) (result *v1alpha1.OrderList, err error) {
+func (c *FakeOrders) List(opts v1.ListOptions) (result *v1alpha2.OrderList, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewListAction(ordersResource, ordersKind, c.ns, opts), &v1alpha1.OrderList{})
+		Invokes(testing.NewListAction(ordersResource, ordersKind, c.ns, opts), &v1alpha2.OrderList{})
 
 	if obj == nil {
 		return nil, err
@@ -62,8 +62,8 @@ func (c *FakeOrders) List(opts v1.ListOptions) (result *v1alpha1.OrderList, err
 	if label == nil {
 		label = labels.Everything()
 	}
-	list := &v1alpha1.OrderList{ListMeta: obj.(*v1alpha1.OrderList).ListMeta}
-	for _, item := range obj.(*v1alpha1.OrderList).Items {
+	list := &v1alpha2.OrderList{ListMeta: obj.(*v1alpha2.OrderList).ListMeta}
+	for _, item := range obj.(*v1alpha2.OrderList).Items {
 		if label.Matches(labels.Set(item.Labels)) {
 			list.Items = append(list.Items, item)
 		}
@@ -79,43 +79,43 @@ func (c *FakeOrders) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a order and creates it.  Returns the server's representation of the order, and an error, if there is any.
-func (c *FakeOrders) Create(order *v1alpha1.Order) (result *v1alpha1.Order, err error) {
+func (c *FakeOrders) Create(order *v1alpha2.Order) (result *v1alpha2.Order, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewCreateAction(ordersResource, c.ns, order), &v1alpha1.Order{})
+		Invokes(testing.NewCreateAction(ordersResource, c.ns, order), &v1alpha2.Order{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Order), err
+	return obj.(*v1alpha2.Order), err
 }
 
 // Update takes the representation of a order and updates it. Returns the server's representation of the order, and an error, if there is any.
-func (c *FakeOrders) Update(order *v1alpha1.Order) (result *v1alpha1.Order, err error) {
+func (c *FakeOrders) Update(order *v1alpha2.Order) (result *v1alpha2.Order, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateAction(ordersResource, c.ns, order), &v1alpha1.Order{})
+		Invokes(testing.NewUpdateAction(ordersResource, c.ns, order), &v1alpha2.Order{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Order), err
+	return obj.(*v1alpha2.Order), err
 }
 
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
-func (c *FakeOrders) UpdateStatus(order *v1alpha1.Order) (*v1alpha1.Order, error) {
+func (c *FakeOrders) UpdateStatus(order *v1alpha2.Order) (*v1alpha2.Order, error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewUpdateSubresourceAction(ordersResource, "status", c.ns, order), &v1alpha1.Order{})
+		Invokes(testing.NewUpdateSubresourceAction(ordersResource, "status", c.ns, order), &v1alpha2.Order{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Order), err
+	return obj.(*v1alpha2.Order), err
 }
 
 // Delete takes name of the order and deletes it. Returns an error if one occurs.
 func (c *FakeOrders) Delete(name string, options *v1.DeleteOptions) error {
 	_, err := c.Fake.
-		Invokes(testing.NewDeleteAction(ordersResource, c.ns, name), &v1alpha1.Order{})
+		Invokes(testing.NewDeleteAction(ordersResource, c.ns, name), &v1alpha2.Order{})
 
 	return err
 }
@@ -124,17 +124,17 @@ func (c *FakeOrders) Delete(name string, options *v1.DeleteOptions) error {
 func (c *FakeOrders) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	action := testing.NewDeleteCollectionAction(ordersResource, c.ns, listOptions)
 
-	_, err := c.Fake.Invokes(action, &v1alpha1.OrderList{})
+	_, err := c.Fake.Invokes(action, &v1alpha2.OrderList{})
 	return err
 }
 
 // Patch applies the patch and returns the patched order.
-func (c *FakeOrders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Order, err error) {
+func (c *FakeOrders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Order, err error) {
 	obj, err := c.Fake.
-		Invokes(testing.NewPatchSubresourceAction(ordersResource, c.ns, name, pt, data, subresources...), &v1alpha1.Order{})
+		Invokes(testing.NewPatchSubresourceAction(ordersResource, c.ns, name, pt, data, subresources...), &v1alpha2.Order{})
 
 	if obj == nil {
 		return nil, err
 	}
-	return obj.(*v1alpha1.Order), err
+	return obj.(*v1alpha2.Order), err
 }
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/generated_expansion.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/generated_expansion.go
similarity index 98%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/generated_expansion.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/generated_expansion.go
index 791c376ac..ee14a2d94 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/generated_expansion.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/generated_expansion.go
@@ -16,7 +16,7 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 type CertificateExpansion interface{}
 
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/issuer.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/issuer.go
similarity index 81%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/issuer.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/issuer.go
index 5cfb242f1..aa5f92ca8 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/issuer.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/issuer.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type IssuersGetter interface {
 
 // IssuerInterface has methods to work with Issuer resources.
 type IssuerInterface interface {
-	Create(*v1alpha1.Issuer) (*v1alpha1.Issuer, error)
-	Update(*v1alpha1.Issuer) (*v1alpha1.Issuer, error)
-	UpdateStatus(*v1alpha1.Issuer) (*v1alpha1.Issuer, error)
+	Create(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
+	Update(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
+	UpdateStatus(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.Issuer, error)
-	List(opts v1.ListOptions) (*v1alpha1.IssuerList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.Issuer, error)
+	List(opts v1.ListOptions) (*v1alpha2.IssuerList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Issuer, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Issuer, err error)
 	IssuerExpansion
 }
 
@@ -56,7 +56,7 @@ type issuers struct {
 }
 
 // newIssuers returns a Issuers
-func newIssuers(c *CertmanagerV1alpha1Client, namespace string) *issuers {
+func newIssuers(c *CertmanagerV1alpha2Client, namespace string) *issuers {
 	return &issuers{
 		client: c.RESTClient(),
 		ns:     namespace,
@@ -64,8 +64,8 @@ func newIssuers(c *CertmanagerV1alpha1Client, namespace string) *issuers {
 }
 
 // Get takes name of the issuer, and returns the corresponding issuer object, and an error if there is any.
-func (c *issuers) Get(name string, options v1.GetOptions) (result *v1alpha1.Issuer, err error) {
-	result = &v1alpha1.Issuer{}
+func (c *issuers) Get(name string, options v1.GetOptions) (result *v1alpha2.Issuer, err error) {
+	result = &v1alpha2.Issuer{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("issuers").
@@ -77,12 +77,12 @@ func (c *issuers) Get(name string, options v1.GetOptions) (result *v1alpha1.Issu
 }
 
 // List takes label and field selectors, and returns the list of Issuers that match those selectors.
-func (c *issuers) List(opts v1.ListOptions) (result *v1alpha1.IssuerList, err error) {
+func (c *issuers) List(opts v1.ListOptions) (result *v1alpha2.IssuerList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.IssuerList{}
+	result = &v1alpha2.IssuerList{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("issuers").
@@ -109,8 +109,8 @@ func (c *issuers) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a issuer and creates it.  Returns the server's representation of the issuer, and an error, if there is any.
-func (c *issuers) Create(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err error) {
-	result = &v1alpha1.Issuer{}
+func (c *issuers) Create(issuer *v1alpha2.Issuer) (result *v1alpha2.Issuer, err error) {
+	result = &v1alpha2.Issuer{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("issuers").
@@ -121,8 +121,8 @@ func (c *issuers) Create(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err
 }
 
 // Update takes the representation of a issuer and updates it. Returns the server's representation of the issuer, and an error, if there is any.
-func (c *issuers) Update(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err error) {
-	result = &v1alpha1.Issuer{}
+func (c *issuers) Update(issuer *v1alpha2.Issuer) (result *v1alpha2.Issuer, err error) {
+	result = &v1alpha2.Issuer{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("issuers").
@@ -136,8 +136,8 @@ func (c *issuers) Update(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *issuers) UpdateStatus(issuer *v1alpha1.Issuer) (result *v1alpha1.Issuer, err error) {
-	result = &v1alpha1.Issuer{}
+func (c *issuers) UpdateStatus(issuer *v1alpha2.Issuer) (result *v1alpha2.Issuer, err error) {
+	result = &v1alpha2.Issuer{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("issuers").
@@ -177,8 +177,8 @@ func (c *issuers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.Lis
 }
 
 // Patch applies the patch and returns the patched issuer.
-func (c *issuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Issuer, err error) {
-	result = &v1alpha1.Issuer{}
+func (c *issuers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Issuer, err error) {
+	result = &v1alpha2.Issuer{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
 		Resource("issuers").
diff --git a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/order.go b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/order.go
similarity index 82%
rename from pkg/client/clientset/versioned/typed/certmanager/v1alpha1/order.go
rename to pkg/client/clientset/versioned/typed/certmanager/v1alpha2/order.go
index f5a967105..57b739cfc 100644
--- a/pkg/client/clientset/versioned/typed/certmanager/v1alpha1/order.go
+++ b/pkg/client/clientset/versioned/typed/certmanager/v1alpha2/order.go
@@ -16,12 +16,12 @@ limitations under the License.
 
 // Code generated by client-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"time"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	scheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	types "k8s.io/apimachinery/pkg/types"
@@ -37,15 +37,15 @@ type OrdersGetter interface {
 
 // OrderInterface has methods to work with Order resources.
 type OrderInterface interface {
-	Create(*v1alpha1.Order) (*v1alpha1.Order, error)
-	Update(*v1alpha1.Order) (*v1alpha1.Order, error)
-	UpdateStatus(*v1alpha1.Order) (*v1alpha1.Order, error)
+	Create(*v1alpha2.Order) (*v1alpha2.Order, error)
+	Update(*v1alpha2.Order) (*v1alpha2.Order, error)
+	UpdateStatus(*v1alpha2.Order) (*v1alpha2.Order, error)
 	Delete(name string, options *v1.DeleteOptions) error
 	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1alpha1.Order, error)
-	List(opts v1.ListOptions) (*v1alpha1.OrderList, error)
+	Get(name string, options v1.GetOptions) (*v1alpha2.Order, error)
+	List(opts v1.ListOptions) (*v1alpha2.OrderList, error)
 	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Order, err error)
+	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Order, err error)
 	OrderExpansion
 }
 
@@ -56,7 +56,7 @@ type orders struct {
 }
 
 // newOrders returns a Orders
-func newOrders(c *CertmanagerV1alpha1Client, namespace string) *orders {
+func newOrders(c *CertmanagerV1alpha2Client, namespace string) *orders {
 	return &orders{
 		client: c.RESTClient(),
 		ns:     namespace,
@@ -64,8 +64,8 @@ func newOrders(c *CertmanagerV1alpha1Client, namespace string) *orders {
 }
 
 // Get takes name of the order, and returns the corresponding order object, and an error if there is any.
-func (c *orders) Get(name string, options v1.GetOptions) (result *v1alpha1.Order, err error) {
-	result = &v1alpha1.Order{}
+func (c *orders) Get(name string, options v1.GetOptions) (result *v1alpha2.Order, err error) {
+	result = &v1alpha2.Order{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("orders").
@@ -77,12 +77,12 @@ func (c *orders) Get(name string, options v1.GetOptions) (result *v1alpha1.Order
 }
 
 // List takes label and field selectors, and returns the list of Orders that match those selectors.
-func (c *orders) List(opts v1.ListOptions) (result *v1alpha1.OrderList, err error) {
+func (c *orders) List(opts v1.ListOptions) (result *v1alpha2.OrderList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
 	}
-	result = &v1alpha1.OrderList{}
+	result = &v1alpha2.OrderList{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("orders").
@@ -109,8 +109,8 @@ func (c *orders) Watch(opts v1.ListOptions) (watch.Interface, error) {
 }
 
 // Create takes the representation of a order and creates it.  Returns the server's representation of the order, and an error, if there is any.
-func (c *orders) Create(order *v1alpha1.Order) (result *v1alpha1.Order, err error) {
-	result = &v1alpha1.Order{}
+func (c *orders) Create(order *v1alpha2.Order) (result *v1alpha2.Order, err error) {
+	result = &v1alpha2.Order{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("orders").
@@ -121,8 +121,8 @@ func (c *orders) Create(order *v1alpha1.Order) (result *v1alpha1.Order, err erro
 }
 
 // Update takes the representation of a order and updates it. Returns the server's representation of the order, and an error, if there is any.
-func (c *orders) Update(order *v1alpha1.Order) (result *v1alpha1.Order, err error) {
-	result = &v1alpha1.Order{}
+func (c *orders) Update(order *v1alpha2.Order) (result *v1alpha2.Order, err error) {
+	result = &v1alpha2.Order{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("orders").
@@ -136,8 +136,8 @@ func (c *orders) Update(order *v1alpha1.Order) (result *v1alpha1.Order, err erro
 // UpdateStatus was generated because the type contains a Status member.
 // Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
 
-func (c *orders) UpdateStatus(order *v1alpha1.Order) (result *v1alpha1.Order, err error) {
-	result = &v1alpha1.Order{}
+func (c *orders) UpdateStatus(order *v1alpha2.Order) (result *v1alpha2.Order, err error) {
+	result = &v1alpha2.Order{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("orders").
@@ -177,8 +177,8 @@ func (c *orders) DeleteCollection(options *v1.DeleteOptions, listOptions v1.List
 }
 
 // Patch applies the patch and returns the patched order.
-func (c *orders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Order, err error) {
-	result = &v1alpha1.Order{}
+func (c *orders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Order, err error) {
+	result = &v1alpha2.Order{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
 		Resource("orders").
diff --git a/pkg/client/informers/externalversions/BUILD.bazel b/pkg/client/informers/externalversions/BUILD.bazel
index 0c1887059..83f710d98 100644
--- a/pkg/client/informers/externalversions/BUILD.bazel
+++ b/pkg/client/informers/externalversions/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/client/informers/externalversions",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/client/informers/externalversions/certmanager:go_default_library",
         "//pkg/client/informers/externalversions/internalinterfaces:go_default_library",
diff --git a/pkg/client/informers/externalversions/certmanager/BUILD.bazel b/pkg/client/informers/externalversions/certmanager/BUILD.bazel
index d936efd81..7badc727e 100644
--- a/pkg/client/informers/externalversions/certmanager/BUILD.bazel
+++ b/pkg/client/informers/externalversions/certmanager/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/client/informers/externalversions/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/informers/externalversions/certmanager/v1alpha2:go_default_library",
         "//pkg/client/informers/externalversions/internalinterfaces:go_default_library",
     ],
 )
@@ -22,7 +22,7 @@ filegroup(
     name = "all-srcs",
     srcs = [
         ":package-srcs",
-        "//pkg/client/informers/externalversions/certmanager/v1alpha1:all-srcs",
+        "//pkg/client/informers/externalversions/certmanager/v1alpha2:all-srcs",
     ],
     tags = ["automanaged"],
     visibility = ["//visibility:public"],
diff --git a/pkg/client/informers/externalversions/certmanager/interface.go b/pkg/client/informers/externalversions/certmanager/interface.go
index 442774850..91de9c2e4 100644
--- a/pkg/client/informers/externalversions/certmanager/interface.go
+++ b/pkg/client/informers/externalversions/certmanager/interface.go
@@ -19,14 +19,14 @@ limitations under the License.
 package certmanager
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager/v1alpha2"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
 )
 
 // Interface provides access to each of this group's versions.
 type Interface interface {
-	// V1alpha1 provides access to shared informers for resources in V1alpha1.
-	V1alpha1() v1alpha1.Interface
+	// V1alpha2 provides access to shared informers for resources in V1alpha2.
+	V1alpha2() v1alpha2.Interface
 }
 
 type group struct {
@@ -40,7 +40,7 @@ func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakList
 	return &group{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
 }
 
-// V1alpha1 returns a new v1alpha1.Interface.
-func (g *group) V1alpha1() v1alpha1.Interface {
-	return v1alpha1.New(g.factory, g.namespace, g.tweakListOptions)
+// V1alpha2 returns a new v1alpha2.Interface.
+func (g *group) V1alpha2() v1alpha2.Interface {
+	return v1alpha2.New(g.factory, g.namespace, g.tweakListOptions)
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/BUILD.bazel b/pkg/client/informers/externalversions/certmanager/v1alpha2/BUILD.bazel
similarity index 86%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/BUILD.bazel
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/BUILD.bazel
index 1bacfecbd..304fa31ae 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/BUILD.bazel
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/BUILD.bazel
@@ -11,13 +11,13 @@ go_library(
         "issuer.go",
         "order.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager/v1alpha1",
+    importpath = "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager/v1alpha2",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/client/informers/externalversions/internalinterfaces:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/watch:go_default_library",
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/certificate.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/certificate.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/certificate.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/certificate.go
index 35009d5d8..5a901b786 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/certificate.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/certificate.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // Certificates.
 type CertificateInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.CertificateLister
+	Lister() v1alpha2.CertificateLister
 }
 
 type certificateInformer struct {
@@ -61,16 +61,16 @@ func NewFilteredCertificateInformer(client versioned.Interface, namespace string
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Certificates(namespace).List(options)
+				return client.CertmanagerV1alpha2().Certificates(namespace).List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Certificates(namespace).Watch(options)
+				return client.CertmanagerV1alpha2().Certificates(namespace).Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.Certificate{},
+		&certmanagerv1alpha2.Certificate{},
 		resyncPeriod,
 		indexers,
 	)
@@ -81,9 +81,9 @@ func (f *certificateInformer) defaultInformer(client versioned.Interface, resync
 }
 
 func (f *certificateInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.Certificate{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.Certificate{}, f.defaultInformer)
 }
 
-func (f *certificateInformer) Lister() v1alpha1.CertificateLister {
-	return v1alpha1.NewCertificateLister(f.Informer().GetIndexer())
+func (f *certificateInformer) Lister() v1alpha2.CertificateLister {
+	return v1alpha2.NewCertificateLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/certificaterequest.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/certificaterequest.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/certificaterequest.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/certificaterequest.go
index 637b331ae..593136310 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/certificaterequest.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/certificaterequest.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // CertificateRequests.
 type CertificateRequestInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.CertificateRequestLister
+	Lister() v1alpha2.CertificateRequestLister
 }
 
 type certificateRequestInformer struct {
@@ -61,16 +61,16 @@ func NewFilteredCertificateRequestInformer(client versioned.Interface, namespace
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().CertificateRequests(namespace).List(options)
+				return client.CertmanagerV1alpha2().CertificateRequests(namespace).List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().CertificateRequests(namespace).Watch(options)
+				return client.CertmanagerV1alpha2().CertificateRequests(namespace).Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.CertificateRequest{},
+		&certmanagerv1alpha2.CertificateRequest{},
 		resyncPeriod,
 		indexers,
 	)
@@ -81,9 +81,9 @@ func (f *certificateRequestInformer) defaultInformer(client versioned.Interface,
 }
 
 func (f *certificateRequestInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.CertificateRequest{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.CertificateRequest{}, f.defaultInformer)
 }
 
-func (f *certificateRequestInformer) Lister() v1alpha1.CertificateRequestLister {
-	return v1alpha1.NewCertificateRequestLister(f.Informer().GetIndexer())
+func (f *certificateRequestInformer) Lister() v1alpha2.CertificateRequestLister {
+	return v1alpha2.NewCertificateRequestLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/challenge.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/challenge.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/challenge.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/challenge.go
index e1429d95e..6f0b7aeb6 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/challenge.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/challenge.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // Challenges.
 type ChallengeInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.ChallengeLister
+	Lister() v1alpha2.ChallengeLister
 }
 
 type challengeInformer struct {
@@ -61,16 +61,16 @@ func NewFilteredChallengeInformer(client versioned.Interface, namespace string,
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Challenges(namespace).List(options)
+				return client.CertmanagerV1alpha2().Challenges(namespace).List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Challenges(namespace).Watch(options)
+				return client.CertmanagerV1alpha2().Challenges(namespace).Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.Challenge{},
+		&certmanagerv1alpha2.Challenge{},
 		resyncPeriod,
 		indexers,
 	)
@@ -81,9 +81,9 @@ func (f *challengeInformer) defaultInformer(client versioned.Interface, resyncPe
 }
 
 func (f *challengeInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.Challenge{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.Challenge{}, f.defaultInformer)
 }
 
-func (f *challengeInformer) Lister() v1alpha1.ChallengeLister {
-	return v1alpha1.NewChallengeLister(f.Informer().GetIndexer())
+func (f *challengeInformer) Lister() v1alpha2.ChallengeLister {
+	return v1alpha2.NewChallengeLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/clusterissuer.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/clusterissuer.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/clusterissuer.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/clusterissuer.go
index 026bef19e..112f2c91b 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/clusterissuer.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/clusterissuer.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // ClusterIssuers.
 type ClusterIssuerInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.ClusterIssuerLister
+	Lister() v1alpha2.ClusterIssuerLister
 }
 
 type clusterIssuerInformer struct {
@@ -60,16 +60,16 @@ func NewFilteredClusterIssuerInformer(client versioned.Interface, resyncPeriod t
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().ClusterIssuers().List(options)
+				return client.CertmanagerV1alpha2().ClusterIssuers().List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().ClusterIssuers().Watch(options)
+				return client.CertmanagerV1alpha2().ClusterIssuers().Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.ClusterIssuer{},
+		&certmanagerv1alpha2.ClusterIssuer{},
 		resyncPeriod,
 		indexers,
 	)
@@ -80,9 +80,9 @@ func (f *clusterIssuerInformer) defaultInformer(client versioned.Interface, resy
 }
 
 func (f *clusterIssuerInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.ClusterIssuer{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.ClusterIssuer{}, f.defaultInformer)
 }
 
-func (f *clusterIssuerInformer) Lister() v1alpha1.ClusterIssuerLister {
-	return v1alpha1.NewClusterIssuerLister(f.Informer().GetIndexer())
+func (f *clusterIssuerInformer) Lister() v1alpha2.ClusterIssuerLister {
+	return v1alpha2.NewClusterIssuerLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/interface.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/interface.go
similarity index 99%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/interface.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/interface.go
index 07ed0a6c6..43fd331bf 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/interface.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/interface.go
@@ -16,7 +16,7 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/issuer.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/issuer.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/issuer.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/issuer.go
index 8d1c755cd..7a302c7ad 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/issuer.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/issuer.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // Issuers.
 type IssuerInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.IssuerLister
+	Lister() v1alpha2.IssuerLister
 }
 
 type issuerInformer struct {
@@ -61,16 +61,16 @@ func NewFilteredIssuerInformer(client versioned.Interface, namespace string, res
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Issuers(namespace).List(options)
+				return client.CertmanagerV1alpha2().Issuers(namespace).List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Issuers(namespace).Watch(options)
+				return client.CertmanagerV1alpha2().Issuers(namespace).Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.Issuer{},
+		&certmanagerv1alpha2.Issuer{},
 		resyncPeriod,
 		indexers,
 	)
@@ -81,9 +81,9 @@ func (f *issuerInformer) defaultInformer(client versioned.Interface, resyncPerio
 }
 
 func (f *issuerInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.Issuer{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.Issuer{}, f.defaultInformer)
 }
 
-func (f *issuerInformer) Lister() v1alpha1.IssuerLister {
-	return v1alpha1.NewIssuerLister(f.Informer().GetIndexer())
+func (f *issuerInformer) Lister() v1alpha2.IssuerLister {
+	return v1alpha2.NewIssuerLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/certmanager/v1alpha1/order.go b/pkg/client/informers/externalversions/certmanager/v1alpha2/order.go
similarity index 84%
rename from pkg/client/informers/externalversions/certmanager/v1alpha1/order.go
rename to pkg/client/informers/externalversions/certmanager/v1alpha2/order.go
index 0b43a9e81..2274ddb48 100644
--- a/pkg/client/informers/externalversions/certmanager/v1alpha1/order.go
+++ b/pkg/client/informers/externalversions/certmanager/v1alpha2/order.go
@@ -16,15 +16,15 @@ limitations under the License.
 
 // Code generated by informer-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	time "time"
 
-	certmanagerv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanagerv1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	versioned "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	internalinterfaces "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/internalinterfaces"
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 	watch "k8s.io/apimachinery/pkg/watch"
@@ -35,7 +35,7 @@ import (
 // Orders.
 type OrderInformer interface {
 	Informer() cache.SharedIndexInformer
-	Lister() v1alpha1.OrderLister
+	Lister() v1alpha2.OrderLister
 }
 
 type orderInformer struct {
@@ -61,16 +61,16 @@ func NewFilteredOrderInformer(client versioned.Interface, namespace string, resy
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Orders(namespace).List(options)
+				return client.CertmanagerV1alpha2().Orders(namespace).List(options)
 			},
 			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
 				if tweakListOptions != nil {
 					tweakListOptions(&options)
 				}
-				return client.CertmanagerV1alpha1().Orders(namespace).Watch(options)
+				return client.CertmanagerV1alpha2().Orders(namespace).Watch(options)
 			},
 		},
-		&certmanagerv1alpha1.Order{},
+		&certmanagerv1alpha2.Order{},
 		resyncPeriod,
 		indexers,
 	)
@@ -81,9 +81,9 @@ func (f *orderInformer) defaultInformer(client versioned.Interface, resyncPeriod
 }
 
 func (f *orderInformer) Informer() cache.SharedIndexInformer {
-	return f.factory.InformerFor(&certmanagerv1alpha1.Order{}, f.defaultInformer)
+	return f.factory.InformerFor(&certmanagerv1alpha2.Order{}, f.defaultInformer)
 }
 
-func (f *orderInformer) Lister() v1alpha1.OrderLister {
-	return v1alpha1.NewOrderLister(f.Informer().GetIndexer())
+func (f *orderInformer) Lister() v1alpha2.OrderLister {
+	return v1alpha2.NewOrderLister(f.Informer().GetIndexer())
 }
diff --git a/pkg/client/informers/externalversions/generic.go b/pkg/client/informers/externalversions/generic.go
index da18e6db0..94c24e34b 100644
--- a/pkg/client/informers/externalversions/generic.go
+++ b/pkg/client/informers/externalversions/generic.go
@@ -21,7 +21,7 @@ package externalversions
 import (
 	"fmt"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	schema "k8s.io/apimachinery/pkg/runtime/schema"
 	cache "k8s.io/client-go/tools/cache"
 )
@@ -52,19 +52,19 @@ func (f *genericInformer) Lister() cache.GenericLister {
 // TODO extend this to unknown resources with a client pool
 func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
 	switch resource {
-	// Group=certmanager.k8s.io, Version=v1alpha1
-	case v1alpha1.SchemeGroupVersion.WithResource("certificates"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().Certificates().Informer()}, nil
-	case v1alpha1.SchemeGroupVersion.WithResource("certificaterequests"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().CertificateRequests().Informer()}, nil
-	case v1alpha1.SchemeGroupVersion.WithResource("challenges"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().Challenges().Informer()}, nil
-	case v1alpha1.SchemeGroupVersion.WithResource("clusterissuers"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().ClusterIssuers().Informer()}, nil
-	case v1alpha1.SchemeGroupVersion.WithResource("issuers"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().Issuers().Informer()}, nil
-	case v1alpha1.SchemeGroupVersion.WithResource("orders"):
-		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha1().Orders().Informer()}, nil
+	// Group=certmanager.k8s.io, Version=v1alpha2
+	case v1alpha2.SchemeGroupVersion.WithResource("certificates"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().Certificates().Informer()}, nil
+	case v1alpha2.SchemeGroupVersion.WithResource("certificaterequests"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().CertificateRequests().Informer()}, nil
+	case v1alpha2.SchemeGroupVersion.WithResource("challenges"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().Challenges().Informer()}, nil
+	case v1alpha2.SchemeGroupVersion.WithResource("clusterissuers"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().ClusterIssuers().Informer()}, nil
+	case v1alpha2.SchemeGroupVersion.WithResource("issuers"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().Issuers().Informer()}, nil
+	case v1alpha2.SchemeGroupVersion.WithResource("orders"):
+		return &genericInformer{resource: resource.GroupResource(), informer: f.Certmanager().V1alpha2().Orders().Informer()}, nil
 
 	}
 
diff --git a/pkg/client/listers/certmanager/v1alpha1/BUILD.bazel b/pkg/client/listers/certmanager/v1alpha2/BUILD.bazel
similarity index 90%
rename from pkg/client/listers/certmanager/v1alpha1/BUILD.bazel
rename to pkg/client/listers/certmanager/v1alpha2/BUILD.bazel
index b67640ed2..d1621c3e7 100644
--- a/pkg/client/listers/certmanager/v1alpha1/BUILD.bazel
+++ b/pkg/client/listers/certmanager/v1alpha2/BUILD.bazel
@@ -11,10 +11,10 @@ go_library(
         "issuer.go",
         "order.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1",
+    importpath = "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/api/errors:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
         "//vendor/k8s.io/client-go/tools/cache:go_default_library",
diff --git a/pkg/client/listers/certmanager/v1alpha1/certificate.go b/pkg/client/listers/certmanager/v1alpha2/certificate.go
similarity index 81%
rename from pkg/client/listers/certmanager/v1alpha1/certificate.go
rename to pkg/client/listers/certmanager/v1alpha2/certificate.go
index 8e4719501..587edf15f 100644
--- a/pkg/client/listers/certmanager/v1alpha1/certificate.go
+++ b/pkg/client/listers/certmanager/v1alpha2/certificate.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,7 +28,7 @@ import (
 // CertificateLister helps list Certificates.
 type CertificateLister interface {
 	// List lists all Certificates in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.Certificate, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Certificate, err error)
 	// Certificates returns an object that can list and get Certificates.
 	Certificates(namespace string) CertificateNamespaceLister
 	CertificateListerExpansion
@@ -45,9 +45,9 @@ func NewCertificateLister(indexer cache.Indexer) CertificateLister {
 }
 
 // List lists all Certificates in the indexer.
-func (s *certificateLister) List(selector labels.Selector) (ret []*v1alpha1.Certificate, err error) {
+func (s *certificateLister) List(selector labels.Selector) (ret []*v1alpha2.Certificate, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Certificate))
+		ret = append(ret, m.(*v1alpha2.Certificate))
 	})
 	return ret, err
 }
@@ -60,9 +60,9 @@ func (s *certificateLister) Certificates(namespace string) CertificateNamespaceL
 // CertificateNamespaceLister helps list and get Certificates.
 type CertificateNamespaceLister interface {
 	// List lists all Certificates in the indexer for a given namespace.
-	List(selector labels.Selector) (ret []*v1alpha1.Certificate, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Certificate, err error)
 	// Get retrieves the Certificate from the indexer for a given namespace and name.
-	Get(name string) (*v1alpha1.Certificate, error)
+	Get(name string) (*v1alpha2.Certificate, error)
 	CertificateNamespaceListerExpansion
 }
 
@@ -74,21 +74,21 @@ type certificateNamespaceLister struct {
 }
 
 // List lists all Certificates in the indexer for a given namespace.
-func (s certificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Certificate, err error) {
+func (s certificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Certificate, err error) {
 	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Certificate))
+		ret = append(ret, m.(*v1alpha2.Certificate))
 	})
 	return ret, err
 }
 
 // Get retrieves the Certificate from the indexer for a given namespace and name.
-func (s certificateNamespaceLister) Get(name string) (*v1alpha1.Certificate, error) {
+func (s certificateNamespaceLister) Get(name string) (*v1alpha2.Certificate, error) {
 	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("certificate"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("certificate"), name)
 	}
-	return obj.(*v1alpha1.Certificate), nil
+	return obj.(*v1alpha2.Certificate), nil
 }
diff --git a/pkg/client/listers/certmanager/v1alpha1/certificaterequest.go b/pkg/client/listers/certmanager/v1alpha2/certificaterequest.go
similarity index 82%
rename from pkg/client/listers/certmanager/v1alpha1/certificaterequest.go
rename to pkg/client/listers/certmanager/v1alpha2/certificaterequest.go
index 3e34b55b7..f18ff51d6 100644
--- a/pkg/client/listers/certmanager/v1alpha1/certificaterequest.go
+++ b/pkg/client/listers/certmanager/v1alpha2/certificaterequest.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,7 +28,7 @@ import (
 // CertificateRequestLister helps list CertificateRequests.
 type CertificateRequestLister interface {
 	// List lists all CertificateRequests in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.CertificateRequest, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.CertificateRequest, err error)
 	// CertificateRequests returns an object that can list and get CertificateRequests.
 	CertificateRequests(namespace string) CertificateRequestNamespaceLister
 	CertificateRequestListerExpansion
@@ -45,9 +45,9 @@ func NewCertificateRequestLister(indexer cache.Indexer) CertificateRequestLister
 }
 
 // List lists all CertificateRequests in the indexer.
-func (s *certificateRequestLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateRequest, err error) {
+func (s *certificateRequestLister) List(selector labels.Selector) (ret []*v1alpha2.CertificateRequest, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.CertificateRequest))
+		ret = append(ret, m.(*v1alpha2.CertificateRequest))
 	})
 	return ret, err
 }
@@ -60,9 +60,9 @@ func (s *certificateRequestLister) CertificateRequests(namespace string) Certifi
 // CertificateRequestNamespaceLister helps list and get CertificateRequests.
 type CertificateRequestNamespaceLister interface {
 	// List lists all CertificateRequests in the indexer for a given namespace.
-	List(selector labels.Selector) (ret []*v1alpha1.CertificateRequest, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.CertificateRequest, err error)
 	// Get retrieves the CertificateRequest from the indexer for a given namespace and name.
-	Get(name string) (*v1alpha1.CertificateRequest, error)
+	Get(name string) (*v1alpha2.CertificateRequest, error)
 	CertificateRequestNamespaceListerExpansion
 }
 
@@ -74,21 +74,21 @@ type certificateRequestNamespaceLister struct {
 }
 
 // List lists all CertificateRequests in the indexer for a given namespace.
-func (s certificateRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateRequest, err error) {
+func (s certificateRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.CertificateRequest, err error) {
 	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.CertificateRequest))
+		ret = append(ret, m.(*v1alpha2.CertificateRequest))
 	})
 	return ret, err
 }
 
 // Get retrieves the CertificateRequest from the indexer for a given namespace and name.
-func (s certificateRequestNamespaceLister) Get(name string) (*v1alpha1.CertificateRequest, error) {
+func (s certificateRequestNamespaceLister) Get(name string) (*v1alpha2.CertificateRequest, error) {
 	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("certificaterequest"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("certificaterequest"), name)
 	}
-	return obj.(*v1alpha1.CertificateRequest), nil
+	return obj.(*v1alpha2.CertificateRequest), nil
 }
diff --git a/pkg/client/listers/certmanager/v1alpha1/challenge.go b/pkg/client/listers/certmanager/v1alpha2/challenge.go
similarity index 81%
rename from pkg/client/listers/certmanager/v1alpha1/challenge.go
rename to pkg/client/listers/certmanager/v1alpha2/challenge.go
index 0444e8afb..9f4bb6cb1 100644
--- a/pkg/client/listers/certmanager/v1alpha1/challenge.go
+++ b/pkg/client/listers/certmanager/v1alpha2/challenge.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,7 +28,7 @@ import (
 // ChallengeLister helps list Challenges.
 type ChallengeLister interface {
 	// List lists all Challenges in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.Challenge, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Challenge, err error)
 	// Challenges returns an object that can list and get Challenges.
 	Challenges(namespace string) ChallengeNamespaceLister
 	ChallengeListerExpansion
@@ -45,9 +45,9 @@ func NewChallengeLister(indexer cache.Indexer) ChallengeLister {
 }
 
 // List lists all Challenges in the indexer.
-func (s *challengeLister) List(selector labels.Selector) (ret []*v1alpha1.Challenge, err error) {
+func (s *challengeLister) List(selector labels.Selector) (ret []*v1alpha2.Challenge, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Challenge))
+		ret = append(ret, m.(*v1alpha2.Challenge))
 	})
 	return ret, err
 }
@@ -60,9 +60,9 @@ func (s *challengeLister) Challenges(namespace string) ChallengeNamespaceLister
 // ChallengeNamespaceLister helps list and get Challenges.
 type ChallengeNamespaceLister interface {
 	// List lists all Challenges in the indexer for a given namespace.
-	List(selector labels.Selector) (ret []*v1alpha1.Challenge, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Challenge, err error)
 	// Get retrieves the Challenge from the indexer for a given namespace and name.
-	Get(name string) (*v1alpha1.Challenge, error)
+	Get(name string) (*v1alpha2.Challenge, error)
 	ChallengeNamespaceListerExpansion
 }
 
@@ -74,21 +74,21 @@ type challengeNamespaceLister struct {
 }
 
 // List lists all Challenges in the indexer for a given namespace.
-func (s challengeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Challenge, err error) {
+func (s challengeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Challenge, err error) {
 	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Challenge))
+		ret = append(ret, m.(*v1alpha2.Challenge))
 	})
 	return ret, err
 }
 
 // Get retrieves the Challenge from the indexer for a given namespace and name.
-func (s challengeNamespaceLister) Get(name string) (*v1alpha1.Challenge, error) {
+func (s challengeNamespaceLister) Get(name string) (*v1alpha2.Challenge, error) {
 	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("challenge"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("challenge"), name)
 	}
-	return obj.(*v1alpha1.Challenge), nil
+	return obj.(*v1alpha2.Challenge), nil
 }
diff --git a/pkg/client/listers/certmanager/v1alpha1/clusterissuer.go b/pkg/client/listers/certmanager/v1alpha2/clusterissuer.go
similarity index 78%
rename from pkg/client/listers/certmanager/v1alpha1/clusterissuer.go
rename to pkg/client/listers/certmanager/v1alpha2/clusterissuer.go
index 38ffb285b..0fa10dd46 100644
--- a/pkg/client/listers/certmanager/v1alpha1/clusterissuer.go
+++ b/pkg/client/listers/certmanager/v1alpha2/clusterissuer.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,9 +28,9 @@ import (
 // ClusterIssuerLister helps list ClusterIssuers.
 type ClusterIssuerLister interface {
 	// List lists all ClusterIssuers in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.ClusterIssuer, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.ClusterIssuer, err error)
 	// Get retrieves the ClusterIssuer from the index for a given name.
-	Get(name string) (*v1alpha1.ClusterIssuer, error)
+	Get(name string) (*v1alpha2.ClusterIssuer, error)
 	ClusterIssuerListerExpansion
 }
 
@@ -45,21 +45,21 @@ func NewClusterIssuerLister(indexer cache.Indexer) ClusterIssuerLister {
 }
 
 // List lists all ClusterIssuers in the indexer.
-func (s *clusterIssuerLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIssuer, err error) {
+func (s *clusterIssuerLister) List(selector labels.Selector) (ret []*v1alpha2.ClusterIssuer, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.ClusterIssuer))
+		ret = append(ret, m.(*v1alpha2.ClusterIssuer))
 	})
 	return ret, err
 }
 
 // Get retrieves the ClusterIssuer from the index for a given name.
-func (s *clusterIssuerLister) Get(name string) (*v1alpha1.ClusterIssuer, error) {
+func (s *clusterIssuerLister) Get(name string) (*v1alpha2.ClusterIssuer, error) {
 	obj, exists, err := s.indexer.GetByKey(name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("clusterissuer"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("clusterissuer"), name)
 	}
-	return obj.(*v1alpha1.ClusterIssuer), nil
+	return obj.(*v1alpha2.ClusterIssuer), nil
 }
diff --git a/pkg/client/listers/certmanager/v1alpha1/expansion_generated.go b/pkg/client/listers/certmanager/v1alpha2/expansion_generated.go
similarity index 99%
rename from pkg/client/listers/certmanager/v1alpha1/expansion_generated.go
rename to pkg/client/listers/certmanager/v1alpha2/expansion_generated.go
index 450b6400f..1553878f5 100644
--- a/pkg/client/listers/certmanager/v1alpha1/expansion_generated.go
+++ b/pkg/client/listers/certmanager/v1alpha2/expansion_generated.go
@@ -16,7 +16,7 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 // CertificateListerExpansion allows custom methods to be added to
 // CertificateLister.
diff --git a/pkg/client/listers/certmanager/v1alpha1/issuer.go b/pkg/client/listers/certmanager/v1alpha2/issuer.go
similarity index 81%
rename from pkg/client/listers/certmanager/v1alpha1/issuer.go
rename to pkg/client/listers/certmanager/v1alpha2/issuer.go
index 93b738408..b3579fb15 100644
--- a/pkg/client/listers/certmanager/v1alpha1/issuer.go
+++ b/pkg/client/listers/certmanager/v1alpha2/issuer.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,7 +28,7 @@ import (
 // IssuerLister helps list Issuers.
 type IssuerLister interface {
 	// List lists all Issuers in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.Issuer, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Issuer, err error)
 	// Issuers returns an object that can list and get Issuers.
 	Issuers(namespace string) IssuerNamespaceLister
 	IssuerListerExpansion
@@ -45,9 +45,9 @@ func NewIssuerLister(indexer cache.Indexer) IssuerLister {
 }
 
 // List lists all Issuers in the indexer.
-func (s *issuerLister) List(selector labels.Selector) (ret []*v1alpha1.Issuer, err error) {
+func (s *issuerLister) List(selector labels.Selector) (ret []*v1alpha2.Issuer, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Issuer))
+		ret = append(ret, m.(*v1alpha2.Issuer))
 	})
 	return ret, err
 }
@@ -60,9 +60,9 @@ func (s *issuerLister) Issuers(namespace string) IssuerNamespaceLister {
 // IssuerNamespaceLister helps list and get Issuers.
 type IssuerNamespaceLister interface {
 	// List lists all Issuers in the indexer for a given namespace.
-	List(selector labels.Selector) (ret []*v1alpha1.Issuer, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Issuer, err error)
 	// Get retrieves the Issuer from the indexer for a given namespace and name.
-	Get(name string) (*v1alpha1.Issuer, error)
+	Get(name string) (*v1alpha2.Issuer, error)
 	IssuerNamespaceListerExpansion
 }
 
@@ -74,21 +74,21 @@ type issuerNamespaceLister struct {
 }
 
 // List lists all Issuers in the indexer for a given namespace.
-func (s issuerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Issuer, err error) {
+func (s issuerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Issuer, err error) {
 	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Issuer))
+		ret = append(ret, m.(*v1alpha2.Issuer))
 	})
 	return ret, err
 }
 
 // Get retrieves the Issuer from the indexer for a given namespace and name.
-func (s issuerNamespaceLister) Get(name string) (*v1alpha1.Issuer, error) {
+func (s issuerNamespaceLister) Get(name string) (*v1alpha2.Issuer, error) {
 	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("issuer"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("issuer"), name)
 	}
-	return obj.(*v1alpha1.Issuer), nil
+	return obj.(*v1alpha2.Issuer), nil
 }
diff --git a/pkg/client/listers/certmanager/v1alpha1/order.go b/pkg/client/listers/certmanager/v1alpha2/order.go
similarity index 81%
rename from pkg/client/listers/certmanager/v1alpha1/order.go
rename to pkg/client/listers/certmanager/v1alpha2/order.go
index 597b47e67..28abc5e9e 100644
--- a/pkg/client/listers/certmanager/v1alpha1/order.go
+++ b/pkg/client/listers/certmanager/v1alpha2/order.go
@@ -16,10 +16,10 @@ limitations under the License.
 
 // Code generated by lister-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/tools/cache"
@@ -28,7 +28,7 @@ import (
 // OrderLister helps list Orders.
 type OrderLister interface {
 	// List lists all Orders in the indexer.
-	List(selector labels.Selector) (ret []*v1alpha1.Order, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Order, err error)
 	// Orders returns an object that can list and get Orders.
 	Orders(namespace string) OrderNamespaceLister
 	OrderListerExpansion
@@ -45,9 +45,9 @@ func NewOrderLister(indexer cache.Indexer) OrderLister {
 }
 
 // List lists all Orders in the indexer.
-func (s *orderLister) List(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+func (s *orderLister) List(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Order))
+		ret = append(ret, m.(*v1alpha2.Order))
 	})
 	return ret, err
 }
@@ -60,9 +60,9 @@ func (s *orderLister) Orders(namespace string) OrderNamespaceLister {
 // OrderNamespaceLister helps list and get Orders.
 type OrderNamespaceLister interface {
 	// List lists all Orders in the indexer for a given namespace.
-	List(selector labels.Selector) (ret []*v1alpha1.Order, err error)
+	List(selector labels.Selector) (ret []*v1alpha2.Order, err error)
 	// Get retrieves the Order from the indexer for a given namespace and name.
-	Get(name string) (*v1alpha1.Order, error)
+	Get(name string) (*v1alpha2.Order, error)
 	OrderNamespaceListerExpansion
 }
 
@@ -74,21 +74,21 @@ type orderNamespaceLister struct {
 }
 
 // List lists all Orders in the indexer for a given namespace.
-func (s orderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+func (s orderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
-		ret = append(ret, m.(*v1alpha1.Order))
+		ret = append(ret, m.(*v1alpha2.Order))
 	})
 	return ret, err
 }
 
 // Get retrieves the Order from the indexer for a given namespace and name.
-func (s orderNamespaceLister) Get(name string) (*v1alpha1.Order, error) {
+func (s orderNamespaceLister) Get(name string) (*v1alpha2.Order, error) {
 	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
 	if err != nil {
 		return nil, err
 	}
 	if !exists {
-		return nil, errors.NewNotFound(v1alpha1.Resource("order"), name)
+		return nil, errors.NewNotFound(v1alpha2.Resource("order"), name)
 	}
-	return obj.(*v1alpha1.Order), nil
+	return obj.(*v1alpha2.Order), nil
 }
diff --git a/pkg/controller/BUILD.bazel b/pkg/controller/BUILD.bazel
index 3b525a0f9..4f2dab7c9 100644
--- a/pkg/controller/BUILD.bazel
+++ b/pkg/controller/BUILD.bazel
@@ -13,7 +13,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/client/informers/externalversions:go_default_library",
         "//pkg/logs:go_default_library",
@@ -64,7 +64,7 @@ go_test(
     srcs = ["helper_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
     ],
 )
diff --git a/pkg/controller/acmechallenges/BUILD.bazel b/pkg/controller/acmechallenges/BUILD.bazel
index 803f4c73c..f4d4aa63f 100644
--- a/pkg/controller/acmechallenges/BUILD.bazel
+++ b/pkg/controller/acmechallenges/BUILD.bazel
@@ -12,9 +12,9 @@ go_library(
     deps = [
         "//pkg/acme:go_default_library",
         "//pkg/acme/client:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/acmechallenges/scheduler:go_default_library",
         "//pkg/feature:go_default_library",
@@ -44,7 +44,7 @@ go_test(
     deps = [
         "//pkg/acme/client:go_default_library",
         "//pkg/acme/fake:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/issuer:go_default_library",
         "//test/unit/gen:go_default_library",
diff --git a/pkg/controller/acmechallenges/controller.go b/pkg/controller/acmechallenges/controller.go
index 5ef4ea798..b5972cc25 100644
--- a/pkg/controller/acmechallenges/controller.go
+++ b/pkg/controller/acmechallenges/controller.go
@@ -30,7 +30,7 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/acmechallenges/scheduler"
 	"github.com/jetstack/cert-manager/pkg/issuer"
@@ -84,8 +84,8 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	c.queue = workqueue.NewNamedRateLimitingQueue(workqueue.NewItemExponentialFailureRateLimiter(time.Second*5, time.Minute*30), ControllerName)
 
 	// obtain references to all the informers used by this controller
-	challengeInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Challenges()
-	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Issuers()
+	challengeInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Challenges()
+	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Issuers()
 	secretInformer := ctx.KubeSharedInformerFactory.Core().V1().Secrets()
 	// we register these informers here so the HTTP01 solver has a synced
 	// cache when managing pod/service/ingress resources
@@ -111,7 +111,7 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	// if we are running in non-namespaced mode (i.e. --namespace=""), we also
 	// register event handlers and obtain a lister for clusterissuers.
 	if ctx.Namespace == "" {
-		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers()
+		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers()
 		mustSync = append(mustSync, clusterIssuerInformer.Informer().HasSynced)
 		c.clusterIssuerLister = clusterIssuerInformer.Lister()
 	}
@@ -163,7 +163,7 @@ func (c *controller) runScheduler(ctx context.Context) {
 		ch = ch.DeepCopy()
 		ch.Status.Processing = true
 
-		_, err := c.cmClient.CertmanagerV1alpha1().Challenges(ch.Namespace).Update(ch)
+		_, err := c.cmClient.CertmanagerV1alpha2().Challenges(ch.Namespace).Update(ch)
 		if err != nil {
 			log.Error(err, "error scheduling challenge for processing")
 			return
diff --git a/pkg/controller/acmechallenges/scheduler/BUILD.bazel b/pkg/controller/acmechallenges/scheduler/BUILD.bazel
index 70849704d..0bc0f926c 100644
--- a/pkg/controller/acmechallenges/scheduler/BUILD.bazel
+++ b/pkg/controller/acmechallenges/scheduler/BUILD.bazel
@@ -7,8 +7,8 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/acme:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/logs:go_default_library",
         "//vendor/github.com/go-logr/logr:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
@@ -20,7 +20,7 @@ go_test(
     srcs = ["scheduler_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned/fake:go_default_library",
         "//pkg/client/informers/externalversions:go_default_library",
         "//pkg/util:go_default_library",
diff --git a/pkg/controller/acmechallenges/scheduler/scheduler.go b/pkg/controller/acmechallenges/scheduler/scheduler.go
index 50257b3da..e79c6430e 100644
--- a/pkg/controller/acmechallenges/scheduler/scheduler.go
+++ b/pkg/controller/acmechallenges/scheduler/scheduler.go
@@ -24,8 +24,8 @@ import (
 	"k8s.io/apimachinery/pkg/labels"
 
 	"github.com/jetstack/cert-manager/pkg/acme"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/logs"
 )
 
diff --git a/pkg/controller/acmechallenges/scheduler/scheduler_test.go b/pkg/controller/acmechallenges/scheduler/scheduler_test.go
index 1968be9bd..4dc21cfa0 100644
--- a/pkg/controller/acmechallenges/scheduler/scheduler_test.go
+++ b/pkg/controller/acmechallenges/scheduler/scheduler_test.go
@@ -26,7 +26,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/diff"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/client/clientset/versioned/fake"
 	cminformers "github.com/jetstack/cert-manager/pkg/client/informers/externalversions"
 	"github.com/jetstack/cert-manager/pkg/util"
@@ -303,7 +303,7 @@ func TestScheduleN(t *testing.T) {
 		t.Run(test.name, func(t *testing.T) {
 			cl := fake.NewSimpleClientset()
 			factory := cminformers.NewSharedInformerFactory(cl, 0)
-			challengesInformer := factory.Certmanager().V1alpha1().Challenges()
+			challengesInformer := factory.Certmanager().V1alpha2().Challenges()
 			for _, ch := range test.challenges {
 				challengesInformer.Informer().GetIndexer().Add(ch)
 			}
diff --git a/pkg/controller/acmechallenges/sync.go b/pkg/controller/acmechallenges/sync.go
index 665a36433..842d98840 100644
--- a/pkg/controller/acmechallenges/sync.go
+++ b/pkg/controller/acmechallenges/sync.go
@@ -27,7 +27,7 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/feature"
 	dnsutil "github.com/jetstack/cert-manager/pkg/issuer/acme/dns/util"
@@ -69,7 +69,7 @@ func (c *controller) Sync(ctx context.Context, ch *cmapi.Challenge) (err error)
 		if reflect.DeepEqual(oldChal.Status, ch.Status) && len(oldChal.Finalizers) == len(ch.Finalizers) {
 			return
 		}
-		_, updateErr := c.cmClient.CertmanagerV1alpha1().Challenges(ch.Namespace).Update(ch)
+		_, updateErr := c.cmClient.CertmanagerV1alpha2().Challenges(ch.Namespace).Update(ch)
 		if err != nil {
 			err = utilerrors.NewAggregate([]error{err, updateErr})
 		}
diff --git a/pkg/controller/acmechallenges/sync_test.go b/pkg/controller/acmechallenges/sync_test.go
index c569ef4a6..bcd22cefd 100644
--- a/pkg/controller/acmechallenges/sync_test.go
+++ b/pkg/controller/acmechallenges/sync_test.go
@@ -26,7 +26,7 @@ import (
 
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
 	acmefake "github.com/jetstack/cert-manager/pkg/acme/fake"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 	"github.com/jetstack/cert-manager/test/unit/gen"
@@ -34,32 +34,32 @@ import (
 )
 
 // Present the challenge value with the given solver.
-func (f *fakeSolver) Present(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (f *fakeSolver) Present(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	return f.fakePresent(ctx, issuer, ch)
 }
 
 // Check should return Error only if propagation check cannot be performed.
 // It MUST return `false, nil` if can contact all relevant services and all is
 // doing is waiting for propagation
-func (f *fakeSolver) Check(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (f *fakeSolver) Check(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	return f.fakeCheck(ctx, issuer, ch)
 }
 
 // CleanUp will remove challenge records for a given solver.
 // This may involve deleting resources in the Kubernetes API Server, or
 // communicating with other external components (e.g. DNS providers).
-func (f *fakeSolver) CleanUp(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (f *fakeSolver) CleanUp(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	return f.fakeCleanUp(ctx, issuer, ch)
 }
 
 type fakeSolver struct {
-	fakePresent func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error
-	fakeCheck   func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error
-	fakeCleanUp func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error
+	fakePresent func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error
+	fakeCheck   func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error
+	fakeCleanUp func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error
 }
 
 type testT struct {
-	challenge  *v1alpha1.Challenge
+	challenge  *v1alpha2.Challenge
 	builder    *testpkg.Builder
 	httpSolver *fakeSolver
 	dnsSolver  *fakeSolver
@@ -68,17 +68,17 @@ type testT struct {
 }
 
 func TestSyncHappyPath(t *testing.T) {
-	testIssuerHTTP01Enabled := gen.Issuer("testissuer", gen.SetIssuerACME(v1alpha1.ACMEIssuer{
-		Solvers: []v1alpha1.ACMEChallengeSolver{
+	testIssuerHTTP01Enabled := gen.Issuer("testissuer", gen.SetIssuerACME(v1alpha2.ACMEIssuer{
+		Solvers: []v1alpha2.ACMEChallengeSolver{
 			{
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 				},
 			},
 		},
 	}))
 	baseChallenge := gen.Challenge("testchal",
-		gen.SetChallengeIssuer(v1alpha1.ObjectReference{
+		gen.SetChallengeIssuer(v1alpha2.ObjectReference{
 			Name: "testissuer",
 		}),
 	)
@@ -95,11 +95,11 @@ func TestSyncHappyPath(t *testing.T) {
 					gen.SetChallengeURL("testurl"),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(true),
 							gen.SetChallengeURL("testurl"),
-							gen.SetChallengeState(v1alpha1.Pending),
+							gen.SetChallengeState(v1alpha2.Pending),
 						))),
 				},
 			},
@@ -113,14 +113,14 @@ func TestSyncHappyPath(t *testing.T) {
 			challenge: gen.ChallengeFrom(baseChallenge,
 				gen.SetChallengeProcessing(true),
 				gen.SetChallengeURL("testurl"),
-				gen.SetChallengeState(v1alpha1.Pending),
+				gen.SetChallengeState(v1alpha2.Pending),
 				gen.SetChallengeType("http-01"),
 			),
 			httpSolver: &fakeSolver{
-				fakePresent: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakePresent: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return nil
 				},
-				fakeCheck: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakeCheck: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return fmt.Errorf("some error")
 				},
 			},
@@ -128,15 +128,15 @@ func TestSyncHappyPath(t *testing.T) {
 				CertManagerObjects: []runtime.Object{gen.ChallengeFrom(baseChallenge,
 					gen.SetChallengeProcessing(true),
 					gen.SetChallengeURL("testurl"),
-					gen.SetChallengeState(v1alpha1.Pending),
+					gen.SetChallengeState(v1alpha2.Pending),
 					gen.SetChallengeType("http-01"),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(true),
 							gen.SetChallengeURL("testurl"),
-							gen.SetChallengeState(v1alpha1.Pending),
+							gen.SetChallengeState(v1alpha2.Pending),
 							gen.SetChallengePresented(true),
 							gen.SetChallengeType("http-01"),
 							gen.SetChallengeReason("Waiting for http-01 challenge propagation: some error"),
@@ -152,15 +152,15 @@ func TestSyncHappyPath(t *testing.T) {
 				gen.SetChallengeProcessing(true),
 				gen.SetChallengeURL("testurl"),
 				gen.SetChallengeDNSName("test.com"),
-				gen.SetChallengeState(v1alpha1.Pending),
+				gen.SetChallengeState(v1alpha2.Pending),
 				gen.SetChallengeType("http-01"),
 				gen.SetChallengePresented(true),
 			),
 			httpSolver: &fakeSolver{
-				fakeCheck: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakeCheck: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return nil
 				},
-				fakeCleanUp: func(context.Context, v1alpha1.GenericIssuer, *v1alpha1.Challenge) error {
+				fakeCleanUp: func(context.Context, v1alpha2.GenericIssuer, *v1alpha2.Challenge) error {
 					return nil
 				},
 			},
@@ -169,17 +169,17 @@ func TestSyncHappyPath(t *testing.T) {
 					gen.SetChallengeProcessing(true),
 					gen.SetChallengeURL("testurl"),
 					gen.SetChallengeDNSName("test.com"),
-					gen.SetChallengeState(v1alpha1.Pending),
+					gen.SetChallengeState(v1alpha2.Pending),
 					gen.SetChallengeType("http-01"),
 					gen.SetChallengePresented(true),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(true),
 							gen.SetChallengeURL("testurl"),
 							gen.SetChallengeDNSName("test.com"),
-							gen.SetChallengeState(v1alpha1.Valid),
+							gen.SetChallengeState(v1alpha2.Valid),
 							gen.SetChallengeType("http-01"),
 							gen.SetChallengePresented(true),
 							gen.SetChallengeReason("Successfully authorized domain"),
@@ -205,15 +205,15 @@ func TestSyncHappyPath(t *testing.T) {
 			challenge: gen.ChallengeFrom(baseChallenge,
 				gen.SetChallengeProcessing(true),
 				gen.SetChallengeURL("testurl"),
-				gen.SetChallengeState(v1alpha1.Pending),
+				gen.SetChallengeState(v1alpha2.Pending),
 				gen.SetChallengeType("http-01"),
 				gen.SetChallengePresented(true),
 			),
 			httpSolver: &fakeSolver{
-				fakeCheck: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakeCheck: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return nil
 				},
-				fakeCleanUp: func(context.Context, v1alpha1.GenericIssuer, *v1alpha1.Challenge) error {
+				fakeCleanUp: func(context.Context, v1alpha2.GenericIssuer, *v1alpha2.Challenge) error {
 					return nil
 				},
 			},
@@ -221,16 +221,16 @@ func TestSyncHappyPath(t *testing.T) {
 				CertManagerObjects: []runtime.Object{gen.ChallengeFrom(baseChallenge,
 					gen.SetChallengeProcessing(true),
 					gen.SetChallengeURL("testurl"),
-					gen.SetChallengeState(v1alpha1.Pending),
+					gen.SetChallengeState(v1alpha2.Pending),
 					gen.SetChallengeType("http-01"),
 					gen.SetChallengePresented(true),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(true),
 							gen.SetChallengeURL("testurl"),
-							gen.SetChallengeState(v1alpha1.Invalid),
+							gen.SetChallengeState(v1alpha2.Invalid),
 							gen.SetChallengeType("http-01"),
 							gen.SetChallengePresented(true),
 							gen.SetChallengeReason("Error accepting authorization: acme: authorization for identifier example.com is invalid"),
@@ -263,12 +263,12 @@ func TestSyncHappyPath(t *testing.T) {
 			challenge: gen.ChallengeFrom(baseChallenge,
 				gen.SetChallengeProcessing(true),
 				gen.SetChallengeURL("testurl"),
-				gen.SetChallengeState(v1alpha1.Valid),
+				gen.SetChallengeState(v1alpha2.Valid),
 				gen.SetChallengeType("http-01"),
 				gen.SetChallengePresented(true),
 			),
 			httpSolver: &fakeSolver{
-				fakeCleanUp: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakeCleanUp: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return nil
 				},
 			},
@@ -276,16 +276,16 @@ func TestSyncHappyPath(t *testing.T) {
 				CertManagerObjects: []runtime.Object{gen.ChallengeFrom(baseChallenge,
 					gen.SetChallengeProcessing(true),
 					gen.SetChallengeURL("testurl"),
-					gen.SetChallengeState(v1alpha1.Valid),
+					gen.SetChallengeState(v1alpha2.Valid),
 					gen.SetChallengeType("http-01"),
 					gen.SetChallengePresented(true),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(false),
 							gen.SetChallengeURL("testurl"),
-							gen.SetChallengeState(v1alpha1.Valid),
+							gen.SetChallengeState(v1alpha2.Valid),
 							gen.SetChallengeType("http-01"),
 							gen.SetChallengePresented(false),
 						))),
@@ -296,12 +296,12 @@ func TestSyncHappyPath(t *testing.T) {
 			challenge: gen.ChallengeFrom(baseChallenge,
 				gen.SetChallengeProcessing(true),
 				gen.SetChallengeURL("testurl"),
-				gen.SetChallengeState(v1alpha1.Invalid),
+				gen.SetChallengeState(v1alpha2.Invalid),
 				gen.SetChallengeType("http-01"),
 				gen.SetChallengePresented(true),
 			),
 			httpSolver: &fakeSolver{
-				fakeCleanUp: func(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+				fakeCleanUp: func(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 					return nil
 				},
 			},
@@ -309,16 +309,16 @@ func TestSyncHappyPath(t *testing.T) {
 				CertManagerObjects: []runtime.Object{gen.ChallengeFrom(baseChallenge,
 					gen.SetChallengeProcessing(true),
 					gen.SetChallengeURL("testurl"),
-					gen.SetChallengeState(v1alpha1.Invalid),
+					gen.SetChallengeState(v1alpha2.Invalid),
 					gen.SetChallengeType("http-01"),
 					gen.SetChallengePresented(true),
 				), testIssuerHTTP01Enabled},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), gen.DefaultTestNamespace,
 						gen.ChallengeFrom(baseChallenge,
 							gen.SetChallengeProcessing(false),
 							gen.SetChallengeURL("testurl"),
-							gen.SetChallengeState(v1alpha1.Invalid),
+							gen.SetChallengeState(v1alpha2.Invalid),
 							gen.SetChallengeType("http-01"),
 							gen.SetChallengePresented(false),
 						))),
@@ -342,11 +342,11 @@ func runTest(t *testing.T, test testT) {
 	c := &controller{}
 	c.Register(test.builder.Context)
 	c.helper = issuer.NewHelper(
-		test.builder.SharedInformerFactory.Certmanager().V1alpha1().Issuers().Lister(),
-		test.builder.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers().Lister(),
+		test.builder.SharedInformerFactory.Certmanager().V1alpha2().Issuers().Lister(),
+		test.builder.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers().Lister(),
 	)
 	c.acmeHelper = &acmefake.Helper{
-		ClientForIssuerFunc: func(iss v1alpha1.GenericIssuer) (acmecl.Interface, error) {
+		ClientForIssuerFunc: func(iss v1alpha2.GenericIssuer) (acmecl.Interface, error) {
 			return test.acmeClient, nil
 		},
 	}
diff --git a/pkg/controller/acmeorders/BUILD.bazel b/pkg/controller/acmeorders/BUILD.bazel
index 8a4730384..69aba9ff9 100644
--- a/pkg/controller/acmeorders/BUILD.bazel
+++ b/pkg/controller/acmeorders/BUILD.bazel
@@ -13,9 +13,9 @@ go_library(
     deps = [
         "//pkg/acme:go_default_library",
         "//pkg/acme/client:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/acmeorders/selectors:go_default_library",
         "//pkg/issuer:go_default_library",
@@ -65,7 +65,7 @@ go_test(
     deps = [
         "//pkg/acme/client:go_default_library",
         "//pkg/acme/fake:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//test/unit/gen:go_default_library",
         "//third_party/crypto/acme:go_default_library",
diff --git a/pkg/controller/acmeorders/checks.go b/pkg/controller/acmeorders/checks.go
index f623fd0cc..6dc87a8bf 100644
--- a/pkg/controller/acmeorders/checks.go
+++ b/pkg/controller/acmeorders/checks.go
@@ -19,7 +19,7 @@ package acmeorders
 import (
 	"fmt"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/apimachinery/pkg/util/runtime"
 )
diff --git a/pkg/controller/acmeorders/controller.go b/pkg/controller/acmeorders/controller.go
index 420a5f336..5efcc9390 100644
--- a/pkg/controller/acmeorders/controller.go
+++ b/pkg/controller/acmeorders/controller.go
@@ -30,7 +30,7 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
@@ -75,9 +75,9 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	c.queue = workqueue.NewNamedRateLimitingQueue(workqueue.NewItemExponentialFailureRateLimiter(time.Second*5, time.Minute*30), ControllerName)
 
 	// obtain references to all the informers used by this controller
-	orderInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Orders()
-	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Issuers()
-	challengeInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Challenges()
+	orderInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Orders()
+	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Issuers()
+	challengeInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Challenges()
 	secretInformer := ctx.KubeSharedInformerFactory.Core().V1().Secrets()
 	// build a list of InformerSynced functions that will be returned by the Register method.
 	// the controller will only begin processing items once all of these informers have synced.
@@ -97,7 +97,7 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	// if we are running in non-namespaced mode (i.e. --namespace=""), we also
 	// register event handlers and obtain a lister for clusterissuers.
 	if ctx.Namespace == "" {
-		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers()
+		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers()
 		mustSync = append(mustSync, clusterIssuerInformer.Informer().HasSynced)
 		c.clusterIssuerLister = clusterIssuerInformer.Lister()
 		// register handler function for clusterissuer resources
diff --git a/pkg/controller/acmeorders/selectors/BUILD.bazel b/pkg/controller/acmeorders/selectors/BUILD.bazel
index fbb5cfa8f..1890a2e22 100644
--- a/pkg/controller/acmeorders/selectors/BUILD.bazel
+++ b/pkg/controller/acmeorders/selectors/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller/acmeorders/selectors",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/github.com/miekg/dns:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
     ],
@@ -36,7 +36,7 @@ go_test(
     srcs = ["dns_zones_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
     ],
 )
diff --git a/pkg/controller/acmeorders/selectors/dns_names.go b/pkg/controller/acmeorders/selectors/dns_names.go
index 4c88ff13f..e08417d67 100644
--- a/pkg/controller/acmeorders/selectors/dns_names.go
+++ b/pkg/controller/acmeorders/selectors/dns_names.go
@@ -19,7 +19,7 @@ package selectors
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func DNSNames(sel cmapi.CertificateDNSNameSelector) Selector {
diff --git a/pkg/controller/acmeorders/selectors/dns_zones.go b/pkg/controller/acmeorders/selectors/dns_zones.go
index 4c14ba55b..d65b060a8 100644
--- a/pkg/controller/acmeorders/selectors/dns_zones.go
+++ b/pkg/controller/acmeorders/selectors/dns_zones.go
@@ -20,7 +20,7 @@ import (
 	"github.com/miekg/dns"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func DNSZones(sel cmapi.CertificateDNSNameSelector) Selector {
diff --git a/pkg/controller/acmeorders/selectors/dns_zones_test.go b/pkg/controller/acmeorders/selectors/dns_zones_test.go
index 97a5c3e3c..8968ac490 100644
--- a/pkg/controller/acmeorders/selectors/dns_zones_test.go
+++ b/pkg/controller/acmeorders/selectors/dns_zones_test.go
@@ -21,7 +21,7 @@ import (
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func TestDNSZones(t *testing.T) {
diff --git a/pkg/controller/acmeorders/selectors/labels.go b/pkg/controller/acmeorders/selectors/labels.go
index 5acec8194..dc75ca2e9 100644
--- a/pkg/controller/acmeorders/selectors/labels.go
+++ b/pkg/controller/acmeorders/selectors/labels.go
@@ -19,7 +19,7 @@ package selectors
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func Labels(sel cmapi.CertificateDNSNameSelector) Selector {
diff --git a/pkg/controller/acmeorders/sync.go b/pkg/controller/acmeorders/sync.go
index f51dd9056..c8ca4730d 100644
--- a/pkg/controller/acmeorders/sync.go
+++ b/pkg/controller/acmeorders/sync.go
@@ -32,7 +32,7 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
 	acmeapi "github.com/jetstack/cert-manager/third_party/crypto/acme"
@@ -54,7 +54,7 @@ func (c *controller) Sync(ctx context.Context, o *cmapi.Order) (err error) {
 			return
 		}
 		log.Info("updating Order resource status")
-		_, updateErr := c.cmClient.CertmanagerV1alpha1().Orders(o.Namespace).Update(o)
+		_, updateErr := c.cmClient.CertmanagerV1alpha2().Orders(o.Namespace).Update(o)
 		if err != nil {
 			log.Error(err, "failed to update status")
 			err = utilerrors.NewAggregate([]error{err, updateErr})
@@ -307,7 +307,7 @@ func (c *controller) anyRequiredChallengesDoNotExist(requiredChallenges []cmapi.
 
 func (c *controller) createRequiredChallenges(o *cmapi.Order, requiredChallenges []cmapi.Challenge) error {
 	for _, ch := range requiredChallenges {
-		_, err := c.cmClient.CertmanagerV1alpha1().Challenges(ch.Namespace).Create(&ch)
+		_, err := c.cmClient.CertmanagerV1alpha2().Challenges(ch.Namespace).Create(&ch)
 		if apierrors.IsAlreadyExists(err) {
 			continue
 		}
@@ -335,7 +335,7 @@ func (c *controller) deleteLeftoverChallenges(o *cmapi.Order, requiredChallenges
 	}
 
 	for _, ch := range leftover {
-		if err := c.cmClient.CertmanagerV1alpha1().Challenges(ch.Namespace).Delete(ch.Name, nil); err != nil {
+		if err := c.cmClient.CertmanagerV1alpha2().Challenges(ch.Namespace).Delete(ch.Name, nil); err != nil {
 			return err
 		}
 	}
@@ -350,7 +350,7 @@ func (c *controller) deleteAllChallenges(o *cmapi.Order) error {
 	}
 
 	for _, ch := range challenges {
-		if err := c.cmClient.CertmanagerV1alpha1().Challenges(ch.Namespace).Delete(ch.Name, nil); err != nil {
+		if err := c.cmClient.CertmanagerV1alpha2().Challenges(ch.Namespace).Delete(ch.Name, nil); err != nil {
 			return err
 		}
 	}
diff --git a/pkg/controller/acmeorders/sync_test.go b/pkg/controller/acmeorders/sync_test.go
index c5cdf640f..93ed0d60a 100644
--- a/pkg/controller/acmeorders/sync_test.go
+++ b/pkg/controller/acmeorders/sync_test.go
@@ -28,7 +28,7 @@ import (
 
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
 	acmefake "github.com/jetstack/cert-manager/pkg/acme/fake"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 	acmeapi "github.com/jetstack/cert-manager/third_party/crypto/acme"
@@ -39,38 +39,38 @@ func TestSyncHappyPath(t *testing.T) {
 	nowMetaTime := metav1.NewTime(nowTime)
 	fixedClock := fakeclock.NewFakeClock(nowTime)
 
-	testIssuerHTTP01TestCom := gen.Issuer("testissuer", gen.SetIssuerACME(v1alpha1.ACMEIssuer{
-		Solvers: []v1alpha1.ACMEChallengeSolver{
+	testIssuerHTTP01TestCom := gen.Issuer("testissuer", gen.SetIssuerACME(v1alpha2.ACMEIssuer{
+		Solvers: []v1alpha2.ACMEChallengeSolver{
 			{
-				Selector: &v1alpha1.CertificateDNSNameSelector{
+				Selector: &v1alpha2.CertificateDNSNameSelector{
 					DNSNames: []string{"test.com"},
 				},
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 				},
 			},
 		},
 	}))
 	testOrder := gen.Order("testorder",
 		gen.SetOrderCommonName("test.com"),
-		gen.SetOrderIssuer(v1alpha1.ObjectReference{
+		gen.SetOrderIssuer(v1alpha2.ObjectReference{
 			Name: testIssuerHTTP01TestCom.Name,
 		}),
 	)
 
-	pendingStatus := v1alpha1.OrderStatus{
-		State:       v1alpha1.Pending,
+	pendingStatus := v1alpha2.OrderStatus{
+		State:       v1alpha2.Pending,
 		URL:         "http://testurl.com/abcde",
 		FinalizeURL: "http://testurl.com/abcde/finalize",
-		Authorizations: []v1alpha1.ACMEAuthorization{
+		Authorizations: []v1alpha2.ACMEAuthorization{
 			{
 				URL:        "http://authzurl",
 				Identifier: "test.com",
-				Challenges: []v1alpha1.ACMEChallenge{
+				Challenges: []v1alpha2.ACMEChallenge{
 					{
 						URL:   "http://chalurl",
 						Token: "token",
-						Type:  v1alpha1.ACMEChallengeTypeHTTP01,
+						Type:  v1alpha2.ACMEChallengeTypeHTTP01,
 					},
 				},
 			},
@@ -79,17 +79,17 @@ func TestSyncHappyPath(t *testing.T) {
 
 	testOrderPending := gen.OrderFrom(testOrder, gen.SetOrderStatus(pendingStatus))
 	testOrderInvalid := testOrderPending.DeepCopy()
-	testOrderInvalid.Status.State = v1alpha1.Invalid
+	testOrderInvalid.Status.State = v1alpha2.Invalid
 	testOrderInvalid.Status.FailureTime = &nowMetaTime
 	testOrderValid := testOrderPending.DeepCopy()
-	testOrderValid.Status.State = v1alpha1.Valid
+	testOrderValid.Status.State = v1alpha2.Valid
 	// pem encoded word 'test'
 	testOrderValid.Status.Certificate = []byte(`-----BEGIN CERTIFICATE-----
 dGVzdA==
 -----END CERTIFICATE-----
 `)
 	testOrderReady := testOrderPending.DeepCopy()
-	testOrderReady.Status.State = v1alpha1.Ready
+	testOrderReady.Status.State = v1alpha2.Ready
 
 	fakeHTTP01ACMECl := &acmecl.FakeACME{
 		FakeHTTP01ChallengeResponse: func(s string) (string, error) {
@@ -102,9 +102,9 @@ dGVzdA==
 		t.Fatalf("error building Challenge resource test fixture: %v", err)
 	}
 	testAuthorizationChallengeValid := testAuthorizationChallenge.DeepCopy()
-	testAuthorizationChallengeValid.Status.State = v1alpha1.Valid
+	testAuthorizationChallengeValid.Status.State = v1alpha2.Valid
 	testAuthorizationChallengeInvalid := testAuthorizationChallenge.DeepCopy()
-	testAuthorizationChallengeInvalid.Status.State = v1alpha1.Invalid
+	testAuthorizationChallengeInvalid.Status.State = v1alpha2.Invalid
 
 	testACMEAuthorizationPending := &acmeapi.Authorization{
 		URL:    "http://authzurl",
@@ -151,12 +151,12 @@ dGVzdA==
 			builder: &testpkg.Builder{
 				CertManagerObjects: []runtime.Object{testIssuerHTTP01TestCom, testOrder},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("orders"), testOrderPending.Namespace,
-						gen.OrderFrom(testOrder, gen.SetOrderStatus(v1alpha1.OrderStatus{
-							State:       v1alpha1.Pending,
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("orders"), testOrderPending.Namespace,
+						gen.OrderFrom(testOrder, gen.SetOrderStatus(v1alpha2.OrderStatus{
+							State:       v1alpha2.Pending,
 							URL:         "http://testurl.com/abcde",
 							FinalizeURL: "http://testurl.com/abcde/finalize",
-							Authorizations: []v1alpha1.ACMEAuthorization{
+							Authorizations: []v1alpha2.ACMEAuthorization{
 								{
 									URL: "http://authzurl",
 								},
@@ -183,7 +183,7 @@ dGVzdA==
 			builder: &testpkg.Builder{
 				CertManagerObjects: []runtime.Object{testIssuerHTTP01TestCom, testOrderPending},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewCreateAction(v1alpha1.SchemeGroupVersion.WithResource("challenges"), testAuthorizationChallenge.Namespace, testAuthorizationChallenge)),
+					testpkg.NewAction(coretesting.NewCreateAction(v1alpha2.SchemeGroupVersion.WithResource("challenges"), testAuthorizationChallenge.Namespace, testAuthorizationChallenge)),
 				},
 				ExpectedEvents: []string{
 					`Normal Created Created Challenge resource "testorder-1335133199" for domain "test.com"`,
@@ -214,7 +214,7 @@ dGVzdA==
 			builder: &testpkg.Builder{
 				CertManagerObjects: []runtime.Object{testIssuerHTTP01TestCom, testOrderPending, testAuthorizationChallengeValid},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("orders"), testOrderReady.Namespace, testOrderReady)),
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("orders"), testOrderReady.Namespace, testOrderReady)),
 				},
 			},
 			acmeClient: &acmecl.FakeACME{
@@ -232,7 +232,7 @@ dGVzdA==
 			builder: &testpkg.Builder{
 				CertManagerObjects: []runtime.Object{testIssuerHTTP01TestCom, testOrderReady, testAuthorizationChallengeValid},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("orders"), testOrderValid.Namespace, testOrderValid)),
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("orders"), testOrderValid.Namespace, testOrderValid)),
 				},
 				ExpectedEvents: []string{
 					"Normal Complete Order completed successfully",
@@ -257,7 +257,7 @@ dGVzdA==
 			builder: &testpkg.Builder{
 				CertManagerObjects: []runtime.Object{testIssuerHTTP01TestCom, testOrderPending, testAuthorizationChallengeInvalid},
 				ExpectedActions: []testpkg.Action{
-					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha1.SchemeGroupVersion.WithResource("orders"), testOrderInvalid.Namespace, testOrderInvalid)),
+					testpkg.NewAction(coretesting.NewUpdateAction(v1alpha2.SchemeGroupVersion.WithResource("orders"), testOrderInvalid.Namespace, testOrderInvalid)),
 				},
 			},
 			acmeClient: &acmecl.FakeACME{
@@ -317,7 +317,7 @@ dGVzdA==
 }
 
 type testT struct {
-	order      *v1alpha1.Order
+	order      *v1alpha2.Order
 	builder    *testpkg.Builder
 	acmeClient acmecl.Interface
 	expectErr  bool
@@ -331,7 +331,7 @@ func runTest(t *testing.T, test testT) {
 	c := &controller{}
 	c.Register(test.builder.Context)
 	c.acmeHelper = &acmefake.Helper{
-		ClientForIssuerFunc: func(iss v1alpha1.GenericIssuer) (acmecl.Interface, error) {
+		ClientForIssuerFunc: func(iss v1alpha2.GenericIssuer) (acmecl.Interface, error) {
 			return test.acmeClient, nil
 		},
 	}
diff --git a/pkg/controller/acmeorders/util.go b/pkg/controller/acmeorders/util.go
index 37ef50c68..0de437cef 100644
--- a/pkg/controller/acmeorders/util.go
+++ b/pkg/controller/acmeorders/util.go
@@ -26,7 +26,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/acmeorders/selectors"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
diff --git a/pkg/controller/acmeorders/util_test.go b/pkg/controller/acmeorders/util_test.go
index 8beeca7ff..4cd5b2f95 100644
--- a/pkg/controller/acmeorders/util_test.go
+++ b/pkg/controller/acmeorders/util_test.go
@@ -26,7 +26,7 @@ import (
 	"k8s.io/utils/pointer"
 
 	acmecl "github.com/jetstack/cert-manager/pkg/acme/client"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func TestChallengeSpecForAuthorization(t *testing.T) {
@@ -41,95 +41,95 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 	}
 	// define some reusable solvers that are used in multiple unit tests
-	emptySelectorSolverHTTP01 := v1alpha1.ACMEChallengeSolver{
-		HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-			Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+	emptySelectorSolverHTTP01 := v1alpha2.ACMEChallengeSolver{
+		HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+			Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 				Name: "empty-selector-solver",
 			},
 		},
 	}
-	emptySelectorSolverDNS01 := v1alpha1.ACMEChallengeSolver{
-		DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-			Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+	emptySelectorSolverDNS01 := v1alpha2.ACMEChallengeSolver{
+		DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+			Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 				Email: "test-cloudflare-email",
 			},
 		},
 	}
-	nonMatchingSelectorSolver := v1alpha1.ACMEChallengeSolver{
-		Selector: &v1alpha1.CertificateDNSNameSelector{
+	nonMatchingSelectorSolver := v1alpha2.ACMEChallengeSolver{
+		Selector: &v1alpha2.CertificateDNSNameSelector{
 			MatchLabels: map[string]string{
 				"label":    "does-not-exist",
 				"does-not": "match",
 			},
 		},
-		HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-			Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+		HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+			Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 				Name: "non-matching-selector-solver",
 			},
 		},
 	}
-	exampleComDNSNameSelectorSolver := v1alpha1.ACMEChallengeSolver{
-		Selector: &v1alpha1.CertificateDNSNameSelector{
+	exampleComDNSNameSelectorSolver := v1alpha2.ACMEChallengeSolver{
+		Selector: &v1alpha2.CertificateDNSNameSelector{
 			DNSNames: []string{"example.com"},
 		},
-		HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-			Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+		HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+			Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 				Name: "example-com-dns-name-selector-solver",
 			},
 		},
 	}
 	// define ACME challenges that are used during tests
-	acmeChallengeHTTP01 := &v1alpha1.ACMEChallenge{
+	acmeChallengeHTTP01 := &v1alpha2.ACMEChallenge{
 		Type:  "http-01",
 		Token: "http-01-token",
 	}
-	acmeChallengeDNS01 := &v1alpha1.ACMEChallenge{
+	acmeChallengeDNS01 := &v1alpha2.ACMEChallenge{
 		Type:  "dns-01",
 		Token: "dns-01-token",
 	}
 
 	tests := map[string]struct {
 		acmeClient acmecl.Interface
-		issuer     v1alpha1.GenericIssuer
-		order      *v1alpha1.Order
-		authz      *v1alpha1.ACMEAuthorization
+		issuer     v1alpha2.GenericIssuer
+		order      *v1alpha2.Order
+		authz      *v1alpha2.ACMEAuthorization
 
-		expectedChallengeSpec *v1alpha1.ChallengeSpec
+		expectedChallengeSpec *v1alpha2.ChallengeSpec
 		expectedError         bool
 	}{
 		"should override the ingress name to edit if override annotation is specified": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{emptySelectorSolverHTTP01},
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{emptySelectorSolverHTTP01},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Annotations: map[string]string{
-						v1alpha1.ACMECertificateHTTP01IngressNameOverride: "test-name-to-override",
+						v1alpha2.ACMECertificateHTTP01IngressNameOverride: "test-name-to-override",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "test-name-to-override",
 						},
 					},
@@ -138,37 +138,37 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should override the ingress class to edit if override annotation is specified": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{emptySelectorSolverHTTP01},
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{emptySelectorSolverHTTP01},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Annotations: map[string]string{
-						v1alpha1.ACMECertificateHTTP01IngressClassOverride: "test-class-to-override",
+						v1alpha2.ACMECertificateHTTP01IngressClassOverride: "test-class-to-override",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Class: pointer.StringPtr("test-class-to-override"),
 						},
 					},
@@ -177,58 +177,58 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should return an error if both ingress class and name override annotations are set": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{emptySelectorSolverHTTP01},
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{emptySelectorSolverHTTP01},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Annotations: map[string]string{
-						v1alpha1.ACMECertificateHTTP01IngressNameOverride:  "test-name-to-override",
-						v1alpha1.ACMECertificateHTTP01IngressClassOverride: "test-class-to-override",
+						v1alpha2.ACMECertificateHTTP01IngressNameOverride:  "test-name-to-override",
+						v1alpha2.ACMECertificateHTTP01IngressClassOverride: "test-class-to-override",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
 			expectedError: true,
 		},
 		"should ignore HTTP01 override annotations if DNS01 solver is chosen": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{emptySelectorSolverDNS01},
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{emptySelectorSolverDNS01},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Annotations: map[string]string{
-						v1alpha1.ACMECertificateHTTP01IngressNameOverride: "test-name-to-override",
+						v1alpha2.ACMECertificateHTTP01IngressNameOverride: "test-name-to-override",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "dns-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeDNS01.Token,
@@ -238,25 +238,25 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should use configured default solver when no others are present": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{emptySelectorSolverHTTP01},
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{emptySelectorSolverHTTP01},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -266,15 +266,15 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should use configured default solver when no others are present but selector is non-nil": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									Selector: &v1alpha2.CertificateDNSNameSelector{},
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "empty-selector-solver",
 										},
 									},
@@ -284,24 +284,24 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{},
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "empty-selector-solver",
 						},
 					},
@@ -310,11 +310,11 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should use configured default solver when others do not match": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverHTTP01,
 								nonMatchingSelectorSolver,
 							},
@@ -322,16 +322,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -341,11 +341,11 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should use DNS01 solver over HTTP01 if challenge is of type DNS01": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverHTTP01,
 								emptySelectorSolverDNS01,
 							},
@@ -353,16 +353,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "dns-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeDNS01.Token,
@@ -372,35 +372,35 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should return an error if none match": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								nonMatchingSelectorSolver,
 							},
 						},
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
 			expectedError: true,
 		},
 		"uses correct solver when selector explicitly names dnsName": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverHTTP01,
 								exampleComDNSNameSelectorSolver,
 							},
@@ -408,16 +408,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -427,11 +427,11 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"uses default solver if dnsName does not match": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverHTTP01,
 								exampleComDNSNameSelectorSolver,
 							},
@@ -439,16 +439,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"notexample.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "notexample.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "notexample.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -458,21 +458,21 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if two solvers specify the same dnsName, the one with the most labels should be chosen": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								exampleComDNSNameSelectorSolver,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label": "exists",
 										},
 										DNSNames: []string{"example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dns-name-labels-selector-solver",
 										},
 									},
@@ -482,34 +482,34 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label": "exists",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						MatchLabels: map[string]string{
 							"label": "exists",
 						},
 						DNSNames: []string{"example.com"},
 					},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "example-com-dns-name-labels-selector-solver",
 						},
 					},
@@ -518,20 +518,20 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if one solver matches with dnsNames, and the other solver matches with labels, the dnsName solver should be chosen": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								exampleComDNSNameSelectorSolver,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label": "exists",
 										},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-labels-selector-solver",
 										},
 									},
@@ -541,21 +541,21 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label": "exists",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -567,19 +567,19 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		// order to ensure that this behaviour isn't just incidental
 		"if one solver matches with dnsNames, and the other solver matches with labels, the dnsName solver should be chosen (solvers listed in reverse order)": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label": "exists",
 										},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-labels-selector-solver",
 										},
 									},
@@ -590,21 +590,21 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label": "exists",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -614,21 +614,21 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if one solver matches with dnsNames, and the other solver matches with 2 labels, the dnsName solver should be chosen": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								exampleComDNSNameSelectorSolver,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label":   "exists",
 											"another": "label",
 										},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-labels-selector-solver",
 										},
 									},
@@ -638,22 +638,22 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label":   "exists",
 						"another": "label",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -663,32 +663,32 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should choose the solver with the most labels matching if multiple match": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label": "exists",
 										},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-labels-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label":   "exists",
 											"another": "matches",
 										},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-multiple-labels-selector-solver",
 										},
 									},
@@ -698,35 +698,35 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label":   "exists",
 						"another": "matches",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						MatchLabels: map[string]string{
 							"label":   "exists",
 							"another": "matches",
 						},
 					},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "example-com-multiple-labels-selector-solver",
 						},
 					},
@@ -735,18 +735,18 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should match wildcard dnsName solver if authorization has Wildcard=true": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverDNS01,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSNames: []string{"*.example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "example-com-wc-dnsname-selector-solver",
 										},
 									},
@@ -756,28 +756,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"*.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
 				Wildcard:   true,
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:     "dns-01",
 				DNSName:  "example.com",
 				Wildcard: true,
 				Token:    acmeChallengeDNS01.Token,
 				Key:      "dns01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSNames: []string{"*.example.com"},
 					},
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 							Email: "example-com-wc-dnsname-selector-solver",
 						},
 					},
@@ -786,18 +786,18 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"dnsName selectors should take precedence over dnsZone selectors": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								exampleComDNSNameSelectorSolver,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "com-dnszone-selector-solver",
 										},
 									},
@@ -807,16 +807,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -826,17 +826,17 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"dnsName selectors should take precedence over dnsZone selectors (reversed order)": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "com-dnszone-selector-solver",
 										},
 									},
@@ -847,16 +847,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
@@ -866,18 +866,18 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"should allow matching with dnsZones": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								emptySelectorSolverDNS01,
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "example-com-dnszone-selector-solver",
 										},
 									},
@@ -887,28 +887,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.example.com",
 				Wildcard:   true,
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:     "dns-01",
 				DNSName:  "www.example.com",
 				Wildcard: true,
 				Token:    acmeChallengeDNS01.Token,
 				Key:      "dns01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSZones: []string{"example.com"},
 					},
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 							Email: "example-com-dnszone-selector-solver",
 						},
 					},
@@ -917,27 +917,27 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"most specific dnsZone should be selected if multiple match": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "example-com-dnszone-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"prod.example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "prod-example-com-dnszone-selector-solver",
 										},
 									},
@@ -947,28 +947,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.prod.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.prod.example.com",
 				Wildcard:   true,
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:     "dns-01",
 				DNSName:  "www.prod.example.com",
 				Wildcard: true,
 				Token:    acmeChallengeDNS01.Token,
 				Key:      "dns01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSZones: []string{"prod.example.com"},
 					},
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 							Email: "prod-example-com-dnszone-selector-solver",
 						},
 					},
@@ -977,27 +977,27 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"most specific dnsZone should be selected if multiple match (reversed)": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"prod.example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "prod-example-com-dnszone-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 									},
-									DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-										Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+									DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+										Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 											Email: "example-com-dnszone-selector-solver",
 										},
 									},
@@ -1007,28 +1007,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.prod.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.prod.example.com",
 				Wildcard:   true,
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeDNS01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeDNS01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:     "dns-01",
 				DNSName:  "www.prod.example.com",
 				Wildcard: true,
 				Token:    acmeChallengeDNS01.Token,
 				Key:      "dns01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSZones: []string{"prod.example.com"},
 					},
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 							Email: "prod-example-com-dnszone-selector-solver",
 						},
 					},
@@ -1037,30 +1037,30 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if two solvers specify the same dnsZone, the one with the most labels should be chosen": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnszone-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										MatchLabels: map[string]string{
 											"label": "exists",
 										},
 										DNSZones: []string{"example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnszone-labels-selector-solver",
 										},
 									},
@@ -1070,34 +1070,34 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
+			order: &v1alpha2.Order{
 				ObjectMeta: metav1.ObjectMeta{
 					Labels: map[string]string{
 						"label": "exists",
 					},
 				},
-				Spec: v1alpha1.OrderSpec{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "www.example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						MatchLabels: map[string]string{
 							"label": "exists",
 						},
 						DNSZones: []string{"example.com"},
 					},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "example-com-dnszone-labels-selector-solver",
 						},
 					},
@@ -1106,28 +1106,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if both solvers match dnsNames, and one also matches dnsZones, choose the one that matches dnsZones": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSNames: []string{"www.example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnsname-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 										DNSNames: []string{"www.example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnsname-dnszone-selector-solver",
 										},
 									},
@@ -1137,27 +1137,27 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "www.example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSZones: []string{"example.com"},
 						DNSNames: []string{"www.example.com"},
 					},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "example-com-dnsname-dnszone-selector-solver",
 						},
 					},
@@ -1166,28 +1166,28 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"if both solvers match dnsNames, and one also matches dnsZones, choose the one that matches dnsZones (reversed)": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSZones: []string{"example.com"},
 										DNSNames: []string{"www.example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnsname-dnszone-selector-solver",
 										},
 									},
 								},
 								{
-									Selector: &v1alpha1.CertificateDNSNameSelector{
+									Selector: &v1alpha2.CertificateDNSNameSelector{
 										DNSNames: []string{"www.example.com"},
 									},
-									HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-										Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+									HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+										Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 											Name: "example-com-dnsname-selector-solver",
 										},
 									},
@@ -1197,27 +1197,27 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"www.example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "www.example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "www.example.com",
 				Token:   acmeChallengeHTTP01.Token,
 				Key:     "http01",
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					Selector: &v1alpha1.CertificateDNSNameSelector{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					Selector: &v1alpha2.CertificateDNSNameSelector{
 						DNSZones: []string{"example.com"},
 						DNSNames: []string{"www.example.com"},
 					},
-					HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-						Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+						Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 							Name: "example-com-dnsname-dnszone-selector-solver",
 						},
 					},
@@ -1226,11 +1226,11 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 		},
 		"uses correct solver when selector explicitly names dnsName (reversed)": {
 			acmeClient: basicACMEClient,
-			issuer: &v1alpha1.Issuer{
-				Spec: v1alpha1.IssuerSpec{
-					IssuerConfig: v1alpha1.IssuerConfig{
-						ACME: &v1alpha1.ACMEIssuer{
-							Solvers: []v1alpha1.ACMEChallengeSolver{
+			issuer: &v1alpha2.Issuer{
+				Spec: v1alpha2.IssuerSpec{
+					IssuerConfig: v1alpha2.IssuerConfig{
+						ACME: &v1alpha2.ACMEIssuer{
+							Solvers: []v1alpha2.ACMEChallengeSolver{
 								exampleComDNSNameSelectorSolver,
 								emptySelectorSolverHTTP01,
 							},
@@ -1238,16 +1238,16 @@ func TestChallengeSpecForAuthorization(t *testing.T) {
 					},
 				},
 			},
-			order: &v1alpha1.Order{
-				Spec: v1alpha1.OrderSpec{
+			order: &v1alpha2.Order{
+				Spec: v1alpha2.OrderSpec{
 					DNSNames: []string{"example.com"},
 				},
 			},
-			authz: &v1alpha1.ACMEAuthorization{
+			authz: &v1alpha2.ACMEAuthorization{
 				Identifier: "example.com",
-				Challenges: []v1alpha1.ACMEChallenge{*acmeChallengeHTTP01},
+				Challenges: []v1alpha2.ACMEChallenge{*acmeChallengeHTTP01},
 			},
-			expectedChallengeSpec: &v1alpha1.ChallengeSpec{
+			expectedChallengeSpec: &v1alpha2.ChallengeSpec{
 				Type:    "http-01",
 				DNSName: "example.com",
 				Token:   acmeChallengeHTTP01.Token,
diff --git a/pkg/controller/cainjector/BUILD.bazel b/pkg/controller/cainjector/BUILD.bazel
index 7a880a8d5..6ae8851b3 100644
--- a/pkg/controller/cainjector/BUILD.bazel
+++ b/pkg/controller/cainjector/BUILD.bazel
@@ -12,7 +12,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller/cainjector",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/logs:go_default_library",
         "//vendor/github.com/go-logr/logr:go_default_library",
         "//vendor/k8s.io/api/admissionregistration/v1beta1:go_default_library",
diff --git a/pkg/controller/cainjector/controller.go b/pkg/controller/cainjector/controller.go
index bd3798221..bd906136b 100644
--- a/pkg/controller/cainjector/controller.go
+++ b/pkg/controller/cainjector/controller.go
@@ -31,7 +31,7 @@ import (
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 
-	certmanager "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanager "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
 
diff --git a/pkg/controller/cainjector/indexers.go b/pkg/controller/cainjector/indexers.go
index afa676e32..37e96d7fe 100644
--- a/pkg/controller/cainjector/indexers.go
+++ b/pkg/controller/cainjector/indexers.go
@@ -28,7 +28,7 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/handler"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // setup for indexers used to trigger reconciliation on injected CA data.
diff --git a/pkg/controller/cainjector/sources.go b/pkg/controller/cainjector/sources.go
index bc9fb84c0..c582514c6 100644
--- a/pkg/controller/cainjector/sources.go
+++ b/pkg/controller/cainjector/sources.go
@@ -28,7 +28,7 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/handler"
 	"sigs.k8s.io/controller-runtime/pkg/source"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // caDataSource knows how to extract CA data given a provided InjectTarget.
diff --git a/pkg/controller/certificaterequests/BUILD.bazel b/pkg/controller/certificaterequests/BUILD.bazel
index dc3d510c7..6b8f8cbf9 100644
--- a/pkg/controller/certificaterequests/BUILD.bazel
+++ b/pkg/controller/certificaterequests/BUILD.bazel
@@ -12,9 +12,9 @@ go_library(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
         "//pkg/internal/apis/certmanager/validation:go_default_library",
@@ -40,7 +40,7 @@ go_test(
     embed = [":go_default_library"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests/fake:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/issuer:go_default_library",
diff --git a/pkg/controller/certificaterequests/acme/BUILD.bazel b/pkg/controller/certificaterequests/acme/BUILD.bazel
index cd7e08252..0a97b6143 100644
--- a/pkg/controller/certificaterequests/acme/BUILD.bazel
+++ b/pkg/controller/certificaterequests/acme/BUILD.bazel
@@ -8,9 +8,9 @@ go_library(
     deps = [
         "//pkg/acme:go_default_library",
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
@@ -30,8 +30,8 @@ go_test(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/pkg/controller/certificaterequests/acme/acme.go b/pkg/controller/certificaterequests/acme/acme.go
index b5d0a6562..38219170e 100644
--- a/pkg/controller/certificaterequests/acme/acme.go
+++ b/pkg/controller/certificaterequests/acme/acme.go
@@ -29,9 +29,9 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmclientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmclientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	crutil "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
@@ -50,7 +50,7 @@ type ACME struct {
 	issuerOptions controllerpkg.IssuerOptions
 
 	orderLister cmlisters.OrderLister
-	cmClientV   cmclientset.CertmanagerV1alpha1Interface
+	cmClientV   cmclientset.CertmanagerV1alpha2Interface
 
 	reporter *crutil.Reporter
 }
@@ -60,7 +60,7 @@ func init() {
 	controllerpkg.Register(CRControllerName, func(ctx *controllerpkg.Context) (controllerpkg.Interface, error) {
 		// watch owned Order resources and trigger resyncs of CertificateRequests
 		// that own Orders automatically
-		orderInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Orders().Informer()
+		orderInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Orders().Informer()
 		return controllerpkg.NewBuilder(ctx, CRControllerName).
 			For(certificaterequests.New(apiutil.IssuerACME, NewACME(ctx), orderInformer)).
 			Complete()
@@ -71,13 +71,13 @@ func NewACME(ctx *controllerpkg.Context) *ACME {
 	return &ACME{
 		recorder:      ctx.Recorder,
 		issuerOptions: ctx.IssuerOptions,
-		orderLister:   ctx.SharedInformerFactory.Certmanager().V1alpha1().Orders().Lister(),
-		cmClientV:     ctx.CMClient.CertmanagerV1alpha1(),
+		orderLister:   ctx.SharedInformerFactory.Certmanager().V1alpha2().Orders().Lister(),
+		cmClientV:     ctx.CMClient.CertmanagerV1alpha2(),
 		reporter:      crutil.NewReporter(ctx.Clock, ctx.Recorder),
 	}
 }
 
-func (a *ACME) Sign(ctx context.Context, cr *v1alpha1.CertificateRequest, issuer v1alpha1.GenericIssuer) (*issuerpkg.IssueResponse, error) {
+func (a *ACME) Sign(ctx context.Context, cr *v1alpha2.CertificateRequest, issuer v1alpha2.GenericIssuer) (*issuerpkg.IssueResponse, error) {
 	log := logf.FromContext(ctx, "sign")
 
 	// If we can't decode the CSR PEM we have to hard fail
@@ -148,7 +148,7 @@ func (a *ACME) Sign(ctx context.Context, cr *v1alpha1.CertificateRequest, issuer
 	}
 
 	// Order valid, return cert. The calling controller will update with ready if its happy with the cert.
-	if order.Status.State == v1alpha1.Valid {
+	if order.Status.State == v1alpha2.Valid {
 		log.Info("certificate issued")
 
 		return &issuerpkg.IssueResponse{
@@ -167,8 +167,8 @@ func (a *ACME) Sign(ctx context.Context, cr *v1alpha1.CertificateRequest, issuer
 }
 
 // Build order. If we error here it is a terminating failure.
-func buildOrder(cr *v1alpha1.CertificateRequest, csr *x509.CertificateRequest) (*v1alpha1.Order, error) {
-	spec := v1alpha1.OrderSpec{
+func buildOrder(cr *v1alpha2.CertificateRequest, csr *x509.CertificateRequest) (*v1alpha2.Order, error) {
+	spec := v1alpha2.OrderSpec{
 		CSR:        cr.Spec.CSRPEM,
 		IssuerRef:  cr.Spec.IssuerRef,
 		CommonName: csr.Subject.CommonName,
@@ -182,21 +182,21 @@ func buildOrder(cr *v1alpha1.CertificateRequest, csr *x509.CertificateRequest) (
 	// truncate certificate name so final name will be <= 63 characters.
 	// hash (uint32) will be at most 10 digits long, and we account for
 	// the hyphen.
-	return &v1alpha1.Order{
+	return &v1alpha2.Order{
 		ObjectMeta: metav1.ObjectMeta{
 			Name:        fmt.Sprintf("%.52s-%d", cr.Name, hash),
 			Namespace:   cr.Namespace,
 			Labels:      cr.Labels,
 			Annotations: cr.Annotations,
 			OwnerReferences: []metav1.OwnerReference{
-				*metav1.NewControllerRef(cr, v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.CertificateRequestKind)),
+				*metav1.NewControllerRef(cr, v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.CertificateRequestKind)),
 			},
 		},
 		Spec: spec,
 	}, nil
 }
 
-func hashOrder(orderSpec v1alpha1.OrderSpec) (uint32, error) {
+func hashOrder(orderSpec v1alpha2.OrderSpec) (uint32, error) {
 	// create a shallow copy of the OrderSpec so we can overwrite the CSR field
 	orderSpec.CSR = nil
 
diff --git a/pkg/controller/certificaterequests/acme/acme_test.go b/pkg/controller/certificaterequests/acme/acme_test.go
index 7b7d271ce..5b1ced833 100644
--- a/pkg/controller/certificaterequests/acme/acme_test.go
+++ b/pkg/controller/certificaterequests/acme/acme_test.go
@@ -33,11 +33,11 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	fakeclock "k8s.io/utils/clock/testing"
 
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
diff --git a/pkg/controller/certificaterequests/ca/BUILD.bazel b/pkg/controller/certificaterequests/ca/BUILD.bazel
index b09fc0f0f..46ecc548a 100644
--- a/pkg/controller/certificaterequests/ca/BUILD.bazel
+++ b/pkg/controller/certificaterequests/ca/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
@@ -28,7 +28,7 @@ go_test(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/pkg/controller/certificaterequests/ca/ca.go b/pkg/controller/certificaterequests/ca/ca.go
index 98263f54b..6be376bcf 100644
--- a/pkg/controller/certificaterequests/ca/ca.go
+++ b/pkg/controller/certificaterequests/ca/ca.go
@@ -25,7 +25,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	crutil "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
diff --git a/pkg/controller/certificaterequests/ca/ca_test.go b/pkg/controller/certificaterequests/ca/ca_test.go
index 0b3d7878a..0c4484404 100644
--- a/pkg/controller/certificaterequests/ca/ca_test.go
+++ b/pkg/controller/certificaterequests/ca/ca_test.go
@@ -39,7 +39,7 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
diff --git a/pkg/controller/certificaterequests/checks.go b/pkg/controller/certificaterequests/checks.go
index a490945c3..2bfbc0c0e 100644
--- a/pkg/controller/certificaterequests/checks.go
+++ b/pkg/controller/certificaterequests/checks.go
@@ -21,7 +21,7 @@ import (
 
 	"k8s.io/apimachinery/pkg/labels"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
 
diff --git a/pkg/controller/certificaterequests/controller.go b/pkg/controller/certificaterequests/controller.go
index 08dbb90ac..7de5fb43c 100644
--- a/pkg/controller/certificaterequests/controller.go
+++ b/pkg/controller/certificaterequests/controller.go
@@ -26,9 +26,9 @@ import (
 	"k8s.io/client-go/util/workqueue"
 	"k8s.io/utils/clock"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
 	"github.com/jetstack/cert-manager/pkg/issuer"
@@ -43,7 +43,7 @@ const (
 var keyFunc = controllerpkg.KeyFunc
 
 type Issuer interface {
-	Sign(context.Context, *v1alpha1.CertificateRequest, v1alpha1.GenericIssuer) (*issuer.IssueResponse, error)
+	Sign(context.Context, *v1alpha2.CertificateRequest, v1alpha2.GenericIssuer) (*issuer.IssueResponse, error)
 }
 
 type Controller struct {
@@ -111,11 +111,11 @@ func (c *Controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	// create a queue used to queue up items to be processed
 	c.queue = workqueue.NewNamedRateLimitingQueue(controllerpkg.DefaultItemBasedRateLimiter(), ControllerName)
 
-	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Issuers()
+	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Issuers()
 	c.issuerLister = issuerInformer.Lister()
 
 	// obtain references to all the informers used by this controller
-	certificateRequestInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().CertificateRequests()
+	certificateRequestInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().CertificateRequests()
 
 	// build a list of InformerSynced functions that will be returned by the Register method.
 	// the controller will only begin processing items once all of these informers have synced.
@@ -135,7 +135,7 @@ func (c *Controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	// if we are running in non-namespaced mode (i.e. --namespace=""), we also
 	// register event handlers and obtain a lister for clusterissuers.
 	if ctx.Namespace == "" {
-		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers()
+		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers()
 		c.clusterIssuerLister = clusterIssuerInformer.Lister()
 		// register handler function for clusterissuer resources
 		clusterIssuerInformer.Informer().AddEventHandler(&controllerpkg.BlockingEventHandler{WorkFunc: c.handleGenericIssuer})
diff --git a/pkg/controller/certificaterequests/fake/BUILD.bazel b/pkg/controller/certificaterequests/fake/BUILD.bazel
index 60908a35d..5f03f7f04 100644
--- a/pkg/controller/certificaterequests/fake/BUILD.bazel
+++ b/pkg/controller/certificaterequests/fake/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/fake",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/issuer:go_default_library",
     ],
 )
diff --git a/pkg/controller/certificaterequests/fake/fake.go b/pkg/controller/certificaterequests/fake/fake.go
index c48f32ea0..dbf549eed 100644
--- a/pkg/controller/certificaterequests/fake/fake.go
+++ b/pkg/controller/certificaterequests/fake/fake.go
@@ -19,7 +19,7 @@ package fake
 import (
 	"context"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
 
diff --git a/pkg/controller/certificaterequests/selfsigned/BUILD.bazel b/pkg/controller/certificaterequests/selfsigned/BUILD.bazel
index 7b099a72c..4f9aec191 100644
--- a/pkg/controller/certificaterequests/selfsigned/BUILD.bazel
+++ b/pkg/controller/certificaterequests/selfsigned/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
@@ -28,7 +28,7 @@ go_test(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/pkg/controller/certificaterequests/selfsigned/selfsigned.go b/pkg/controller/certificaterequests/selfsigned/selfsigned.go
index a6f059041..2590cfd2a 100644
--- a/pkg/controller/certificaterequests/selfsigned/selfsigned.go
+++ b/pkg/controller/certificaterequests/selfsigned/selfsigned.go
@@ -27,7 +27,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	crutil "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
diff --git a/pkg/controller/certificaterequests/selfsigned/selfsigned_test.go b/pkg/controller/certificaterequests/selfsigned/selfsigned_test.go
index dc1952fc6..4cd942a9c 100644
--- a/pkg/controller/certificaterequests/selfsigned/selfsigned_test.go
+++ b/pkg/controller/certificaterequests/selfsigned/selfsigned_test.go
@@ -37,7 +37,7 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
diff --git a/pkg/controller/certificaterequests/sync.go b/pkg/controller/certificaterequests/sync.go
index 509c9a24b..56cc917b6 100644
--- a/pkg/controller/certificaterequests/sync.go
+++ b/pkg/controller/certificaterequests/sync.go
@@ -28,17 +28,17 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/validation"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 )
 
 var (
-	certificateRequestGvk = v1alpha1.SchemeGroupVersion.WithKind(v1alpha1.CertificateRequestKind)
+	certificateRequestGvk = v1alpha2.SchemeGroupVersion.WithKind(v1alpha2.CertificateRequestKind)
 )
 
-func (c *Controller) Sync(ctx context.Context, cr *v1alpha1.CertificateRequest) (err error) {
+func (c *Controller) Sync(ctx context.Context, cr *v1alpha2.CertificateRequest) (err error) {
 	c.metrics.IncrementSyncCallCount(ControllerName)
 
 	log := logf.FromContext(ctx)
@@ -50,11 +50,11 @@ func (c *Controller) Sync(ctx context.Context, cr *v1alpha1.CertificateRequest)
 	}
 
 	switch apiutil.CertificateRequestReadyReason(cr) {
-	case v1alpha1.CertificateRequestReasonFailed:
+	case v1alpha2.CertificateRequestReasonFailed:
 		dbg.Info("certificate request Ready condition failed so skipping processing")
 		return
 
-	case v1alpha1.CertificateRequestReasonIssued:
+	case v1alpha2.CertificateRequestReasonIssued:
 		dbg.Info("certificate request Ready condition true so skipping processing")
 		return
 	}
@@ -148,7 +148,7 @@ func (c *Controller) Sync(ctx context.Context, cr *v1alpha1.CertificateRequest)
 	return nil
 }
 
-func (c *Controller) updateCertificateRequestStatus(ctx context.Context, old, new *v1alpha1.CertificateRequest) (*v1alpha1.CertificateRequest, error) {
+func (c *Controller) updateCertificateRequestStatus(ctx context.Context, old, new *v1alpha2.CertificateRequest) (*v1alpha2.CertificateRequest, error) {
 	log := logf.FromContext(ctx, "updateStatus")
 	oldBytes, _ := json.Marshal(old.Status)
 	newBytes, _ := json.Marshal(new.Status)
@@ -160,5 +160,5 @@ func (c *Controller) updateCertificateRequestStatus(ctx context.Context, old, ne
 	// TODO: replace Update call with UpdateStatus. This requires a custom API
 	// server with the /status subresource enabled and/or subresource support
 	// for CRDs (https://github.com/kubernetes/kubernetes/issues/38113)
-	return c.cmClient.CertmanagerV1alpha1().CertificateRequests(new.Namespace).Update(new)
+	return c.cmClient.CertmanagerV1alpha2().CertificateRequests(new.Namespace).Update(new)
 }
diff --git a/pkg/controller/certificaterequests/sync_test.go b/pkg/controller/certificaterequests/sync_test.go
index b0e14a0e4..df719e945 100644
--- a/pkg/controller/certificaterequests/sync_test.go
+++ b/pkg/controller/certificaterequests/sync_test.go
@@ -36,7 +36,7 @@ import (
 	fakeclock "k8s.io/utils/clock/testing"
 
 	"github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests/fake"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/issuer"
diff --git a/pkg/controller/certificaterequests/util/BUILD.bazel b/pkg/controller/certificaterequests/util/BUILD.bazel
index 195bc2833..d41bf1f5c 100644
--- a/pkg/controller/certificaterequests/util/BUILD.bazel
+++ b/pkg/controller/certificaterequests/util/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/client-go/tools/record:go_default_library",
@@ -35,7 +35,7 @@ go_test(
     embed = [":go_default_library"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util:go_default_library",
         "//test/unit/gen:go_default_library",
diff --git a/pkg/controller/certificaterequests/util/reporter.go b/pkg/controller/certificaterequests/util/reporter.go
index b00ef65f5..2f5c6864f 100644
--- a/pkg/controller/certificaterequests/util/reporter.go
+++ b/pkg/controller/certificaterequests/util/reporter.go
@@ -25,7 +25,7 @@ import (
 	"k8s.io/utils/clock"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 const (
diff --git a/pkg/controller/certificaterequests/util/reporter_test.go b/pkg/controller/certificaterequests/util/reporter_test.go
index 671120b5b..095b9a734 100644
--- a/pkg/controller/certificaterequests/util/reporter_test.go
+++ b/pkg/controller/certificaterequests/util/reporter_test.go
@@ -26,7 +26,7 @@ import (
 	clocktesting "k8s.io/utils/clock/testing"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllertest "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/unit/gen"
diff --git a/pkg/controller/certificaterequests/vault/BUILD.bazel b/pkg/controller/certificaterequests/vault/BUILD.bazel
index a221d450b..7d6bba673 100644
--- a/pkg/controller/certificaterequests/vault/BUILD.bazel
+++ b/pkg/controller/certificaterequests/vault/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
@@ -40,7 +40,7 @@ go_test(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/internal/vault:go_default_library",
diff --git a/pkg/controller/certificaterequests/vault/vault.go b/pkg/controller/certificaterequests/vault/vault.go
index 2ece52d49..8276b9152 100644
--- a/pkg/controller/certificaterequests/vault/vault.go
+++ b/pkg/controller/certificaterequests/vault/vault.go
@@ -23,7 +23,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	crutil "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
@@ -60,7 +60,7 @@ func NewVault(ctx *controllerpkg.Context) *Vault {
 	}
 }
 
-func (v *Vault) Sign(ctx context.Context, cr *v1alpha1.CertificateRequest, issuerObj v1alpha1.GenericIssuer) (*issuer.IssueResponse, error) {
+func (v *Vault) Sign(ctx context.Context, cr *v1alpha2.CertificateRequest, issuerObj v1alpha2.GenericIssuer) (*issuer.IssueResponse, error) {
 	log := logf.FromContext(ctx, "sign")
 	log = logf.WithRelatedResource(log, issuerObj)
 
diff --git a/pkg/controller/certificaterequests/vault/vault_test.go b/pkg/controller/certificaterequests/vault/vault_test.go
index 9c01ee7ef..86caadd92 100644
--- a/pkg/controller/certificaterequests/vault/vault_test.go
+++ b/pkg/controller/certificaterequests/vault/vault_test.go
@@ -39,7 +39,7 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	internalvault "github.com/jetstack/cert-manager/pkg/internal/vault"
diff --git a/pkg/controller/certificaterequests/venafi/BUILD.bazel b/pkg/controller/certificaterequests/venafi/BUILD.bazel
index aded4d56c..11839cc32 100644
--- a/pkg/controller/certificaterequests/venafi/BUILD.bazel
+++ b/pkg/controller/certificaterequests/venafi/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/certificaterequests/util:go_default_library",
@@ -41,7 +41,7 @@ go_test(
     deps = [
         "//pkg/api/util:go_default_library",
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/certificaterequests:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/internal/venafi:go_default_library",
diff --git a/pkg/controller/certificaterequests/venafi/venafi.go b/pkg/controller/certificaterequests/venafi/venafi.go
index 17dde0b48..4a54af540 100644
--- a/pkg/controller/certificaterequests/venafi/venafi.go
+++ b/pkg/controller/certificaterequests/venafi/venafi.go
@@ -24,7 +24,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	crutil "github.com/jetstack/cert-manager/pkg/controller/certificaterequests/util"
diff --git a/pkg/controller/certificaterequests/venafi/venafi_test.go b/pkg/controller/certificaterequests/venafi/venafi_test.go
index 43992e1ce..156948c3d 100644
--- a/pkg/controller/certificaterequests/venafi/venafi_test.go
+++ b/pkg/controller/certificaterequests/venafi/venafi_test.go
@@ -37,7 +37,7 @@ import (
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/certificaterequests"
 	controllertest "github.com/jetstack/cert-manager/pkg/controller/test"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
diff --git a/pkg/controller/certificates/BUILD.bazel b/pkg/controller/certificates/BUILD.bazel
index 2197a20f0..a86784be5 100644
--- a/pkg/controller/certificates/BUILD.bazel
+++ b/pkg/controller/certificates/BUILD.bazel
@@ -12,9 +12,9 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/logs:go_default_library",
         "//pkg/metrics:go_default_library",
@@ -57,7 +57,7 @@ go_test(
     srcs = ["sync_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//test/unit/gen:go_default_library",
diff --git a/pkg/controller/certificates/checks.go b/pkg/controller/certificates/checks.go
index d0995f460..fab54be91 100644
--- a/pkg/controller/certificates/checks.go
+++ b/pkg/controller/certificates/checks.go
@@ -24,8 +24,8 @@ import (
 	"k8s.io/apimachinery/pkg/labels"
 	"k8s.io/client-go/util/workqueue"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
 
diff --git a/pkg/controller/certificates/controller.go b/pkg/controller/certificates/controller.go
index 28a944769..5e880bdab 100644
--- a/pkg/controller/certificates/controller.go
+++ b/pkg/controller/certificates/controller.go
@@ -28,9 +28,9 @@ import (
 	"k8s.io/client-go/util/workqueue"
 	"k8s.io/utils/clock"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/scheduler"
@@ -91,8 +91,8 @@ func (c *certificateRequestManager) Register(ctx *controllerpkg.Context) (workqu
 	c.queue = workqueue.NewNamedRateLimitingQueue(workqueue.NewItemExponentialFailureRateLimiter(time.Second*5, time.Minute*30), ControllerName)
 
 	// obtain references to all the informers used by this controller
-	certificateInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Certificates()
-	certificateRequestInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().CertificateRequests()
+	certificateInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Certificates()
+	certificateRequestInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().CertificateRequests()
 	secretsInformer := ctx.KubeSharedInformerFactory.Core().V1().Secrets()
 
 	// build a list of InformerSynced functions that will be returned by the Register method.
diff --git a/pkg/controller/certificates/sync.go b/pkg/controller/certificates/sync.go
index 51ee9981d..077a9f4d8 100644
--- a/pkg/controller/certificates/sync.go
+++ b/pkg/controller/certificates/sync.go
@@ -31,8 +31,8 @@ import (
 
 	"github.com/go-logr/logr"
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
 	"github.com/jetstack/cert-manager/pkg/util/errors"
@@ -366,7 +366,7 @@ func (c *certificateRequestManager) processCertificate(ctx context.Context, crt
 			return err
 		}
 
-		req, err = c.cmClient.CertmanagerV1alpha1().CertificateRequests(crt.Namespace).Create(req)
+		req, err = c.cmClient.CertmanagerV1alpha2().CertificateRequests(crt.Namespace).Create(req)
 		if err != nil {
 			return err
 		}
@@ -396,7 +396,7 @@ func (c *certificateRequestManager) processCertificate(ctx context.Context, crt
 	// do anything with the certificate if it is issued
 	if !publicKeyMatches {
 		log.Info("stored private key is not valid for CSR stored on existing CertificateRequest, recreating CertificateRequest resource")
-		err := c.cmClient.CertmanagerV1alpha1().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
+		err := c.cmClient.CertmanagerV1alpha2().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
 		if err != nil {
 			return err
 		}
@@ -417,7 +417,7 @@ func (c *certificateRequestManager) processCertificate(ctx context.Context, crt
 	case cmapi.CertificateRequestReasonFailed:
 		if existingReq.Status.FailureTime == nil || c.clock.Since(existingReq.Status.FailureTime.Time) > time.Hour {
 			log.Info("deleting failed certificate request")
-			err := c.cmClient.CertmanagerV1alpha1().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
+			err := c.cmClient.CertmanagerV1alpha2().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
 			if err != nil {
 				return err
 			}
@@ -455,7 +455,7 @@ func (c *certificateRequestManager) processCertificate(ctx context.Context, crt
 		log.Info("checking if certificate stored on CertificateRequest is up to date")
 		if c.certificateNeedsRenew(ctx, x509Cert, crt) {
 			log.Info("certificate stored on CertificateRequest needs renewal, so deleting the old CertificateRequest resource")
-			err := c.cmClient.CertmanagerV1alpha1().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
+			err := c.cmClient.CertmanagerV1alpha2().CertificateRequests(existingReq.Namespace).Delete(existingReq.Name, nil)
 			if err != nil {
 				return err
 			}
@@ -671,7 +671,7 @@ func (c *certificateRequestManager) cleanupExistingCertificateRequests(log logr.
 			continue
 		}
 
-		err = c.cmClient.CertmanagerV1alpha1().CertificateRequests(req.Namespace).Delete(req.Name, nil)
+		err = c.cmClient.CertmanagerV1alpha2().CertificateRequests(req.Namespace).Delete(req.Name, nil)
 		if err != nil {
 			return err
 		}
diff --git a/pkg/controller/certificates/sync_test.go b/pkg/controller/certificates/sync_test.go
index cf8a26a88..32f879605 100644
--- a/pkg/controller/certificates/sync_test.go
+++ b/pkg/controller/certificates/sync_test.go
@@ -31,7 +31,7 @@ import (
 	coretesting "k8s.io/client-go/testing"
 	fakeclock "k8s.io/utils/clock/testing"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 	"github.com/jetstack/cert-manager/test/unit/gen"
diff --git a/pkg/controller/certificates/util.go b/pkg/controller/certificates/util.go
index 6d05562da..70485746c 100644
--- a/pkg/controller/certificates/util.go
+++ b/pkg/controller/certificates/util.go
@@ -32,9 +32,9 @@ import (
 	"k8s.io/client-go/tools/cache"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
@@ -45,12 +45,12 @@ import (
 )
 
 var (
-	certificateGvk = v1alpha1.SchemeGroupVersion.WithKind("Certificate")
+	certificateGvk = v1alpha2.SchemeGroupVersion.WithKind("Certificate")
 )
 
-type calculateDurationUntilRenewFn func(context.Context, *x509.Certificate, *v1alpha1.Certificate) time.Duration
+type calculateDurationUntilRenewFn func(context.Context, *x509.Certificate, *v1alpha2.Certificate) time.Duration
 
-func getCertificateForKey(ctx context.Context, key string, lister cmlisters.CertificateLister) (*v1alpha1.Certificate, error) {
+func getCertificateForKey(ctx context.Context, key string, lister cmlisters.CertificateLister) (*v1alpha2.Certificate, error) {
 	namespace, name, err := cache.SplitMetaNamespaceKey(key)
 	if err != nil {
 		return nil, nil
@@ -75,7 +75,7 @@ func certificateGetter(lister cmlisters.CertificateLister) func(namespace, name
 
 var keyFunc = controllerpkg.KeyFunc
 
-func certificateMatchesSpec(crt *v1alpha1.Certificate, key crypto.Signer, cert *x509.Certificate, secretLister corelisters.SecretLister) (bool, []string) {
+func certificateMatchesSpec(crt *v1alpha2.Certificate, key crypto.Signer, cert *x509.Certificate, secretLister corelisters.SecretLister) (bool, []string) {
 	var errs []string
 
 	// TODO: add checks for KeySize, KeyAlgorithm fields
@@ -113,19 +113,19 @@ func certificateMatchesSpec(crt *v1alpha1.Certificate, key crypto.Signer, cert *
 	secret, err := secretLister.Secrets(crt.Namespace).Get(crt.Spec.SecretName)
 
 	// validate that the issuer is correct
-	if crt.Spec.IssuerRef.Name != secret.Annotations[v1alpha1.IssuerNameAnnotationKey] {
-		errs = append(errs, fmt.Sprintf("Issuer of the certificate is not up to date: %q", secret.Annotations[v1alpha1.IssuerNameAnnotationKey]))
+	if crt.Spec.IssuerRef.Name != secret.Annotations[v1alpha2.IssuerNameAnnotationKey] {
+		errs = append(errs, fmt.Sprintf("Issuer of the certificate is not up to date: %q", secret.Annotations[v1alpha2.IssuerNameAnnotationKey]))
 	}
 
 	// validate that the issuer kind is correct
-	if apiutil.IssuerKind(crt.Spec.IssuerRef) != secret.Annotations[v1alpha1.IssuerKindAnnotationKey] {
-		errs = append(errs, fmt.Sprintf("Issuer kind of the certificate is not up to date: %q", secret.Annotations[v1alpha1.IssuerKindAnnotationKey]))
+	if apiutil.IssuerKind(crt.Spec.IssuerRef) != secret.Annotations[v1alpha2.IssuerKindAnnotationKey] {
+		errs = append(errs, fmt.Sprintf("Issuer kind of the certificate is not up to date: %q", secret.Annotations[v1alpha2.IssuerKindAnnotationKey]))
 	}
 
 	return len(errs) == 0, errs
 }
 
-func scheduleRenewal(ctx context.Context, lister corelisters.SecretLister, calc calculateDurationUntilRenewFn, queueFn func(interface{}, time.Duration), crt *v1alpha1.Certificate) {
+func scheduleRenewal(ctx context.Context, lister corelisters.SecretLister, calc calculateDurationUntilRenewFn, queueFn func(interface{}, time.Duration), crt *v1alpha2.Certificate) {
 	log := logf.FromContext(ctx)
 	log = log.WithValues(
 		logf.RelatedResourceNameKey, crt.Spec.SecretName,
@@ -172,14 +172,14 @@ func isTemporaryCertificate(cert *x509.Certificate) bool {
 // This is to mitigate a potential attack against x509 certificates that use a
 // predictable serial number and weak MD5 hashing algorithms.
 // In practice, this shouldn't really be a concern anyway.
-func generateLocallySignedTemporaryCertificate(crt *v1alpha1.Certificate, pk []byte) ([]byte, error) {
+func generateLocallySignedTemporaryCertificate(crt *v1alpha2.Certificate, pk []byte) ([]byte, error) {
 	// generate a throwaway self-signed root CA
 	caPk, err := pki.GenerateECPrivateKey(pki.ECCurve521)
 	if err != nil {
 		return nil, err
 	}
-	caCertTemplate, err := pki.GenerateTemplate(&v1alpha1.Certificate{
-		Spec: v1alpha1.CertificateSpec{
+	caCertTemplate, err := pki.GenerateTemplate(&v1alpha2.Certificate{
+		Spec: v1alpha2.CertificateSpec{
 			CommonName: "cert-manager.local",
 			IsCA:       true,
 		},
@@ -212,7 +212,7 @@ func generateLocallySignedTemporaryCertificate(crt *v1alpha1.Certificate, pk []b
 	return b, nil
 }
 
-func updateCertificateStatus(ctx context.Context, m *metrics.Metrics, cmClient cmclient.Interface, old, new *v1alpha1.Certificate) (*v1alpha1.Certificate, error) {
+func updateCertificateStatus(ctx context.Context, m *metrics.Metrics, cmClient cmclient.Interface, old, new *v1alpha2.Certificate) (*v1alpha2.Certificate, error) {
 	defer m.UpdateCertificateStatus(new)
 
 	log := logf.FromContext(ctx, "updateStatus")
@@ -225,15 +225,15 @@ func updateCertificateStatus(ctx context.Context, m *metrics.Metrics, cmClient c
 	// TODO: replace Update call with UpdateStatus. This requires a custom API
 	// server with the /status subresource enabled and/or subresource support
 	// for CRDs (https://github.com/kubernetes/kubernetes/issues/38113)
-	return cmClient.CertmanagerV1alpha1().Certificates(new.Namespace).Update(new)
+	return cmClient.CertmanagerV1alpha2().Certificates(new.Namespace).Update(new)
 }
 
-func certificateHasTemporaryCertificateAnnotation(crt *v1alpha1.Certificate) bool {
+func certificateHasTemporaryCertificateAnnotation(crt *v1alpha2.Certificate) bool {
 	if crt.Annotations == nil {
 		return false
 	}
 
-	if val, ok := crt.Annotations[v1alpha1.IssueTemporaryCertificateAnnotation]; ok && val == "true" {
+	if val, ok := crt.Annotations[v1alpha2.IssueTemporaryCertificateAnnotation]; ok && val == "true" {
 		return true
 	}
 
diff --git a/pkg/controller/clusterissuers/BUILD.bazel b/pkg/controller/clusterissuers/BUILD.bazel
index 33cd4ba74..129bbd1ac 100644
--- a/pkg/controller/clusterissuers/BUILD.bazel
+++ b/pkg/controller/clusterissuers/BUILD.bazel
@@ -11,9 +11,9 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/internal/apis/certmanager/validation:go_default_library",
         "//pkg/issuer:go_default_library",
@@ -36,7 +36,7 @@ go_test(
     srcs = ["sync_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
diff --git a/pkg/controller/clusterissuers/checks.go b/pkg/controller/clusterissuers/checks.go
index bc6e42173..99f19ad35 100644
--- a/pkg/controller/clusterissuers/checks.go
+++ b/pkg/controller/clusterissuers/checks.go
@@ -22,17 +22,17 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/labels"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func (c *controller) issuersForSecret(secret *corev1.Secret) ([]*v1alpha1.ClusterIssuer, error) {
+func (c *controller) issuersForSecret(secret *corev1.Secret) ([]*v1alpha2.ClusterIssuer, error) {
 	issuers, err := c.clusterIssuerLister.List(labels.NewSelector())
 
 	if err != nil {
 		return nil, fmt.Errorf("error listing certificiates: %s", err.Error())
 	}
 
-	var affected []*v1alpha1.ClusterIssuer
+	var affected []*v1alpha2.ClusterIssuer
 	for _, iss := range issuers {
 		if secret.Namespace != c.clusterResourceNamespace {
 			continue
diff --git a/pkg/controller/clusterissuers/controller.go b/pkg/controller/clusterissuers/controller.go
index ef81073d7..15728aba8 100644
--- a/pkg/controller/clusterissuers/controller.go
+++ b/pkg/controller/clusterissuers/controller.go
@@ -28,7 +28,7 @@ import (
 	"k8s.io/client-go/util/workqueue"
 
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
@@ -71,7 +71,7 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	c.queue = workqueue.NewNamedRateLimitingQueue(controllerpkg.DefaultItemBasedRateLimiter(), ControllerName)
 
 	// obtain references to all the informers used by this controller
-	clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers()
+	clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers()
 	secretInformer := ctx.KubeSharedInformerFactory.Core().V1().Secrets()
 	// build a list of InformerSynced functions that will be returned by the Register method.
 	// the controller will only begin processing items once all of these informers have synced.
diff --git a/pkg/controller/clusterissuers/sync.go b/pkg/controller/clusterissuers/sync.go
index d68782f47..878cc4ad7 100644
--- a/pkg/controller/clusterissuers/sync.go
+++ b/pkg/controller/clusterissuers/sync.go
@@ -25,7 +25,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/errors"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/validation"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
@@ -38,7 +38,7 @@ const (
 	messageErrorInitIssuer = "Error initializing issuer: "
 )
 
-func (c *controller) Sync(ctx context.Context, iss *v1alpha1.ClusterIssuer) (err error) {
+func (c *controller) Sync(ctx context.Context, iss *v1alpha2.ClusterIssuer) (err error) {
 	metrics.Default.IncrementSyncCallCount(ControllerName)
 
 	log := logf.FromContext(ctx)
@@ -53,14 +53,14 @@ func (c *controller) Sync(ctx context.Context, iss *v1alpha1.ClusterIssuer) (err
 	el := validation.ValidateClusterIssuer(issuerCopy)
 	if len(el) > 0 {
 		msg := fmt.Sprintf("Resource validation failed: %v", el.ToAggregate())
-		apiutil.SetIssuerCondition(issuerCopy, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorConfig, msg)
+		apiutil.SetIssuerCondition(issuerCopy, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorConfig, msg)
 		return
 	}
 
 	// Remove existing ErrorConfig condition if it exists
 	for i, c := range issuerCopy.Status.Conditions {
-		if c.Type == v1alpha1.IssuerConditionReady {
-			if c.Reason == errorConfig && c.Status == v1alpha1.ConditionFalse {
+		if c.Type == v1alpha2.IssuerConditionReady {
+			if c.Reason == errorConfig && c.Status == v1alpha2.ConditionFalse {
 				issuerCopy.Status.Conditions = append(issuerCopy.Status.Conditions[:i], issuerCopy.Status.Conditions[i+1:]...)
 				break
 			}
@@ -84,12 +84,12 @@ func (c *controller) Sync(ctx context.Context, iss *v1alpha1.ClusterIssuer) (err
 	return nil
 }
 
-func (c *controller) updateIssuerStatus(old, new *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
+func (c *controller) updateIssuerStatus(old, new *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
 	if reflect.DeepEqual(old.Status, new.Status) {
 		return nil, nil
 	}
 	// TODO: replace Update call with UpdateStatus. This requires a custom API
 	// server with the /status subresource enabled and/or subresource support
 	// for CRDs (https://github.com/kubernetes/kubernetes/issues/38113)
-	return c.cmClient.CertmanagerV1alpha1().ClusterIssuers().Update(new)
+	return c.cmClient.CertmanagerV1alpha2().ClusterIssuers().Update(new)
 }
diff --git a/pkg/controller/clusterissuers/sync_test.go b/pkg/controller/clusterissuers/sync_test.go
index 06b7d3556..8c9c925e8 100644
--- a/pkg/controller/clusterissuers/sync_test.go
+++ b/pkg/controller/clusterissuers/sync_test.go
@@ -25,12 +25,12 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	clientgotesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
-func newFakeIssuerWithStatus(name string, status v1alpha1.IssuerStatus) *v1alpha1.ClusterIssuer {
-	return &v1alpha1.ClusterIssuer{
+func newFakeIssuerWithStatus(name string, status v1alpha2.IssuerStatus) *v1alpha2.ClusterIssuer {
+	return &v1alpha2.ClusterIssuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
@@ -56,18 +56,18 @@ func TestUpdateIssuerStatus(t *testing.T) {
 	fakeClient := b.FakeCMClient()
 	assertNumberOfActions(t, fatalf, filter(fakeClient.Actions()), 0)
 
-	originalIssuer := newFakeIssuerWithStatus("test", v1alpha1.IssuerStatus{})
+	originalIssuer := newFakeIssuerWithStatus("test", v1alpha2.IssuerStatus{})
 
-	issuer, err := fakeClient.CertmanagerV1alpha1().ClusterIssuers().Create(originalIssuer)
+	issuer, err := fakeClient.CertmanagerV1alpha2().ClusterIssuers().Create(originalIssuer)
 	assertErrIsNil(t, fatalf, err)
 
 	assertNumberOfActions(t, fatalf, filter(fakeClient.Actions()), 1)
 
-	newStatus := v1alpha1.IssuerStatus{
-		Conditions: []v1alpha1.IssuerCondition{
+	newStatus := v1alpha2.IssuerStatus{
+		Conditions: []v1alpha2.IssuerCondition{
 			{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			},
 		},
 	}
@@ -109,10 +109,10 @@ func assertErrIsNil(t *testing.T, f failfFunc, err error) {
 	}
 }
 
-func assertIsClusterIssuer(t *testing.T, f failfFunc, obj runtime.Object) *v1alpha1.ClusterIssuer {
-	issuer, ok := obj.(*v1alpha1.ClusterIssuer)
+func assertIsClusterIssuer(t *testing.T, f failfFunc, obj runtime.Object) *v1alpha2.ClusterIssuer {
+	issuer, ok := obj.(*v1alpha2.ClusterIssuer)
 	if !ok {
-		f(t, "expected runtime.Object to be of type *v1alpha1.Issuer, but it was %#v", obj)
+		f(t, "expected runtime.Object to be of type *v1alpha2.Issuer, but it was %#v", obj)
 	}
 	return issuer
 }
diff --git a/pkg/controller/helper.go b/pkg/controller/helper.go
index c667c0e31..78d0a7234 100644
--- a/pkg/controller/helper.go
+++ b/pkg/controller/helper.go
@@ -21,7 +21,7 @@ import (
 	"crypto/x509"
 	"time"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/logs"
 )
 
diff --git a/pkg/controller/helper_test.go b/pkg/controller/helper_test.go
index 3d1a3672e..f1ffc3974 100644
--- a/pkg/controller/helper_test.go
+++ b/pkg/controller/helper_test.go
@@ -24,12 +24,12 @@ import (
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func TestCalculateDurationUntilRenew(t *testing.T) {
 	c := IssuerOptions{
-		RenewBeforeExpiryDuration: v1alpha1.DefaultRenewBefore,
+		RenewBeforeExpiryDuration: v1alpha2.DefaultRenewBefore,
 	}
 	currentTime := time.Now()
 	now = func() time.Time { return currentTime }
@@ -101,8 +101,8 @@ func TestCalculateDurationUntilRenew(t *testing.T) {
 		},
 	}
 	for k, v := range tests {
-		cert := &v1alpha1.Certificate{
-			Spec: v1alpha1.CertificateSpec{
+		cert := &v1alpha2.Certificate{
+			Spec: v1alpha2.CertificateSpec{
 				Duration:    v.duration,
 				RenewBefore: v.renewBefore,
 			},
diff --git a/pkg/controller/ingress-shim/BUILD.bazel b/pkg/controller/ingress-shim/BUILD.bazel
index 81ea8e000..5ea8f9f4a 100644
--- a/pkg/controller/ingress-shim/BUILD.bazel
+++ b/pkg/controller/ingress-shim/BUILD.bazel
@@ -10,9 +10,9 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller/ingress-shim",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer:go_default_library",
         "//pkg/logs:go_default_library",
@@ -39,7 +39,7 @@ go_test(
     srcs = ["sync_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//test/unit/gen:go_default_library",
         "//vendor/k8s.io/api/extensions/v1beta1:go_default_library",
diff --git a/pkg/controller/ingress-shim/checks.go b/pkg/controller/ingress-shim/checks.go
index d3ff5377e..a59045b9a 100644
--- a/pkg/controller/ingress-shim/checks.go
+++ b/pkg/controller/ingress-shim/checks.go
@@ -23,10 +23,10 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/labels"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func (c *controller) ingressesForCertificate(crt *v1alpha1.Certificate) ([]*extv1beta1.Ingress, error) {
+func (c *controller) ingressesForCertificate(crt *v1alpha2.Certificate) ([]*extv1beta1.Ingress, error) {
 	ings, err := c.ingressLister.List(labels.NewSelector())
 
 	if err != nil {
diff --git a/pkg/controller/ingress-shim/controller.go b/pkg/controller/ingress-shim/controller.go
index dba6b2483..17dab9615 100644
--- a/pkg/controller/ingress-shim/controller.go
+++ b/pkg/controller/ingress-shim/controller.go
@@ -29,9 +29,9 @@ import (
 	"k8s.io/client-go/tools/record"
 	"k8s.io/client-go/util/workqueue"
 
-	cmv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmv1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
@@ -79,8 +79,8 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 
 	// obtain references to all the informers used by this controller
 	ingressInformer := ctx.KubeSharedInformerFactory.Extensions().V1beta1().Ingresses()
-	certificatesInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Certificates()
-	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Issuers()
+	certificatesInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Certificates()
+	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Issuers()
 	// build a list of InformerSynced functions that will be returned by the Register method.
 	// the controller will only begin processing items once all of these informers have synced.
 	mustSync := []cache.InformerSynced{
@@ -98,7 +98,7 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	// if we are running in non-namespaced mode (i.e. --namespace=""), we also
 	// register event handlers and obtain a lister for clusterissuers.
 	if ctx.Namespace == "" {
-		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers()
+		clusterIssuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers()
 		mustSync = append(mustSync, clusterIssuerInformer.Informer().HasSynced)
 		c.clusterIssuerLister = clusterIssuerInformer.Lister()
 	}
diff --git a/pkg/controller/ingress-shim/sync.go b/pkg/controller/ingress-shim/sync.go
index faec6cc29..a8804f867 100644
--- a/pkg/controller/ingress-shim/sync.go
+++ b/pkg/controller/ingress-shim/sync.go
@@ -28,7 +28,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/labels"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
 	"github.com/jetstack/cert-manager/pkg/util"
@@ -73,7 +73,7 @@ func (c *controller) Sync(ctx context.Context, ing *extv1beta1.Ingress) error {
 		return nil
 	}
 
-	issuer, err := c.helper.GetGenericIssuer(v1alpha1.ObjectReference{
+	issuer, err := c.helper.GetGenericIssuer(v1alpha2.ObjectReference{
 		Name: issuerName,
 		Kind: issuerKind,
 	}, ing.Namespace)
@@ -101,7 +101,7 @@ func (c *controller) Sync(ctx context.Context, ing *extv1beta1.Ingress) error {
 	}
 
 	for _, crt := range newCrts {
-		_, err := c.cmClient.CertmanagerV1alpha1().Certificates(crt.Namespace).Create(crt)
+		_, err := c.cmClient.CertmanagerV1alpha2().Certificates(crt.Namespace).Create(crt)
 		if err != nil {
 			return err
 		}
@@ -109,7 +109,7 @@ func (c *controller) Sync(ctx context.Context, ing *extv1beta1.Ingress) error {
 	}
 
 	for _, crt := range updateCrts {
-		_, err := c.cmClient.CertmanagerV1alpha1().Certificates(crt.Namespace).Update(crt)
+		_, err := c.cmClient.CertmanagerV1alpha2().Certificates(crt.Namespace).Update(crt)
 		if err != nil {
 			return err
 		}
@@ -122,7 +122,7 @@ func (c *controller) Sync(ctx context.Context, ing *extv1beta1.Ingress) error {
 	}
 
 	for _, crt := range unrequiredCrts {
-		err = c.cmClient.CertmanagerV1alpha1().Certificates(crt.Namespace).Delete(crt.Name, nil)
+		err = c.cmClient.CertmanagerV1alpha2().Certificates(crt.Namespace).Delete(crt.Name, nil)
 		if err != nil {
 			return err
 		}
@@ -146,28 +146,28 @@ func (c *controller) validateIngress(ing *extv1beta1.Ingress) []error {
 	return errs
 }
 
-func (c *controller) buildCertificates(ctx context.Context, ing *extv1beta1.Ingress, issuer v1alpha1.GenericIssuer, issuerKind string) (new, update []*v1alpha1.Certificate, _ error) {
+func (c *controller) buildCertificates(ctx context.Context, ing *extv1beta1.Ingress, issuer v1alpha2.GenericIssuer, issuerKind string) (new, update []*v1alpha2.Certificate, _ error) {
 	log := logs.FromContext(ctx)
 
-	var newCrts []*v1alpha1.Certificate
-	var updateCrts []*v1alpha1.Certificate
+	var newCrts []*v1alpha2.Certificate
+	var updateCrts []*v1alpha2.Certificate
 	for _, tls := range ing.Spec.TLS {
 		existingCrt, err := c.certificateLister.Certificates(ing.Namespace).Get(tls.SecretName)
 		if !apierrors.IsNotFound(err) && err != nil {
 			return nil, nil, err
 		}
 
-		crt := &v1alpha1.Certificate{
+		crt := &v1alpha2.Certificate{
 			ObjectMeta: metav1.ObjectMeta{
 				Name:            tls.SecretName,
 				Namespace:       ing.Namespace,
 				Labels:          ing.Labels,
 				OwnerReferences: []metav1.OwnerReference{*metav1.NewControllerRef(ing, ingressGVK)},
 			},
-			Spec: v1alpha1.CertificateSpec{
+			Spec: v1alpha2.CertificateSpec{
 				DNSNames:   tls.Hosts,
 				SecretName: tls.SecretName,
-				IssuerRef: v1alpha1.ObjectReference{
+				IssuerRef: v1alpha2.ObjectReference{
 					Name: issuer.GetObjectMeta().Name,
 					Kind: issuerKind,
 				},
@@ -219,8 +219,8 @@ func (c *controller) buildCertificates(ctx context.Context, ing *extv1beta1.Ingr
 	return newCrts, updateCrts, nil
 }
 
-func (c *controller) findUnrequiredCertificates(ing *extv1beta1.Ingress) ([]*v1alpha1.Certificate, error) {
-	var unrequired []*v1alpha1.Certificate
+func (c *controller) findUnrequiredCertificates(ing *extv1beta1.Ingress) ([]*v1alpha2.Certificate, error) {
+	var unrequired []*v1alpha2.Certificate
 	// TODO: investigate selector which filters for certificates controlled by the ingress
 	crts, err := c.certificateLister.Certificates(ing.Namespace).List(labels.Everything())
 	if err != nil {
@@ -236,7 +236,7 @@ func (c *controller) findUnrequiredCertificates(ing *extv1beta1.Ingress) ([]*v1a
 	return unrequired, nil
 }
 
-func isUnrequiredCertificate(crt *v1alpha1.Certificate, ing *extv1beta1.Ingress) bool {
+func isUnrequiredCertificate(crt *v1alpha2.Certificate, ing *extv1beta1.Ingress) bool {
 	if !metav1.IsControlledBy(crt, ing) {
 		return false
 	}
@@ -250,7 +250,7 @@ func isUnrequiredCertificate(crt *v1alpha1.Certificate, ing *extv1beta1.Ingress)
 }
 
 // certNeedsUpdate checks and returns true if two Certificates differ
-func certNeedsUpdate(a, b *v1alpha1.Certificate) bool {
+func certNeedsUpdate(a, b *v1alpha2.Certificate) bool {
 	if a.Name != b.Name {
 		return true
 	}
@@ -288,7 +288,7 @@ func certNeedsUpdate(a, b *v1alpha1.Certificate) bool {
 	return false
 }
 
-func (c *controller) setIssuerSpecificConfig(crt *v1alpha1.Certificate, issuer v1alpha1.GenericIssuer, ing *extv1beta1.Ingress, tls extv1beta1.IngressTLS) error {
+func (c *controller) setIssuerSpecificConfig(crt *v1alpha2.Certificate, issuer v1alpha2.GenericIssuer, ing *extv1beta1.Ingress, tls extv1beta1.IngressTLS) error {
 	ingAnnotations := ing.Annotations
 	if ingAnnotations == nil {
 		ingAnnotations = map[string]string{}
@@ -301,10 +301,10 @@ func (c *controller) setIssuerSpecificConfig(crt *v1alpha1.Certificate, issuer v
 		if crt.Annotations == nil {
 			crt.Annotations = make(map[string]string)
 		}
-		crt.Annotations[v1alpha1.ACMECertificateHTTP01IngressNameOverride] = ing.Name
+		crt.Annotations[v1alpha2.ACMECertificateHTTP01IngressNameOverride] = ing.Name
 		// set IssueTemporaryCertificateAnnotation to true in order to behave
 		// better when ingress-gce is being used.
-		crt.Annotations[v1alpha1.IssueTemporaryCertificateAnnotation] = "true"
+		crt.Annotations[v1alpha2.IssueTemporaryCertificateAnnotation] = "true"
 	}
 
 	ingressClassVal, hasIngressClassVal := ingAnnotations[acmeIssuerHTTP01IngressClassAnnotation]
@@ -312,7 +312,7 @@ func (c *controller) setIssuerSpecificConfig(crt *v1alpha1.Certificate, issuer v
 		if crt.Annotations == nil {
 			crt.Annotations = make(map[string]string)
 		}
-		crt.Annotations[v1alpha1.ACMECertificateHTTP01IngressClassOverride] = ingressClassVal
+		crt.Annotations[v1alpha2.ACMECertificateHTTP01IngressClassOverride] = ingressClassVal
 	}
 
 	return nil
@@ -353,11 +353,11 @@ func (c *controller) issuerForIngress(ing *extv1beta1.Ingress) (name string, kin
 	}
 	if issuerName, ok := annotations[issuerNameAnnotation]; ok {
 		name = issuerName
-		kind = v1alpha1.IssuerKind
+		kind = v1alpha2.IssuerKind
 	}
 	if issuerName, ok := annotations[clusterIssuerNameAnnotation]; ok {
 		name = issuerName
-		kind = v1alpha1.ClusterIssuerKind
+		kind = v1alpha2.ClusterIssuerKind
 	}
 	return name, kind
 }
diff --git a/pkg/controller/ingress-shim/sync_test.go b/pkg/controller/ingress-shim/sync_test.go
index 802510fcd..be575116f 100644
--- a/pkg/controller/ingress-shim/sync_test.go
+++ b/pkg/controller/ingress-shim/sync_test.go
@@ -27,7 +27,7 @@ import (
 	types "k8s.io/apimachinery/pkg/types"
 	coretesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 )
@@ -75,24 +75,24 @@ func TestShouldSync(t *testing.T) {
 func TestSync(t *testing.T) {
 	clusterIssuer := gen.ClusterIssuer("issuer-name")
 	acmeIssuerNewFormat := gen.Issuer("issuer-name",
-		gen.SetIssuerACME(v1alpha1.ACMEIssuer{}))
+		gen.SetIssuerACME(v1alpha2.ACMEIssuer{}))
 	acmeIssuer := gen.Issuer("issuer-name",
-		gen.SetIssuerACME(v1alpha1.ACMEIssuer{}))
+		gen.SetIssuerACME(v1alpha2.ACMEIssuer{}))
 	acmeClusterIssuer := gen.ClusterIssuer("issuer-name",
-		gen.SetIssuerACME(v1alpha1.ACMEIssuer{}))
+		gen.SetIssuerACME(v1alpha2.ACMEIssuer{}))
 	type testT struct {
 		Name                string
 		Ingress             *extv1beta1.Ingress
-		Issuer              v1alpha1.GenericIssuer
+		Issuer              v1alpha2.GenericIssuer
 		IssuerLister        []runtime.Object
 		ClusterIssuerLister []runtime.Object
 		CertificateLister   []runtime.Object
 		DefaultIssuerName   string
 		DefaultIssuerKind   string
 		Err                 bool
-		ExpectedCreate      []*v1alpha1.Certificate
-		ExpectedUpdate      []*v1alpha1.Certificate
-		ExpectedDelete      []*v1alpha1.Certificate
+		ExpectedCreate      []*v1alpha2.Certificate
+		ExpectedUpdate      []*v1alpha2.Certificate
+		ExpectedDelete      []*v1alpha2.Certificate
 	}
 	tests := []testT{
 		{
@@ -121,7 +121,7 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      "example-com-tls",
@@ -130,15 +130,15 @@ func TestSync(t *testing.T) {
 							"my-test-label": "should be copied",
 						},
 						Annotations: map[string]string{
-							v1alpha1.ACMECertificateHTTP01IngressNameOverride: "ingress-name",
-							v1alpha1.IssueTemporaryCertificateAnnotation:      "true",
+							v1alpha2.ACMECertificateHTTP01IngressNameOverride: "ingress-name",
+							v1alpha2.IssueTemporaryCertificateAnnotation:      "true",
 						},
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -172,7 +172,7 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      "example-com-tls",
@@ -181,15 +181,15 @@ func TestSync(t *testing.T) {
 							"my-test-label": "should be copied",
 						},
 						Annotations: map[string]string{
-							v1alpha1.ACMECertificateHTTP01IngressNameOverride: "ingress-name",
-							v1alpha1.IssueTemporaryCertificateAnnotation:      "true",
+							v1alpha2.ACMECertificateHTTP01IngressNameOverride: "ingress-name",
+							v1alpha2.IssueTemporaryCertificateAnnotation:      "true",
 						},
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -219,17 +219,17 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -260,17 +260,17 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -302,20 +302,20 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 						Annotations: map[string]string{
-							v1alpha1.ACMECertificateHTTP01IngressClassOverride: "cert-ing",
+							v1alpha2.ACMECertificateHTTP01IngressClassOverride: "cert-ing",
 						},
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -347,17 +347,17 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -388,17 +388,17 @@ func TestSync(t *testing.T) {
 				},
 			},
 			ClusterIssuerLister: []runtime.Object{acmeClusterIssuer},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -430,17 +430,17 @@ func TestSync(t *testing.T) {
 					},
 				},
 			},
-			ExpectedCreate: []*v1alpha1.Certificate{
+			ExpectedCreate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "example-com-tls",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com", "www.example.com"},
 						SecretName: "example-com-tls",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "ClusterIssuer",
 						},
@@ -531,16 +531,16 @@ func TestSync(t *testing.T) {
 				},
 			},
 			CertificateLister: []runtime.Object{
-				&v1alpha1.Certificate{
+				&v1alpha2.Certificate{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -577,17 +577,17 @@ func TestSync(t *testing.T) {
 				),
 			},
 
-			ExpectedUpdate: []*v1alpha1.Certificate{
+			ExpectedUpdate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -621,7 +621,7 @@ func TestSync(t *testing.T) {
 				},
 			},
 			CertificateLister: []runtime.Object{
-				&v1alpha1.Certificate{
+				&v1alpha2.Certificate{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      "cert-secret-name",
 						Namespace: gen.DefaultTestNamespace,
@@ -630,17 +630,17 @@ func TestSync(t *testing.T) {
 						},
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "cert-secret-name",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
 					},
 				},
 			},
-			ExpectedUpdate: []*v1alpha1.Certificate{
+			ExpectedUpdate: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      "cert-secret-name",
@@ -650,10 +650,10 @@ func TestSync(t *testing.T) {
 						},
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "cert-secret-name",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -685,16 +685,16 @@ func TestSync(t *testing.T) {
 				},
 			},
 			CertificateLister: []runtime.Object{
-				&v1alpha1.Certificate{
+				&v1alpha2.Certificate{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: []metav1.OwnerReference{},
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -726,16 +726,16 @@ func TestSync(t *testing.T) {
 				},
 			},
 			CertificateLister: []runtime.Object{
-				&v1alpha1.Certificate{
+				&v1alpha2.Certificate{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("not-ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -758,33 +758,33 @@ func TestSync(t *testing.T) {
 				},
 			},
 			CertificateLister: []runtime.Object{
-				&v1alpha1.Certificate{
+				&v1alpha2.Certificate{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
 					},
 				},
 			},
-			ExpectedDelete: []*v1alpha1.Certificate{
+			ExpectedDelete: []*v1alpha2.Certificate{
 				{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:            "existing-crt",
 						Namespace:       gen.DefaultTestNamespace,
 						OwnerReferences: buildOwnerReferences("ingress-name", gen.DefaultTestNamespace),
 					},
-					Spec: v1alpha1.CertificateSpec{
+					Spec: v1alpha2.CertificateSpec{
 						DNSNames:   []string{"example.com"},
 						SecretName: "existing-crt",
-						IssuerRef: v1alpha1.ObjectReference{
+						IssuerRef: v1alpha2.ObjectReference{
 							Name: "issuer-name",
 							Kind: "Issuer",
 						},
@@ -803,7 +803,7 @@ func TestSync(t *testing.T) {
 			for _, cr := range test.ExpectedCreate {
 				expectedActions = append(expectedActions,
 					testpkg.NewAction(coretesting.NewCreateAction(
-						v1alpha1.SchemeGroupVersion.WithResource("certificates"),
+						v1alpha2.SchemeGroupVersion.WithResource("certificates"),
 						cr.Namespace,
 						cr,
 					)),
@@ -812,7 +812,7 @@ func TestSync(t *testing.T) {
 			for _, cr := range test.ExpectedUpdate {
 				expectedActions = append(expectedActions,
 					testpkg.NewAction(coretesting.NewUpdateAction(
-						v1alpha1.SchemeGroupVersion.WithResource("certificates"),
+						v1alpha2.SchemeGroupVersion.WithResource("certificates"),
 						cr.Namespace,
 						cr,
 					)),
@@ -821,7 +821,7 @@ func TestSync(t *testing.T) {
 			for _, cr := range test.ExpectedDelete {
 				expectedActions = append(expectedActions,
 					testpkg.NewAction(coretesting.NewDeleteAction(
-						v1alpha1.SchemeGroupVersion.WithResource("certificates"),
+						v1alpha2.SchemeGroupVersion.WithResource("certificates"),
 						cr.Namespace,
 						cr.Name,
 					)))
@@ -837,9 +837,9 @@ func TestSync(t *testing.T) {
 				kClient:             b.Client,
 				cmClient:            b.CMClient,
 				recorder:            b.Recorder,
-				issuerLister:        b.SharedInformerFactory.Certmanager().V1alpha1().Issuers().Lister(),
-				clusterIssuerLister: b.SharedInformerFactory.Certmanager().V1alpha1().ClusterIssuers().Lister(),
-				certificateLister:   b.SharedInformerFactory.Certmanager().V1alpha1().Certificates().Lister(),
+				issuerLister:        b.SharedInformerFactory.Certmanager().V1alpha2().Issuers().Lister(),
+				clusterIssuerLister: b.SharedInformerFactory.Certmanager().V1alpha2().ClusterIssuers().Lister(),
+				certificateLister:   b.SharedInformerFactory.Certmanager().V1alpha2().Certificates().Lister(),
 				defaults: defaults{
 					issuerName:                 test.DefaultIssuerName,
 					issuerKind:                 test.DefaultIssuerKind,
@@ -868,10 +868,10 @@ func TestSync(t *testing.T) {
 }
 
 type fakeHelper struct {
-	issuer v1alpha1.GenericIssuer
+	issuer v1alpha2.GenericIssuer
 }
 
-func (f *fakeHelper) GetGenericIssuer(ref v1alpha1.ObjectReference, ns string) (v1alpha1.GenericIssuer, error) {
+func (f *fakeHelper) GetGenericIssuer(ref v1alpha2.ObjectReference, ns string) (v1alpha2.GenericIssuer, error) {
 	if f.issuer == nil {
 		return nil, fmt.Errorf("no issuer specified on fake helper")
 	}
@@ -931,28 +931,28 @@ func TestIssuerForIngress(t *testing.T) {
 	}
 }
 
-func buildCertificate(name, namespace string, ownerReferences []metav1.OwnerReference) *v1alpha1.Certificate {
-	return &v1alpha1.Certificate{
+func buildCertificate(name, namespace string, ownerReferences []metav1.OwnerReference) *v1alpha2.Certificate {
+	return &v1alpha2.Certificate{
 		ObjectMeta: metav1.ObjectMeta{
 			Name:            name,
 			Namespace:       namespace,
 			OwnerReferences: ownerReferences,
 		},
-		Spec: v1alpha1.CertificateSpec{
+		Spec: v1alpha2.CertificateSpec{
 			SecretName: name,
 		},
 	}
 }
 
-func buildACMEIssuer(name, namespace string) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func buildACMEIssuer(name, namespace string) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      name,
 			Namespace: namespace,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				ACME: &v1alpha1.ACMEIssuer{},
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				ACME: &v1alpha2.ACMEIssuer{},
 			},
 		},
 	}
diff --git a/pkg/controller/issuers/BUILD.bazel b/pkg/controller/issuers/BUILD.bazel
index 6a3552b4c..369957014 100644
--- a/pkg/controller/issuers/BUILD.bazel
+++ b/pkg/controller/issuers/BUILD.bazel
@@ -11,9 +11,9 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/internal/apis/certmanager/validation:go_default_library",
         "//pkg/issuer:go_default_library",
@@ -36,7 +36,7 @@ go_test(
     srcs = ["sync_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
diff --git a/pkg/controller/issuers/checks.go b/pkg/controller/issuers/checks.go
index 539930f2e..65fddcc91 100644
--- a/pkg/controller/issuers/checks.go
+++ b/pkg/controller/issuers/checks.go
@@ -22,17 +22,17 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/labels"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func (c *controller) issuersForSecret(secret *corev1.Secret) ([]*v1alpha1.Issuer, error) {
+func (c *controller) issuersForSecret(secret *corev1.Secret) ([]*v1alpha2.Issuer, error) {
 	issuers, err := c.issuerLister.List(labels.NewSelector())
 
 	if err != nil {
 		return nil, fmt.Errorf("error listing certificiates: %s", err.Error())
 	}
 
-	var affected []*v1alpha1.Issuer
+	var affected []*v1alpha2.Issuer
 	for _, iss := range issuers {
 		if iss.Namespace != secret.Namespace {
 			continue
diff --git a/pkg/controller/issuers/controller.go b/pkg/controller/issuers/controller.go
index b88adeee8..144f64bf3 100644
--- a/pkg/controller/issuers/controller.go
+++ b/pkg/controller/issuers/controller.go
@@ -28,7 +28,7 @@ import (
 	"k8s.io/client-go/util/workqueue"
 
 	cmclient "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
@@ -67,7 +67,7 @@ func (c *controller) Register(ctx *controllerpkg.Context) (workqueue.RateLimitin
 	c.queue = workqueue.NewNamedRateLimitingQueue(controllerpkg.DefaultItemBasedRateLimiter(), ControllerName)
 
 	// obtain references to all the informers used by this controller
-	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha1().Issuers()
+	issuerInformer := ctx.SharedInformerFactory.Certmanager().V1alpha2().Issuers()
 	secretInformer := ctx.KubeSharedInformerFactory.Core().V1().Secrets()
 	// build a list of InformerSynced functions that will be returned by the Register method.
 	// the controller will only begin processing items once all of these informers have synced.
diff --git a/pkg/controller/issuers/sync.go b/pkg/controller/issuers/sync.go
index 5851cb18f..d34979bec 100644
--- a/pkg/controller/issuers/sync.go
+++ b/pkg/controller/issuers/sync.go
@@ -25,7 +25,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/errors"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/validation"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/metrics"
@@ -38,7 +38,7 @@ const (
 	messageErrorInitIssuer = "Error initializing issuer: "
 )
 
-func (c *controller) Sync(ctx context.Context, iss *v1alpha1.Issuer) (err error) {
+func (c *controller) Sync(ctx context.Context, iss *v1alpha2.Issuer) (err error) {
 	metrics.Default.IncrementSyncCallCount(ControllerName)
 
 	log := logf.FromContext(ctx)
@@ -53,14 +53,14 @@ func (c *controller) Sync(ctx context.Context, iss *v1alpha1.Issuer) (err error)
 	el := validation.ValidateIssuer(issuerCopy)
 	if len(el) > 0 {
 		msg := fmt.Sprintf("Resource validation failed: %v", el.ToAggregate())
-		apiutil.SetIssuerCondition(issuerCopy, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorConfig, msg)
+		apiutil.SetIssuerCondition(issuerCopy, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorConfig, msg)
 		return
 	}
 
 	// Remove existing ErrorConfig condition if it exists
 	for i, c := range issuerCopy.Status.Conditions {
-		if c.Type == v1alpha1.IssuerConditionReady {
-			if c.Reason == errorConfig && c.Status == v1alpha1.ConditionFalse {
+		if c.Type == v1alpha2.IssuerConditionReady {
+			if c.Reason == errorConfig && c.Status == v1alpha2.ConditionFalse {
 				issuerCopy.Status.Conditions = append(issuerCopy.Status.Conditions[:i], issuerCopy.Status.Conditions[i+1:]...)
 				break
 			}
@@ -84,12 +84,12 @@ func (c *controller) Sync(ctx context.Context, iss *v1alpha1.Issuer) (err error)
 	return nil
 }
 
-func (c *controller) updateIssuerStatus(old, new *v1alpha1.Issuer) (*v1alpha1.Issuer, error) {
+func (c *controller) updateIssuerStatus(old, new *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
 	if reflect.DeepEqual(old.Status, new.Status) {
 		return nil, nil
 	}
 	// TODO: replace Update call with UpdateStatus. This requires a custom API
 	// server with the /status subresource enabled and/or subresource support
 	// for CRDs (https://github.com/kubernetes/kubernetes/issues/38113)
-	return c.cmClient.CertmanagerV1alpha1().Issuers(new.Namespace).Update(new)
+	return c.cmClient.CertmanagerV1alpha2().Issuers(new.Namespace).Update(new)
 }
diff --git a/pkg/controller/issuers/sync_test.go b/pkg/controller/issuers/sync_test.go
index 7e370966b..64c2ccbf2 100644
--- a/pkg/controller/issuers/sync_test.go
+++ b/pkg/controller/issuers/sync_test.go
@@ -25,12 +25,12 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	clientgotesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
-func newFakeIssuerWithStatus(name string, status v1alpha1.IssuerStatus) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func newFakeIssuerWithStatus(name string, status v1alpha2.IssuerStatus) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
@@ -56,18 +56,18 @@ func TestUpdateIssuerStatus(t *testing.T) {
 	cmClient := b.FakeCMClient()
 	assertNumberOfActions(t, fatalf, filter(cmClient.Actions()), 0)
 
-	originalIssuer := newFakeIssuerWithStatus("test", v1alpha1.IssuerStatus{})
+	originalIssuer := newFakeIssuerWithStatus("test", v1alpha2.IssuerStatus{})
 
-	issuer, err := cmClient.CertmanagerV1alpha1().Issuers("testns").Create(originalIssuer)
+	issuer, err := cmClient.CertmanagerV1alpha2().Issuers("testns").Create(originalIssuer)
 	assertErrIsNil(t, fatalf, err)
 
 	assertNumberOfActions(t, fatalf, filter(cmClient.Actions()), 1)
 
-	newStatus := v1alpha1.IssuerStatus{
-		Conditions: []v1alpha1.IssuerCondition{
+	newStatus := v1alpha2.IssuerStatus{
+		Conditions: []v1alpha2.IssuerCondition{
 			{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			},
 		},
 	}
@@ -109,10 +109,10 @@ func assertErrIsNil(t *testing.T, f failfFunc, err error) {
 	}
 }
 
-func assertIsIssuer(t *testing.T, f failfFunc, obj runtime.Object) *v1alpha1.Issuer {
-	issuer, ok := obj.(*v1alpha1.Issuer)
+func assertIsIssuer(t *testing.T, f failfFunc, obj runtime.Object) *v1alpha2.Issuer {
+	issuer, ok := obj.(*v1alpha2.Issuer)
 	if !ok {
-		f(t, "expected runtime.Object to be of type *v1alpha1.Issuer, but it was %#v", obj)
+		f(t, "expected runtime.Object to be of type *v1alpha2.Issuer, but it was %#v", obj)
 	}
 	return issuer
 }
diff --git a/pkg/controller/webhookbootstrap/BUILD.bazel b/pkg/controller/webhookbootstrap/BUILD.bazel
index 33347f382..d9be092ca 100644
--- a/pkg/controller/webhookbootstrap/BUILD.bazel
+++ b/pkg/controller/webhookbootstrap/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/controller/webhookbootstrap",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/logs:go_default_library",
         "//pkg/scheduler:go_default_library",
@@ -44,7 +44,7 @@ go_test(
     srcs = ["controller_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//test/unit/gen:go_default_library",
diff --git a/pkg/controller/webhookbootstrap/controller.go b/pkg/controller/webhookbootstrap/controller.go
index 4a2736e8d..221a22806 100644
--- a/pkg/controller/webhookbootstrap/controller.go
+++ b/pkg/controller/webhookbootstrap/controller.go
@@ -33,7 +33,7 @@ import (
 	"k8s.io/client-go/util/workqueue"
 	"k8s.io/utils/clock"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	controllerpkg "github.com/jetstack/cert-manager/pkg/controller"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/scheduler"
@@ -293,7 +293,7 @@ func (c *controller) certificateRequiresIssuance(ctx context.Context, log logr.L
 	// read the existing certificate
 	crtData := readSecretDataKey(secret, corev1.TLSCertKey)
 	if crtData == nil {
-		log.Info("ussuing webhook certificate")
+		log.Info("issuing webhook certificate")
 		return true
 	}
 	cert, err := pki.DecodeX509CertificateBytes(crtData)
diff --git a/pkg/controller/webhookbootstrap/controller_test.go b/pkg/controller/webhookbootstrap/controller_test.go
index f284cb07c..6c1b6e909 100644
--- a/pkg/controller/webhookbootstrap/controller_test.go
+++ b/pkg/controller/webhookbootstrap/controller_test.go
@@ -29,7 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	coretesting "k8s.io/client-go/testing"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
diff --git a/pkg/internal/apis/certmanager/BUILD.bazel b/pkg/internal/apis/certmanager/BUILD.bazel
index 4bc70edf6..352a1ae6d 100644
--- a/pkg/internal/apis/certmanager/BUILD.bazel
+++ b/pkg/internal/apis/certmanager/BUILD.bazel
@@ -38,7 +38,7 @@ filegroup(
         ":package-srcs",
         "//pkg/internal/apis/certmanager/fuzzer:all-srcs",
         "//pkg/internal/apis/certmanager/install:all-srcs",
-        "//pkg/internal/apis/certmanager/v1alpha1:all-srcs",
+        "//pkg/internal/apis/certmanager/v1alpha2:all-srcs",
         "//pkg/internal/apis/certmanager/validation:all-srcs",
     ],
     tags = ["automanaged"],
diff --git a/pkg/internal/apis/certmanager/fuzzer/BUILD.bazel b/pkg/internal/apis/certmanager/fuzzer/BUILD.bazel
index 97a942441..bea76024e 100644
--- a/pkg/internal/apis/certmanager/fuzzer/BUILD.bazel
+++ b/pkg/internal/apis/certmanager/fuzzer/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/fuzzer",
     visibility = ["//pkg:__subpackages__"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/apis/certmanager:go_default_library",
         "//vendor/github.com/google/gofuzz:go_default_library",
         "//vendor/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1:go_default_library",
diff --git a/pkg/internal/apis/certmanager/fuzzer/fuzzer.go b/pkg/internal/apis/certmanager/fuzzer/fuzzer.go
index 02527f843..cd10e1d07 100644
--- a/pkg/internal/apis/certmanager/fuzzer/fuzzer.go
+++ b/pkg/internal/apis/certmanager/fuzzer/fuzzer.go
@@ -22,7 +22,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	runtimeserializer "k8s.io/apimachinery/pkg/runtime/serializer"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager"
 )
 
@@ -36,37 +36,37 @@ var Funcs = func(codecs runtimeserializer.CodecFactory) []interface{} {
 				s.Spec.DNSNames = []string{s.Spec.CommonName}
 			}
 			if s.Spec.IssuerRef.Kind == "" {
-				s.Spec.IssuerRef.Kind = v1alpha1.IssuerKind
+				s.Spec.IssuerRef.Kind = v1alpha2.IssuerKind
 			}
 			if s.Spec.Duration == nil {
-				s.Spec.Duration = &metav1.Duration{Duration: v1alpha1.DefaultCertificateDuration}
+				s.Spec.Duration = &metav1.Duration{Duration: v1alpha2.DefaultCertificateDuration}
 			}
 			if s.Spec.RenewBefore == nil {
-				s.Spec.RenewBefore = &metav1.Duration{Duration: v1alpha1.DefaultRenewBefore}
+				s.Spec.RenewBefore = &metav1.Duration{Duration: v1alpha2.DefaultRenewBefore}
 			}
 		},
 		func(s *certmanager.Order, c fuzz.Continue) {
 			c.FuzzNoCustom(s) // fuzz self without calling this function again
 
 			if s.Spec.IssuerRef.Kind == "" {
-				s.Spec.IssuerRef.Kind = v1alpha1.IssuerKind
+				s.Spec.IssuerRef.Kind = v1alpha2.IssuerKind
 			}
 		},
 		func(s *certmanager.Challenge, c fuzz.Continue) {
 			c.FuzzNoCustom(s) // fuzz self without calling this function again
 
 			if s.Spec.IssuerRef.Kind == "" {
-				s.Spec.IssuerRef.Kind = v1alpha1.IssuerKind
+				s.Spec.IssuerRef.Kind = v1alpha2.IssuerKind
 			}
 		},
 		func(s *certmanager.CertificateRequest, c fuzz.Continue) {
 			c.FuzzNoCustom(s) // fuzz self without calling this function again
 
 			if s.Spec.IssuerRef.Kind == "" {
-				s.Spec.IssuerRef.Kind = v1alpha1.IssuerKind
+				s.Spec.IssuerRef.Kind = v1alpha2.IssuerKind
 			}
 			if s.Spec.Duration == nil {
-				s.Spec.Duration = &metav1.Duration{Duration: v1alpha1.DefaultCertificateDuration}
+				s.Spec.Duration = &metav1.Duration{Duration: v1alpha2.DefaultCertificateDuration}
 			}
 		},
 		func(s *certmanager.ACMEIssuerDNS01ProviderWebhook, c fuzz.Continue) {
diff --git a/pkg/internal/apis/certmanager/install/BUILD.bazel b/pkg/internal/apis/certmanager/install/BUILD.bazel
index c881b68b9..5b5a51e4b 100644
--- a/pkg/internal/apis/certmanager/install/BUILD.bazel
+++ b/pkg/internal/apis/certmanager/install/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/internal/apis/certmanager:go_default_library",
-        "//pkg/internal/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/internal/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/util/runtime:go_default_library",
     ],
diff --git a/pkg/internal/apis/certmanager/install/install.go b/pkg/internal/apis/certmanager/install/install.go
index 54805f7af..9f849479b 100644
--- a/pkg/internal/apis/certmanager/install/install.go
+++ b/pkg/internal/apis/certmanager/install/install.go
@@ -23,11 +23,11 @@ import (
 	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
 
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager"
-	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/v1alpha2"
 )
 
 // Install registers the API group and adds types to a scheme
 func Install(scheme *runtime.Scheme) {
 	utilruntime.Must(certmanager.AddToScheme(scheme))
-	utilruntime.Must(v1alpha1.AddToScheme(scheme))
+	utilruntime.Must(v1alpha2.AddToScheme(scheme))
 }
diff --git a/pkg/internal/apis/certmanager/v1alpha2/BUILD.bazel b/pkg/internal/apis/certmanager/v1alpha2/BUILD.bazel
index 4838ccd72..b12775515 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/BUILD.bazel
+++ b/pkg/internal/apis/certmanager/v1alpha2/BUILD.bazel
@@ -9,11 +9,11 @@ go_library(
         "zz_generated.conversion.go",
         "zz_generated.defaults.go",
     ],
-    importpath = "github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/v1alpha1",
+    importpath = "github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/v1alpha2",
     visibility = ["//pkg:__subpackages__"],
     deps = [
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/apis/certmanager:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
         "//vendor/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1:go_default_library",
diff --git a/pkg/internal/apis/certmanager/v1alpha2/defaults.go b/pkg/internal/apis/certmanager/v1alpha2/defaults.go
index 233326a8b..49faf65b1 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/defaults.go
+++ b/pkg/internal/apis/certmanager/v1alpha2/defaults.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"k8s.io/apimachinery/pkg/runtime"
diff --git a/pkg/internal/apis/certmanager/v1alpha2/doc.go b/pkg/internal/apis/certmanager/v1alpha2/doc.go
index 6d2bb444b..bc383e21c 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/doc.go
+++ b/pkg/internal/apis/certmanager/v1alpha2/doc.go
@@ -20,4 +20,4 @@ limitations under the License.
 // +k8s:defaulter-gen-input=../../../../apis/certmanager/v1alpha2
 
 // +groupName=certmanager.k8s.io
-package v1alpha1
+package v1alpha2
diff --git a/pkg/internal/apis/certmanager/v1alpha2/register.go b/pkg/internal/apis/certmanager/v1alpha2/register.go
index 85637c40c..1446b194d 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/register.go
+++ b/pkg/internal/apis/certmanager/v1alpha2/register.go
@@ -14,7 +14,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-package v1alpha1
+package v1alpha2
 
 import (
 	"k8s.io/apimachinery/pkg/runtime/schema"
diff --git a/pkg/internal/apis/certmanager/v1alpha2/zz_generated.conversion.go b/pkg/internal/apis/certmanager/v1alpha2/zz_generated.conversion.go
index d0b03ac7c..f8639aa47 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/zz_generated.conversion.go
+++ b/pkg/internal/apis/certmanager/v1alpha2/zz_generated.conversion.go
@@ -18,12 +18,12 @@ limitations under the License.
 
 // Code generated by conversion-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	unsafe "unsafe"
 
-	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	certmanager "github.com/jetstack/cert-manager/pkg/internal/apis/certmanager"
 	v1 "k8s.io/api/core/v1"
 	v1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
@@ -39,580 +39,580 @@ func init() {
 // RegisterConversions adds conversion functions to the given scheme.
 // Public to allow building arbitrary schemes.
 func RegisterConversions(s *runtime.Scheme) error {
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEAuthorization)(nil), (*certmanager.ACMEAuthorization)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization(a.(*v1alpha1.ACMEAuthorization), b.(*certmanager.ACMEAuthorization), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEAuthorization)(nil), (*certmanager.ACMEAuthorization)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEAuthorization_To_certmanager_ACMEAuthorization(a.(*v1alpha2.ACMEAuthorization), b.(*certmanager.ACMEAuthorization), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEAuthorization)(nil), (*v1alpha1.ACMEAuthorization)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEAuthorization_To_v1alpha1_ACMEAuthorization(a.(*certmanager.ACMEAuthorization), b.(*v1alpha1.ACMEAuthorization), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEAuthorization)(nil), (*v1alpha2.ACMEAuthorization)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEAuthorization_To_v1alpha2_ACMEAuthorization(a.(*certmanager.ACMEAuthorization), b.(*v1alpha2.ACMEAuthorization), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallenge)(nil), (*certmanager.ACMEChallenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallenge_To_certmanager_ACMEChallenge(a.(*v1alpha1.ACMEChallenge), b.(*certmanager.ACMEChallenge), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallenge)(nil), (*certmanager.ACMEChallenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallenge_To_certmanager_ACMEChallenge(a.(*v1alpha2.ACMEChallenge), b.(*certmanager.ACMEChallenge), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallenge)(nil), (*v1alpha1.ACMEChallenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallenge_To_v1alpha1_ACMEChallenge(a.(*certmanager.ACMEChallenge), b.(*v1alpha1.ACMEChallenge), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallenge)(nil), (*v1alpha2.ACMEChallenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallenge_To_v1alpha2_ACMEChallenge(a.(*certmanager.ACMEChallenge), b.(*v1alpha2.ACMEChallenge), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolver)(nil), (*certmanager.ACMEChallengeSolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(a.(*v1alpha1.ACMEChallengeSolver), b.(*certmanager.ACMEChallengeSolver), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolver)(nil), (*certmanager.ACMEChallengeSolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(a.(*v1alpha2.ACMEChallengeSolver), b.(*certmanager.ACMEChallengeSolver), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolver)(nil), (*v1alpha1.ACMEChallengeSolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolver_To_v1alpha1_ACMEChallengeSolver(a.(*certmanager.ACMEChallengeSolver), b.(*v1alpha1.ACMEChallengeSolver), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolver)(nil), (*v1alpha2.ACMEChallengeSolver)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolver_To_v1alpha2_ACMEChallengeSolver(a.(*certmanager.ACMEChallengeSolver), b.(*v1alpha2.ACMEChallengeSolver), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolverDNS01)(nil), (*certmanager.ACMEChallengeSolverDNS01)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(a.(*v1alpha1.ACMEChallengeSolverDNS01), b.(*certmanager.ACMEChallengeSolverDNS01), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolverDNS01)(nil), (*certmanager.ACMEChallengeSolverDNS01)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(a.(*v1alpha2.ACMEChallengeSolverDNS01), b.(*certmanager.ACMEChallengeSolverDNS01), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverDNS01)(nil), (*v1alpha1.ACMEChallengeSolverDNS01)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha1_ACMEChallengeSolverDNS01(a.(*certmanager.ACMEChallengeSolverDNS01), b.(*v1alpha1.ACMEChallengeSolverDNS01), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverDNS01)(nil), (*v1alpha2.ACMEChallengeSolverDNS01)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha2_ACMEChallengeSolverDNS01(a.(*certmanager.ACMEChallengeSolverDNS01), b.(*v1alpha2.ACMEChallengeSolverDNS01), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolverHTTP01)(nil), (*certmanager.ACMEChallengeSolverHTTP01)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(a.(*v1alpha1.ACMEChallengeSolverHTTP01), b.(*certmanager.ACMEChallengeSolverHTTP01), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolverHTTP01)(nil), (*certmanager.ACMEChallengeSolverHTTP01)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(a.(*v1alpha2.ACMEChallengeSolverHTTP01), b.(*certmanager.ACMEChallengeSolverHTTP01), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01)(nil), (*v1alpha1.ACMEChallengeSolverHTTP01)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha1_ACMEChallengeSolverHTTP01(a.(*certmanager.ACMEChallengeSolverHTTP01), b.(*v1alpha1.ACMEChallengeSolverHTTP01), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01)(nil), (*v1alpha2.ACMEChallengeSolverHTTP01)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha2_ACMEChallengeSolverHTTP01(a.(*certmanager.ACMEChallengeSolverHTTP01), b.(*v1alpha2.ACMEChallengeSolverHTTP01), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolverHTTP01Ingress)(nil), (*certmanager.ACMEChallengeSolverHTTP01Ingress)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(a.(*v1alpha1.ACMEChallengeSolverHTTP01Ingress), b.(*certmanager.ACMEChallengeSolverHTTP01Ingress), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolverHTTP01Ingress)(nil), (*certmanager.ACMEChallengeSolverHTTP01Ingress)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(a.(*v1alpha2.ACMEChallengeSolverHTTP01Ingress), b.(*certmanager.ACMEChallengeSolverHTTP01Ingress), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01Ingress)(nil), (*v1alpha1.ACMEChallengeSolverHTTP01Ingress)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha1_ACMEChallengeSolverHTTP01Ingress(a.(*certmanager.ACMEChallengeSolverHTTP01Ingress), b.(*v1alpha1.ACMEChallengeSolverHTTP01Ingress), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01Ingress)(nil), (*v1alpha2.ACMEChallengeSolverHTTP01Ingress)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha2_ACMEChallengeSolverHTTP01Ingress(a.(*certmanager.ACMEChallengeSolverHTTP01Ingress), b.(*v1alpha2.ACMEChallengeSolverHTTP01Ingress), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), (*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(a.(*v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec), b.(*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), (*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(a.(*v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec), b.(*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), (*v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec(a.(*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec), b.(*v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), (*v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec(a.(*certmanager.ACMEChallengeSolverHTTP01IngressPodSpec), b.(*v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), (*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(a.(*v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate), b.(*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), (*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(a.(*v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate), b.(*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), (*v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate(a.(*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate), b.(*v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), (*v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate(a.(*certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate), b.(*v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuer)(nil), (*certmanager.ACMEIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuer_To_certmanager_ACMEIssuer(a.(*v1alpha1.ACMEIssuer), b.(*certmanager.ACMEIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuer)(nil), (*certmanager.ACMEIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuer_To_certmanager_ACMEIssuer(a.(*v1alpha2.ACMEIssuer), b.(*certmanager.ACMEIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuer)(nil), (*v1alpha1.ACMEIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuer_To_v1alpha1_ACMEIssuer(a.(*certmanager.ACMEIssuer), b.(*v1alpha1.ACMEIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuer)(nil), (*v1alpha2.ACMEIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuer_To_v1alpha2_ACMEIssuer(a.(*certmanager.ACMEIssuer), b.(*v1alpha2.ACMEIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderAcmeDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(a.(*v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS), b.(*certmanager.ACMEIssuerDNS01ProviderAcmeDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderAcmeDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(a.(*v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS), b.(*certmanager.ACMEIssuerDNS01ProviderAcmeDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAcmeDNS)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS(a.(*certmanager.ACMEIssuerDNS01ProviderAcmeDNS), b.(*v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAcmeDNS)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS(a.(*certmanager.ACMEIssuerDNS01ProviderAcmeDNS), b.(*v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderAkamai)(nil), (*certmanager.ACMEIssuerDNS01ProviderAkamai)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(a.(*v1alpha1.ACMEIssuerDNS01ProviderAkamai), b.(*certmanager.ACMEIssuerDNS01ProviderAkamai), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderAkamai)(nil), (*certmanager.ACMEIssuerDNS01ProviderAkamai)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(a.(*v1alpha2.ACMEIssuerDNS01ProviderAkamai), b.(*certmanager.ACMEIssuerDNS01ProviderAkamai), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAkamai)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderAkamai)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha1_ACMEIssuerDNS01ProviderAkamai(a.(*certmanager.ACMEIssuerDNS01ProviderAkamai), b.(*v1alpha1.ACMEIssuerDNS01ProviderAkamai), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAkamai)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderAkamai)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha2_ACMEIssuerDNS01ProviderAkamai(a.(*certmanager.ACMEIssuerDNS01ProviderAkamai), b.(*v1alpha2.ACMEIssuerDNS01ProviderAkamai), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderAzureDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderAzureDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(a.(*v1alpha1.ACMEIssuerDNS01ProviderAzureDNS), b.(*certmanager.ACMEIssuerDNS01ProviderAzureDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderAzureDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderAzureDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(a.(*v1alpha2.ACMEIssuerDNS01ProviderAzureDNS), b.(*certmanager.ACMEIssuerDNS01ProviderAzureDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAzureDNS)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderAzureDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS(a.(*certmanager.ACMEIssuerDNS01ProviderAzureDNS), b.(*v1alpha1.ACMEIssuerDNS01ProviderAzureDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderAzureDNS)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderAzureDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS(a.(*certmanager.ACMEIssuerDNS01ProviderAzureDNS), b.(*v1alpha2.ACMEIssuerDNS01ProviderAzureDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderCloudDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderCloudDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(a.(*v1alpha1.ACMEIssuerDNS01ProviderCloudDNS), b.(*certmanager.ACMEIssuerDNS01ProviderCloudDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderCloudDNS)(nil), (*certmanager.ACMEIssuerDNS01ProviderCloudDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(a.(*v1alpha2.ACMEIssuerDNS01ProviderCloudDNS), b.(*certmanager.ACMEIssuerDNS01ProviderCloudDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderCloudDNS)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderCloudDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS(a.(*certmanager.ACMEIssuerDNS01ProviderCloudDNS), b.(*v1alpha1.ACMEIssuerDNS01ProviderCloudDNS), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderCloudDNS)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderCloudDNS)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS(a.(*certmanager.ACMEIssuerDNS01ProviderCloudDNS), b.(*v1alpha2.ACMEIssuerDNS01ProviderCloudDNS), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderCloudflare)(nil), (*certmanager.ACMEIssuerDNS01ProviderCloudflare)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(a.(*v1alpha1.ACMEIssuerDNS01ProviderCloudflare), b.(*certmanager.ACMEIssuerDNS01ProviderCloudflare), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderCloudflare)(nil), (*certmanager.ACMEIssuerDNS01ProviderCloudflare)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(a.(*v1alpha2.ACMEIssuerDNS01ProviderCloudflare), b.(*certmanager.ACMEIssuerDNS01ProviderCloudflare), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderCloudflare)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderCloudflare)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha1_ACMEIssuerDNS01ProviderCloudflare(a.(*certmanager.ACMEIssuerDNS01ProviderCloudflare), b.(*v1alpha1.ACMEIssuerDNS01ProviderCloudflare), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderCloudflare)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderCloudflare)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha2_ACMEIssuerDNS01ProviderCloudflare(a.(*certmanager.ACMEIssuerDNS01ProviderCloudflare), b.(*v1alpha2.ACMEIssuerDNS01ProviderCloudflare), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean)(nil), (*certmanager.ACMEIssuerDNS01ProviderDigitalOcean)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(a.(*v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean), b.(*certmanager.ACMEIssuerDNS01ProviderDigitalOcean), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean)(nil), (*certmanager.ACMEIssuerDNS01ProviderDigitalOcean)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(a.(*v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean), b.(*certmanager.ACMEIssuerDNS01ProviderDigitalOcean), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderDigitalOcean)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean(a.(*certmanager.ACMEIssuerDNS01ProviderDigitalOcean), b.(*v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderDigitalOcean)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean(a.(*certmanager.ACMEIssuerDNS01ProviderDigitalOcean), b.(*v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderRFC2136)(nil), (*certmanager.ACMEIssuerDNS01ProviderRFC2136)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(a.(*v1alpha1.ACMEIssuerDNS01ProviderRFC2136), b.(*certmanager.ACMEIssuerDNS01ProviderRFC2136), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderRFC2136)(nil), (*certmanager.ACMEIssuerDNS01ProviderRFC2136)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(a.(*v1alpha2.ACMEIssuerDNS01ProviderRFC2136), b.(*certmanager.ACMEIssuerDNS01ProviderRFC2136), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderRFC2136)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderRFC2136)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssuerDNS01ProviderRFC2136(a.(*certmanager.ACMEIssuerDNS01ProviderRFC2136), b.(*v1alpha1.ACMEIssuerDNS01ProviderRFC2136), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderRFC2136)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderRFC2136)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha2_ACMEIssuerDNS01ProviderRFC2136(a.(*certmanager.ACMEIssuerDNS01ProviderRFC2136), b.(*v1alpha2.ACMEIssuerDNS01ProviderRFC2136), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderRoute53)(nil), (*certmanager.ACMEIssuerDNS01ProviderRoute53)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(a.(*v1alpha1.ACMEIssuerDNS01ProviderRoute53), b.(*certmanager.ACMEIssuerDNS01ProviderRoute53), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderRoute53)(nil), (*certmanager.ACMEIssuerDNS01ProviderRoute53)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(a.(*v1alpha2.ACMEIssuerDNS01ProviderRoute53), b.(*certmanager.ACMEIssuerDNS01ProviderRoute53), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderRoute53)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderRoute53)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssuerDNS01ProviderRoute53(a.(*certmanager.ACMEIssuerDNS01ProviderRoute53), b.(*v1alpha1.ACMEIssuerDNS01ProviderRoute53), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderRoute53)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderRoute53)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha2_ACMEIssuerDNS01ProviderRoute53(a.(*certmanager.ACMEIssuerDNS01ProviderRoute53), b.(*v1alpha2.ACMEIssuerDNS01ProviderRoute53), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerDNS01ProviderWebhook)(nil), (*certmanager.ACMEIssuerDNS01ProviderWebhook)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(a.(*v1alpha1.ACMEIssuerDNS01ProviderWebhook), b.(*certmanager.ACMEIssuerDNS01ProviderWebhook), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerDNS01ProviderWebhook)(nil), (*certmanager.ACMEIssuerDNS01ProviderWebhook)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(a.(*v1alpha2.ACMEIssuerDNS01ProviderWebhook), b.(*certmanager.ACMEIssuerDNS01ProviderWebhook), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderWebhook)(nil), (*v1alpha1.ACMEIssuerDNS01ProviderWebhook)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha1_ACMEIssuerDNS01ProviderWebhook(a.(*certmanager.ACMEIssuerDNS01ProviderWebhook), b.(*v1alpha1.ACMEIssuerDNS01ProviderWebhook), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerDNS01ProviderWebhook)(nil), (*v1alpha2.ACMEIssuerDNS01ProviderWebhook)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha2_ACMEIssuerDNS01ProviderWebhook(a.(*certmanager.ACMEIssuerDNS01ProviderWebhook), b.(*v1alpha2.ACMEIssuerDNS01ProviderWebhook), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ACMEIssuerStatus)(nil), (*certmanager.ACMEIssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(a.(*v1alpha1.ACMEIssuerStatus), b.(*certmanager.ACMEIssuerStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ACMEIssuerStatus)(nil), (*certmanager.ACMEIssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(a.(*v1alpha2.ACMEIssuerStatus), b.(*certmanager.ACMEIssuerStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerStatus)(nil), (*v1alpha1.ACMEIssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ACMEIssuerStatus_To_v1alpha1_ACMEIssuerStatus(a.(*certmanager.ACMEIssuerStatus), b.(*v1alpha1.ACMEIssuerStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ACMEIssuerStatus)(nil), (*v1alpha2.ACMEIssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ACMEIssuerStatus_To_v1alpha2_ACMEIssuerStatus(a.(*certmanager.ACMEIssuerStatus), b.(*v1alpha2.ACMEIssuerStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CAIssuer)(nil), (*certmanager.CAIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CAIssuer_To_certmanager_CAIssuer(a.(*v1alpha1.CAIssuer), b.(*certmanager.CAIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CAIssuer)(nil), (*certmanager.CAIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CAIssuer_To_certmanager_CAIssuer(a.(*v1alpha2.CAIssuer), b.(*certmanager.CAIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CAIssuer)(nil), (*v1alpha1.CAIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CAIssuer_To_v1alpha1_CAIssuer(a.(*certmanager.CAIssuer), b.(*v1alpha1.CAIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CAIssuer)(nil), (*v1alpha2.CAIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CAIssuer_To_v1alpha2_CAIssuer(a.(*certmanager.CAIssuer), b.(*v1alpha2.CAIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.Certificate)(nil), (*certmanager.Certificate)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_Certificate_To_certmanager_Certificate(a.(*v1alpha1.Certificate), b.(*certmanager.Certificate), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.Certificate)(nil), (*certmanager.Certificate)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_Certificate_To_certmanager_Certificate(a.(*v1alpha2.Certificate), b.(*certmanager.Certificate), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.Certificate)(nil), (*v1alpha1.Certificate)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_Certificate_To_v1alpha1_Certificate(a.(*certmanager.Certificate), b.(*v1alpha1.Certificate), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.Certificate)(nil), (*v1alpha2.Certificate)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_Certificate_To_v1alpha2_Certificate(a.(*certmanager.Certificate), b.(*v1alpha2.Certificate), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateCondition)(nil), (*certmanager.CertificateCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateCondition_To_certmanager_CertificateCondition(a.(*v1alpha1.CertificateCondition), b.(*certmanager.CertificateCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateCondition)(nil), (*certmanager.CertificateCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateCondition_To_certmanager_CertificateCondition(a.(*v1alpha2.CertificateCondition), b.(*certmanager.CertificateCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateCondition)(nil), (*v1alpha1.CertificateCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateCondition_To_v1alpha1_CertificateCondition(a.(*certmanager.CertificateCondition), b.(*v1alpha1.CertificateCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateCondition)(nil), (*v1alpha2.CertificateCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateCondition_To_v1alpha2_CertificateCondition(a.(*certmanager.CertificateCondition), b.(*v1alpha2.CertificateCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateDNSNameSelector)(nil), (*certmanager.CertificateDNSNameSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(a.(*v1alpha1.CertificateDNSNameSelector), b.(*certmanager.CertificateDNSNameSelector), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateDNSNameSelector)(nil), (*certmanager.CertificateDNSNameSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(a.(*v1alpha2.CertificateDNSNameSelector), b.(*certmanager.CertificateDNSNameSelector), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateDNSNameSelector)(nil), (*v1alpha1.CertificateDNSNameSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateDNSNameSelector_To_v1alpha1_CertificateDNSNameSelector(a.(*certmanager.CertificateDNSNameSelector), b.(*v1alpha1.CertificateDNSNameSelector), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateDNSNameSelector)(nil), (*v1alpha2.CertificateDNSNameSelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateDNSNameSelector_To_v1alpha2_CertificateDNSNameSelector(a.(*certmanager.CertificateDNSNameSelector), b.(*v1alpha2.CertificateDNSNameSelector), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateList)(nil), (*certmanager.CertificateList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateList_To_certmanager_CertificateList(a.(*v1alpha1.CertificateList), b.(*certmanager.CertificateList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateList)(nil), (*certmanager.CertificateList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateList_To_certmanager_CertificateList(a.(*v1alpha2.CertificateList), b.(*certmanager.CertificateList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateList)(nil), (*v1alpha1.CertificateList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateList_To_v1alpha1_CertificateList(a.(*certmanager.CertificateList), b.(*v1alpha1.CertificateList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateList)(nil), (*v1alpha2.CertificateList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateList_To_v1alpha2_CertificateList(a.(*certmanager.CertificateList), b.(*v1alpha2.CertificateList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateRequest)(nil), (*certmanager.CertificateRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateRequest_To_certmanager_CertificateRequest(a.(*v1alpha1.CertificateRequest), b.(*certmanager.CertificateRequest), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateRequest)(nil), (*certmanager.CertificateRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateRequest_To_certmanager_CertificateRequest(a.(*v1alpha2.CertificateRequest), b.(*certmanager.CertificateRequest), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequest)(nil), (*v1alpha1.CertificateRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateRequest_To_v1alpha1_CertificateRequest(a.(*certmanager.CertificateRequest), b.(*v1alpha1.CertificateRequest), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequest)(nil), (*v1alpha2.CertificateRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateRequest_To_v1alpha2_CertificateRequest(a.(*certmanager.CertificateRequest), b.(*v1alpha2.CertificateRequest), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateRequestCondition)(nil), (*certmanager.CertificateRequestCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(a.(*v1alpha1.CertificateRequestCondition), b.(*certmanager.CertificateRequestCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateRequestCondition)(nil), (*certmanager.CertificateRequestCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(a.(*v1alpha2.CertificateRequestCondition), b.(*certmanager.CertificateRequestCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestCondition)(nil), (*v1alpha1.CertificateRequestCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateRequestCondition_To_v1alpha1_CertificateRequestCondition(a.(*certmanager.CertificateRequestCondition), b.(*v1alpha1.CertificateRequestCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestCondition)(nil), (*v1alpha2.CertificateRequestCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateRequestCondition_To_v1alpha2_CertificateRequestCondition(a.(*certmanager.CertificateRequestCondition), b.(*v1alpha2.CertificateRequestCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateRequestList)(nil), (*certmanager.CertificateRequestList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateRequestList_To_certmanager_CertificateRequestList(a.(*v1alpha1.CertificateRequestList), b.(*certmanager.CertificateRequestList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateRequestList)(nil), (*certmanager.CertificateRequestList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateRequestList_To_certmanager_CertificateRequestList(a.(*v1alpha2.CertificateRequestList), b.(*certmanager.CertificateRequestList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestList)(nil), (*v1alpha1.CertificateRequestList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateRequestList_To_v1alpha1_CertificateRequestList(a.(*certmanager.CertificateRequestList), b.(*v1alpha1.CertificateRequestList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestList)(nil), (*v1alpha2.CertificateRequestList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateRequestList_To_v1alpha2_CertificateRequestList(a.(*certmanager.CertificateRequestList), b.(*v1alpha2.CertificateRequestList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateRequestSpec)(nil), (*certmanager.CertificateRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(a.(*v1alpha1.CertificateRequestSpec), b.(*certmanager.CertificateRequestSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateRequestSpec)(nil), (*certmanager.CertificateRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(a.(*v1alpha2.CertificateRequestSpec), b.(*certmanager.CertificateRequestSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestSpec)(nil), (*v1alpha1.CertificateRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec(a.(*certmanager.CertificateRequestSpec), b.(*v1alpha1.CertificateRequestSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestSpec)(nil), (*v1alpha2.CertificateRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec(a.(*certmanager.CertificateRequestSpec), b.(*v1alpha2.CertificateRequestSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateRequestStatus)(nil), (*certmanager.CertificateRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(a.(*v1alpha1.CertificateRequestStatus), b.(*certmanager.CertificateRequestStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateRequestStatus)(nil), (*certmanager.CertificateRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(a.(*v1alpha2.CertificateRequestStatus), b.(*certmanager.CertificateRequestStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestStatus)(nil), (*v1alpha1.CertificateRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus(a.(*certmanager.CertificateRequestStatus), b.(*v1alpha1.CertificateRequestStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateRequestStatus)(nil), (*v1alpha2.CertificateRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus(a.(*certmanager.CertificateRequestStatus), b.(*v1alpha2.CertificateRequestStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateSpec)(nil), (*certmanager.CertificateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(a.(*v1alpha1.CertificateSpec), b.(*certmanager.CertificateSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateSpec)(nil), (*certmanager.CertificateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec(a.(*v1alpha2.CertificateSpec), b.(*certmanager.CertificateSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateSpec)(nil), (*v1alpha1.CertificateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(a.(*certmanager.CertificateSpec), b.(*v1alpha1.CertificateSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateSpec)(nil), (*v1alpha2.CertificateSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec(a.(*certmanager.CertificateSpec), b.(*v1alpha2.CertificateSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.CertificateStatus)(nil), (*certmanager.CertificateStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus(a.(*v1alpha1.CertificateStatus), b.(*certmanager.CertificateStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.CertificateStatus)(nil), (*certmanager.CertificateStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus(a.(*v1alpha2.CertificateStatus), b.(*certmanager.CertificateStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateStatus)(nil), (*v1alpha1.CertificateStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus(a.(*certmanager.CertificateStatus), b.(*v1alpha1.CertificateStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.CertificateStatus)(nil), (*v1alpha2.CertificateStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus(a.(*certmanager.CertificateStatus), b.(*v1alpha2.CertificateStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.Challenge)(nil), (*certmanager.Challenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_Challenge_To_certmanager_Challenge(a.(*v1alpha1.Challenge), b.(*certmanager.Challenge), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.Challenge)(nil), (*certmanager.Challenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_Challenge_To_certmanager_Challenge(a.(*v1alpha2.Challenge), b.(*certmanager.Challenge), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.Challenge)(nil), (*v1alpha1.Challenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_Challenge_To_v1alpha1_Challenge(a.(*certmanager.Challenge), b.(*v1alpha1.Challenge), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.Challenge)(nil), (*v1alpha2.Challenge)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_Challenge_To_v1alpha2_Challenge(a.(*certmanager.Challenge), b.(*v1alpha2.Challenge), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ChallengeList)(nil), (*certmanager.ChallengeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ChallengeList_To_certmanager_ChallengeList(a.(*v1alpha1.ChallengeList), b.(*certmanager.ChallengeList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ChallengeList)(nil), (*certmanager.ChallengeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ChallengeList_To_certmanager_ChallengeList(a.(*v1alpha2.ChallengeList), b.(*certmanager.ChallengeList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeList)(nil), (*v1alpha1.ChallengeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ChallengeList_To_v1alpha1_ChallengeList(a.(*certmanager.ChallengeList), b.(*v1alpha1.ChallengeList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeList)(nil), (*v1alpha2.ChallengeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ChallengeList_To_v1alpha2_ChallengeList(a.(*certmanager.ChallengeList), b.(*v1alpha2.ChallengeList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ChallengeSpec)(nil), (*certmanager.ChallengeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(a.(*v1alpha1.ChallengeSpec), b.(*certmanager.ChallengeSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ChallengeSpec)(nil), (*certmanager.ChallengeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec(a.(*v1alpha2.ChallengeSpec), b.(*certmanager.ChallengeSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeSpec)(nil), (*v1alpha1.ChallengeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec(a.(*certmanager.ChallengeSpec), b.(*v1alpha1.ChallengeSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeSpec)(nil), (*v1alpha2.ChallengeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec(a.(*certmanager.ChallengeSpec), b.(*v1alpha2.ChallengeSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ChallengeStatus)(nil), (*certmanager.ChallengeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(a.(*v1alpha1.ChallengeStatus), b.(*certmanager.ChallengeStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ChallengeStatus)(nil), (*certmanager.ChallengeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus(a.(*v1alpha2.ChallengeStatus), b.(*certmanager.ChallengeStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeStatus)(nil), (*v1alpha1.ChallengeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus(a.(*certmanager.ChallengeStatus), b.(*v1alpha1.ChallengeStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ChallengeStatus)(nil), (*v1alpha2.ChallengeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus(a.(*certmanager.ChallengeStatus), b.(*v1alpha2.ChallengeStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ClusterIssuer)(nil), (*certmanager.ClusterIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ClusterIssuer_To_certmanager_ClusterIssuer(a.(*v1alpha1.ClusterIssuer), b.(*certmanager.ClusterIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ClusterIssuer)(nil), (*certmanager.ClusterIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ClusterIssuer_To_certmanager_ClusterIssuer(a.(*v1alpha2.ClusterIssuer), b.(*certmanager.ClusterIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ClusterIssuer)(nil), (*v1alpha1.ClusterIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ClusterIssuer_To_v1alpha1_ClusterIssuer(a.(*certmanager.ClusterIssuer), b.(*v1alpha1.ClusterIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ClusterIssuer)(nil), (*v1alpha2.ClusterIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ClusterIssuer_To_v1alpha2_ClusterIssuer(a.(*certmanager.ClusterIssuer), b.(*v1alpha2.ClusterIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ClusterIssuerList)(nil), (*certmanager.ClusterIssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ClusterIssuerList_To_certmanager_ClusterIssuerList(a.(*v1alpha1.ClusterIssuerList), b.(*certmanager.ClusterIssuerList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ClusterIssuerList)(nil), (*certmanager.ClusterIssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ClusterIssuerList_To_certmanager_ClusterIssuerList(a.(*v1alpha2.ClusterIssuerList), b.(*certmanager.ClusterIssuerList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ClusterIssuerList)(nil), (*v1alpha1.ClusterIssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ClusterIssuerList_To_v1alpha1_ClusterIssuerList(a.(*certmanager.ClusterIssuerList), b.(*v1alpha1.ClusterIssuerList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ClusterIssuerList)(nil), (*v1alpha2.ClusterIssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ClusterIssuerList_To_v1alpha2_ClusterIssuerList(a.(*certmanager.ClusterIssuerList), b.(*v1alpha2.ClusterIssuerList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.Issuer)(nil), (*certmanager.Issuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_Issuer_To_certmanager_Issuer(a.(*v1alpha1.Issuer), b.(*certmanager.Issuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.Issuer)(nil), (*certmanager.Issuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_Issuer_To_certmanager_Issuer(a.(*v1alpha2.Issuer), b.(*certmanager.Issuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.Issuer)(nil), (*v1alpha1.Issuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_Issuer_To_v1alpha1_Issuer(a.(*certmanager.Issuer), b.(*v1alpha1.Issuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.Issuer)(nil), (*v1alpha2.Issuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_Issuer_To_v1alpha2_Issuer(a.(*certmanager.Issuer), b.(*v1alpha2.Issuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.IssuerCondition)(nil), (*certmanager.IssuerCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition(a.(*v1alpha1.IssuerCondition), b.(*certmanager.IssuerCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.IssuerCondition)(nil), (*certmanager.IssuerCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_IssuerCondition_To_certmanager_IssuerCondition(a.(*v1alpha2.IssuerCondition), b.(*certmanager.IssuerCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerCondition)(nil), (*v1alpha1.IssuerCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_IssuerCondition_To_v1alpha1_IssuerCondition(a.(*certmanager.IssuerCondition), b.(*v1alpha1.IssuerCondition), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerCondition)(nil), (*v1alpha2.IssuerCondition)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_IssuerCondition_To_v1alpha2_IssuerCondition(a.(*certmanager.IssuerCondition), b.(*v1alpha2.IssuerCondition), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.IssuerConfig)(nil), (*certmanager.IssuerConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(a.(*v1alpha1.IssuerConfig), b.(*certmanager.IssuerConfig), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.IssuerConfig)(nil), (*certmanager.IssuerConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig(a.(*v1alpha2.IssuerConfig), b.(*certmanager.IssuerConfig), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerConfig)(nil), (*v1alpha1.IssuerConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig(a.(*certmanager.IssuerConfig), b.(*v1alpha1.IssuerConfig), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerConfig)(nil), (*v1alpha2.IssuerConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig(a.(*certmanager.IssuerConfig), b.(*v1alpha2.IssuerConfig), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.IssuerList)(nil), (*certmanager.IssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_IssuerList_To_certmanager_IssuerList(a.(*v1alpha1.IssuerList), b.(*certmanager.IssuerList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.IssuerList)(nil), (*certmanager.IssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_IssuerList_To_certmanager_IssuerList(a.(*v1alpha2.IssuerList), b.(*certmanager.IssuerList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerList)(nil), (*v1alpha1.IssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_IssuerList_To_v1alpha1_IssuerList(a.(*certmanager.IssuerList), b.(*v1alpha1.IssuerList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerList)(nil), (*v1alpha2.IssuerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_IssuerList_To_v1alpha2_IssuerList(a.(*certmanager.IssuerList), b.(*v1alpha2.IssuerList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.IssuerSpec)(nil), (*certmanager.IssuerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(a.(*v1alpha1.IssuerSpec), b.(*certmanager.IssuerSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.IssuerSpec)(nil), (*certmanager.IssuerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(a.(*v1alpha2.IssuerSpec), b.(*certmanager.IssuerSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerSpec)(nil), (*v1alpha1.IssuerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(a.(*certmanager.IssuerSpec), b.(*v1alpha1.IssuerSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerSpec)(nil), (*v1alpha2.IssuerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(a.(*certmanager.IssuerSpec), b.(*v1alpha2.IssuerSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.IssuerStatus)(nil), (*certmanager.IssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(a.(*v1alpha1.IssuerStatus), b.(*certmanager.IssuerStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.IssuerStatus)(nil), (*certmanager.IssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(a.(*v1alpha2.IssuerStatus), b.(*certmanager.IssuerStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerStatus)(nil), (*v1alpha1.IssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(a.(*certmanager.IssuerStatus), b.(*v1alpha1.IssuerStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.IssuerStatus)(nil), (*v1alpha2.IssuerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(a.(*certmanager.IssuerStatus), b.(*v1alpha2.IssuerStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.LocalObjectReference)(nil), (*certmanager.LocalObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(a.(*v1alpha1.LocalObjectReference), b.(*certmanager.LocalObjectReference), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.LocalObjectReference)(nil), (*certmanager.LocalObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(a.(*v1alpha2.LocalObjectReference), b.(*certmanager.LocalObjectReference), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.LocalObjectReference)(nil), (*v1alpha1.LocalObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(a.(*certmanager.LocalObjectReference), b.(*v1alpha1.LocalObjectReference), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.LocalObjectReference)(nil), (*v1alpha2.LocalObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(a.(*certmanager.LocalObjectReference), b.(*v1alpha2.LocalObjectReference), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.ObjectReference)(nil), (*certmanager.ObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(a.(*v1alpha1.ObjectReference), b.(*certmanager.ObjectReference), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.ObjectReference)(nil), (*certmanager.ObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(a.(*v1alpha2.ObjectReference), b.(*certmanager.ObjectReference), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.ObjectReference)(nil), (*v1alpha1.ObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(a.(*certmanager.ObjectReference), b.(*v1alpha1.ObjectReference), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.ObjectReference)(nil), (*v1alpha2.ObjectReference)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(a.(*certmanager.ObjectReference), b.(*v1alpha2.ObjectReference), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.Order)(nil), (*certmanager.Order)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_Order_To_certmanager_Order(a.(*v1alpha1.Order), b.(*certmanager.Order), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.Order)(nil), (*certmanager.Order)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_Order_To_certmanager_Order(a.(*v1alpha2.Order), b.(*certmanager.Order), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.Order)(nil), (*v1alpha1.Order)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_Order_To_v1alpha1_Order(a.(*certmanager.Order), b.(*v1alpha1.Order), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.Order)(nil), (*v1alpha2.Order)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_Order_To_v1alpha2_Order(a.(*certmanager.Order), b.(*v1alpha2.Order), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.OrderList)(nil), (*certmanager.OrderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_OrderList_To_certmanager_OrderList(a.(*v1alpha1.OrderList), b.(*certmanager.OrderList), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.OrderList)(nil), (*certmanager.OrderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_OrderList_To_certmanager_OrderList(a.(*v1alpha2.OrderList), b.(*certmanager.OrderList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.OrderList)(nil), (*v1alpha1.OrderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_OrderList_To_v1alpha1_OrderList(a.(*certmanager.OrderList), b.(*v1alpha1.OrderList), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.OrderList)(nil), (*v1alpha2.OrderList)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_OrderList_To_v1alpha2_OrderList(a.(*certmanager.OrderList), b.(*v1alpha2.OrderList), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.OrderSpec)(nil), (*certmanager.OrderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(a.(*v1alpha1.OrderSpec), b.(*certmanager.OrderSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.OrderSpec)(nil), (*certmanager.OrderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_OrderSpec_To_certmanager_OrderSpec(a.(*v1alpha2.OrderSpec), b.(*certmanager.OrderSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.OrderSpec)(nil), (*v1alpha1.OrderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(a.(*certmanager.OrderSpec), b.(*v1alpha1.OrderSpec), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.OrderSpec)(nil), (*v1alpha2.OrderSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_OrderSpec_To_v1alpha2_OrderSpec(a.(*certmanager.OrderSpec), b.(*v1alpha2.OrderSpec), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.OrderStatus)(nil), (*certmanager.OrderStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(a.(*v1alpha1.OrderStatus), b.(*certmanager.OrderStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.OrderStatus)(nil), (*certmanager.OrderStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_OrderStatus_To_certmanager_OrderStatus(a.(*v1alpha2.OrderStatus), b.(*certmanager.OrderStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.OrderStatus)(nil), (*v1alpha1.OrderStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_OrderStatus_To_v1alpha1_OrderStatus(a.(*certmanager.OrderStatus), b.(*v1alpha1.OrderStatus), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.OrderStatus)(nil), (*v1alpha2.OrderStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_OrderStatus_To_v1alpha2_OrderStatus(a.(*certmanager.OrderStatus), b.(*v1alpha2.OrderStatus), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.SecretKeySelector)(nil), (*certmanager.SecretKeySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(a.(*v1alpha1.SecretKeySelector), b.(*certmanager.SecretKeySelector), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.SecretKeySelector)(nil), (*certmanager.SecretKeySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(a.(*v1alpha2.SecretKeySelector), b.(*certmanager.SecretKeySelector), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.SecretKeySelector)(nil), (*v1alpha1.SecretKeySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(a.(*certmanager.SecretKeySelector), b.(*v1alpha1.SecretKeySelector), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.SecretKeySelector)(nil), (*v1alpha2.SecretKeySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(a.(*certmanager.SecretKeySelector), b.(*v1alpha2.SecretKeySelector), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.SelfSignedIssuer)(nil), (*certmanager.SelfSignedIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(a.(*v1alpha1.SelfSignedIssuer), b.(*certmanager.SelfSignedIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.SelfSignedIssuer)(nil), (*certmanager.SelfSignedIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(a.(*v1alpha2.SelfSignedIssuer), b.(*certmanager.SelfSignedIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.SelfSignedIssuer)(nil), (*v1alpha1.SelfSignedIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_SelfSignedIssuer_To_v1alpha1_SelfSignedIssuer(a.(*certmanager.SelfSignedIssuer), b.(*v1alpha1.SelfSignedIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.SelfSignedIssuer)(nil), (*v1alpha2.SelfSignedIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_SelfSignedIssuer_To_v1alpha2_SelfSignedIssuer(a.(*certmanager.SelfSignedIssuer), b.(*v1alpha2.SelfSignedIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VaultAppRole)(nil), (*certmanager.VaultAppRole)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole(a.(*v1alpha1.VaultAppRole), b.(*certmanager.VaultAppRole), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VaultAppRole)(nil), (*certmanager.VaultAppRole)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole(a.(*v1alpha2.VaultAppRole), b.(*certmanager.VaultAppRole), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VaultAppRole)(nil), (*v1alpha1.VaultAppRole)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole(a.(*certmanager.VaultAppRole), b.(*v1alpha1.VaultAppRole), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VaultAppRole)(nil), (*v1alpha2.VaultAppRole)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole(a.(*certmanager.VaultAppRole), b.(*v1alpha2.VaultAppRole), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VaultAuth)(nil), (*certmanager.VaultAuth)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VaultAuth_To_certmanager_VaultAuth(a.(*v1alpha1.VaultAuth), b.(*certmanager.VaultAuth), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VaultAuth)(nil), (*certmanager.VaultAuth)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VaultAuth_To_certmanager_VaultAuth(a.(*v1alpha2.VaultAuth), b.(*certmanager.VaultAuth), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VaultAuth)(nil), (*v1alpha1.VaultAuth)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VaultAuth_To_v1alpha1_VaultAuth(a.(*certmanager.VaultAuth), b.(*v1alpha1.VaultAuth), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VaultAuth)(nil), (*v1alpha2.VaultAuth)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VaultAuth_To_v1alpha2_VaultAuth(a.(*certmanager.VaultAuth), b.(*v1alpha2.VaultAuth), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VaultIssuer)(nil), (*certmanager.VaultIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer(a.(*v1alpha1.VaultIssuer), b.(*certmanager.VaultIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VaultIssuer)(nil), (*certmanager.VaultIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VaultIssuer_To_certmanager_VaultIssuer(a.(*v1alpha2.VaultIssuer), b.(*certmanager.VaultIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VaultIssuer)(nil), (*v1alpha1.VaultIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer(a.(*certmanager.VaultIssuer), b.(*v1alpha1.VaultIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VaultIssuer)(nil), (*v1alpha2.VaultIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VaultIssuer_To_v1alpha2_VaultIssuer(a.(*certmanager.VaultIssuer), b.(*v1alpha2.VaultIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VenafiCloud)(nil), (*certmanager.VenafiCloud)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VenafiCloud_To_certmanager_VenafiCloud(a.(*v1alpha1.VenafiCloud), b.(*certmanager.VenafiCloud), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VenafiCloud)(nil), (*certmanager.VenafiCloud)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VenafiCloud_To_certmanager_VenafiCloud(a.(*v1alpha2.VenafiCloud), b.(*certmanager.VenafiCloud), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiCloud)(nil), (*v1alpha1.VenafiCloud)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VenafiCloud_To_v1alpha1_VenafiCloud(a.(*certmanager.VenafiCloud), b.(*v1alpha1.VenafiCloud), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiCloud)(nil), (*v1alpha2.VenafiCloud)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VenafiCloud_To_v1alpha2_VenafiCloud(a.(*certmanager.VenafiCloud), b.(*v1alpha2.VenafiCloud), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VenafiIssuer)(nil), (*certmanager.VenafiIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VenafiIssuer_To_certmanager_VenafiIssuer(a.(*v1alpha1.VenafiIssuer), b.(*certmanager.VenafiIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VenafiIssuer)(nil), (*certmanager.VenafiIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VenafiIssuer_To_certmanager_VenafiIssuer(a.(*v1alpha2.VenafiIssuer), b.(*certmanager.VenafiIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiIssuer)(nil), (*v1alpha1.VenafiIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VenafiIssuer_To_v1alpha1_VenafiIssuer(a.(*certmanager.VenafiIssuer), b.(*v1alpha1.VenafiIssuer), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiIssuer)(nil), (*v1alpha2.VenafiIssuer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VenafiIssuer_To_v1alpha2_VenafiIssuer(a.(*certmanager.VenafiIssuer), b.(*v1alpha2.VenafiIssuer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1alpha1.VenafiTPP)(nil), (*certmanager.VenafiTPP)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha1_VenafiTPP_To_certmanager_VenafiTPP(a.(*v1alpha1.VenafiTPP), b.(*certmanager.VenafiTPP), scope)
+	if err := s.AddGeneratedConversionFunc((*v1alpha2.VenafiTPP)(nil), (*certmanager.VenafiTPP)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha2_VenafiTPP_To_certmanager_VenafiTPP(a.(*v1alpha2.VenafiTPP), b.(*certmanager.VenafiTPP), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiTPP)(nil), (*v1alpha1.VenafiTPP)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_certmanager_VenafiTPP_To_v1alpha1_VenafiTPP(a.(*certmanager.VenafiTPP), b.(*v1alpha1.VenafiTPP), scope)
+	if err := s.AddGeneratedConversionFunc((*certmanager.VenafiTPP)(nil), (*v1alpha2.VenafiTPP)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_certmanager_VenafiTPP_To_v1alpha2_VenafiTPP(a.(*certmanager.VenafiTPP), b.(*v1alpha2.VenafiTPP), scope)
 	}); err != nil {
 		return err
 	}
 	return nil
 }
 
-func autoConvert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization(in *v1alpha1.ACMEAuthorization, out *certmanager.ACMEAuthorization, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEAuthorization_To_certmanager_ACMEAuthorization(in *v1alpha2.ACMEAuthorization, out *certmanager.ACMEAuthorization, s conversion.Scope) error {
 	out.URL = in.URL
 	out.Identifier = in.Identifier
 	out.Wildcard = in.Wildcard
@@ -620,73 +620,73 @@ func autoConvert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization(in
 	return nil
 }
 
-// Convert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization(in *v1alpha1.ACMEAuthorization, out *certmanager.ACMEAuthorization, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEAuthorization_To_certmanager_ACMEAuthorization(in, out, s)
+// Convert_v1alpha2_ACMEAuthorization_To_certmanager_ACMEAuthorization is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEAuthorization_To_certmanager_ACMEAuthorization(in *v1alpha2.ACMEAuthorization, out *certmanager.ACMEAuthorization, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEAuthorization_To_certmanager_ACMEAuthorization(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEAuthorization_To_v1alpha1_ACMEAuthorization(in *certmanager.ACMEAuthorization, out *v1alpha1.ACMEAuthorization, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEAuthorization_To_v1alpha2_ACMEAuthorization(in *certmanager.ACMEAuthorization, out *v1alpha2.ACMEAuthorization, s conversion.Scope) error {
 	out.URL = in.URL
 	out.Identifier = in.Identifier
 	out.Wildcard = in.Wildcard
-	out.Challenges = *(*[]v1alpha1.ACMEChallenge)(unsafe.Pointer(&in.Challenges))
+	out.Challenges = *(*[]v1alpha2.ACMEChallenge)(unsafe.Pointer(&in.Challenges))
 	return nil
 }
 
-// Convert_certmanager_ACMEAuthorization_To_v1alpha1_ACMEAuthorization is an autogenerated conversion function.
-func Convert_certmanager_ACMEAuthorization_To_v1alpha1_ACMEAuthorization(in *certmanager.ACMEAuthorization, out *v1alpha1.ACMEAuthorization, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEAuthorization_To_v1alpha1_ACMEAuthorization(in, out, s)
+// Convert_certmanager_ACMEAuthorization_To_v1alpha2_ACMEAuthorization is an autogenerated conversion function.
+func Convert_certmanager_ACMEAuthorization_To_v1alpha2_ACMEAuthorization(in *certmanager.ACMEAuthorization, out *v1alpha2.ACMEAuthorization, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEAuthorization_To_v1alpha2_ACMEAuthorization(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallenge_To_certmanager_ACMEChallenge(in *v1alpha1.ACMEChallenge, out *certmanager.ACMEChallenge, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallenge_To_certmanager_ACMEChallenge(in *v1alpha2.ACMEChallenge, out *certmanager.ACMEChallenge, s conversion.Scope) error {
 	out.URL = in.URL
 	out.Token = in.Token
 	out.Type = certmanager.ACMEChallengeType(in.Type)
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallenge_To_certmanager_ACMEChallenge is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallenge_To_certmanager_ACMEChallenge(in *v1alpha1.ACMEChallenge, out *certmanager.ACMEChallenge, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallenge_To_certmanager_ACMEChallenge(in, out, s)
+// Convert_v1alpha2_ACMEChallenge_To_certmanager_ACMEChallenge is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallenge_To_certmanager_ACMEChallenge(in *v1alpha2.ACMEChallenge, out *certmanager.ACMEChallenge, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallenge_To_certmanager_ACMEChallenge(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallenge_To_v1alpha1_ACMEChallenge(in *certmanager.ACMEChallenge, out *v1alpha1.ACMEChallenge, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEChallenge_To_v1alpha2_ACMEChallenge(in *certmanager.ACMEChallenge, out *v1alpha2.ACMEChallenge, s conversion.Scope) error {
 	out.URL = in.URL
 	out.Token = in.Token
-	out.Type = v1alpha1.ACMEChallengeType(in.Type)
+	out.Type = v1alpha2.ACMEChallengeType(in.Type)
 	return nil
 }
 
-// Convert_certmanager_ACMEChallenge_To_v1alpha1_ACMEChallenge is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallenge_To_v1alpha1_ACMEChallenge(in *certmanager.ACMEChallenge, out *v1alpha1.ACMEChallenge, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallenge_To_v1alpha1_ACMEChallenge(in, out, s)
+// Convert_certmanager_ACMEChallenge_To_v1alpha2_ACMEChallenge is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallenge_To_v1alpha2_ACMEChallenge(in *certmanager.ACMEChallenge, out *v1alpha2.ACMEChallenge, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallenge_To_v1alpha2_ACMEChallenge(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in *v1alpha1.ACMEChallengeSolver, out *certmanager.ACMEChallengeSolver, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in *v1alpha2.ACMEChallengeSolver, out *certmanager.ACMEChallengeSolver, s conversion.Scope) error {
 	out.Selector = (*certmanager.CertificateDNSNameSelector)(unsafe.Pointer(in.Selector))
 	out.HTTP01 = (*certmanager.ACMEChallengeSolverHTTP01)(unsafe.Pointer(in.HTTP01))
 	out.DNS01 = (*certmanager.ACMEChallengeSolverDNS01)(unsafe.Pointer(in.DNS01))
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in *v1alpha1.ACMEChallengeSolver, out *certmanager.ACMEChallengeSolver, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in *v1alpha2.ACMEChallengeSolver, out *certmanager.ACMEChallengeSolver, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolver_To_certmanager_ACMEChallengeSolver(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolver_To_v1alpha1_ACMEChallengeSolver(in *certmanager.ACMEChallengeSolver, out *v1alpha1.ACMEChallengeSolver, s conversion.Scope) error {
-	out.Selector = (*v1alpha1.CertificateDNSNameSelector)(unsafe.Pointer(in.Selector))
-	out.HTTP01 = (*v1alpha1.ACMEChallengeSolverHTTP01)(unsafe.Pointer(in.HTTP01))
-	out.DNS01 = (*v1alpha1.ACMEChallengeSolverDNS01)(unsafe.Pointer(in.DNS01))
+func autoConvert_certmanager_ACMEChallengeSolver_To_v1alpha2_ACMEChallengeSolver(in *certmanager.ACMEChallengeSolver, out *v1alpha2.ACMEChallengeSolver, s conversion.Scope) error {
+	out.Selector = (*v1alpha2.CertificateDNSNameSelector)(unsafe.Pointer(in.Selector))
+	out.HTTP01 = (*v1alpha2.ACMEChallengeSolverHTTP01)(unsafe.Pointer(in.HTTP01))
+	out.DNS01 = (*v1alpha2.ACMEChallengeSolverDNS01)(unsafe.Pointer(in.DNS01))
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolver_To_v1alpha1_ACMEChallengeSolver is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolver_To_v1alpha1_ACMEChallengeSolver(in *certmanager.ACMEChallengeSolver, out *v1alpha1.ACMEChallengeSolver, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolver_To_v1alpha1_ACMEChallengeSolver(in, out, s)
+// Convert_certmanager_ACMEChallengeSolver_To_v1alpha2_ACMEChallengeSolver is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolver_To_v1alpha2_ACMEChallengeSolver(in *certmanager.ACMEChallengeSolver, out *v1alpha2.ACMEChallengeSolver, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolver_To_v1alpha2_ACMEChallengeSolver(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in *v1alpha1.ACMEChallengeSolverDNS01, out *certmanager.ACMEChallengeSolverDNS01, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in *v1alpha2.ACMEChallengeSolverDNS01, out *certmanager.ACMEChallengeSolverDNS01, s conversion.Scope) error {
 	out.CNAMEStrategy = certmanager.CNAMEStrategy(in.CNAMEStrategy)
 	out.Akamai = (*certmanager.ACMEIssuerDNS01ProviderAkamai)(unsafe.Pointer(in.Akamai))
 	out.CloudDNS = (*certmanager.ACMEIssuerDNS01ProviderCloudDNS)(unsafe.Pointer(in.CloudDNS))
@@ -700,51 +700,51 @@ func autoConvert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeS
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01 is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in *v1alpha1.ACMEChallengeSolverDNS01, out *certmanager.ACMEChallengeSolverDNS01, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01 is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in *v1alpha2.ACMEChallengeSolverDNS01, out *certmanager.ACMEChallengeSolverDNS01, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolverDNS01_To_certmanager_ACMEChallengeSolverDNS01(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha1_ACMEChallengeSolverDNS01(in *certmanager.ACMEChallengeSolverDNS01, out *v1alpha1.ACMEChallengeSolverDNS01, s conversion.Scope) error {
-	out.CNAMEStrategy = v1alpha1.CNAMEStrategy(in.CNAMEStrategy)
-	out.Akamai = (*v1alpha1.ACMEIssuerDNS01ProviderAkamai)(unsafe.Pointer(in.Akamai))
-	out.CloudDNS = (*v1alpha1.ACMEIssuerDNS01ProviderCloudDNS)(unsafe.Pointer(in.CloudDNS))
-	out.Cloudflare = (*v1alpha1.ACMEIssuerDNS01ProviderCloudflare)(unsafe.Pointer(in.Cloudflare))
-	out.Route53 = (*v1alpha1.ACMEIssuerDNS01ProviderRoute53)(unsafe.Pointer(in.Route53))
-	out.AzureDNS = (*v1alpha1.ACMEIssuerDNS01ProviderAzureDNS)(unsafe.Pointer(in.AzureDNS))
-	out.DigitalOcean = (*v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean)(unsafe.Pointer(in.DigitalOcean))
-	out.AcmeDNS = (*v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS)(unsafe.Pointer(in.AcmeDNS))
-	out.RFC2136 = (*v1alpha1.ACMEIssuerDNS01ProviderRFC2136)(unsafe.Pointer(in.RFC2136))
-	out.Webhook = (*v1alpha1.ACMEIssuerDNS01ProviderWebhook)(unsafe.Pointer(in.Webhook))
+func autoConvert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha2_ACMEChallengeSolverDNS01(in *certmanager.ACMEChallengeSolverDNS01, out *v1alpha2.ACMEChallengeSolverDNS01, s conversion.Scope) error {
+	out.CNAMEStrategy = v1alpha2.CNAMEStrategy(in.CNAMEStrategy)
+	out.Akamai = (*v1alpha2.ACMEIssuerDNS01ProviderAkamai)(unsafe.Pointer(in.Akamai))
+	out.CloudDNS = (*v1alpha2.ACMEIssuerDNS01ProviderCloudDNS)(unsafe.Pointer(in.CloudDNS))
+	out.Cloudflare = (*v1alpha2.ACMEIssuerDNS01ProviderCloudflare)(unsafe.Pointer(in.Cloudflare))
+	out.Route53 = (*v1alpha2.ACMEIssuerDNS01ProviderRoute53)(unsafe.Pointer(in.Route53))
+	out.AzureDNS = (*v1alpha2.ACMEIssuerDNS01ProviderAzureDNS)(unsafe.Pointer(in.AzureDNS))
+	out.DigitalOcean = (*v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean)(unsafe.Pointer(in.DigitalOcean))
+	out.AcmeDNS = (*v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS)(unsafe.Pointer(in.AcmeDNS))
+	out.RFC2136 = (*v1alpha2.ACMEIssuerDNS01ProviderRFC2136)(unsafe.Pointer(in.RFC2136))
+	out.Webhook = (*v1alpha2.ACMEIssuerDNS01ProviderWebhook)(unsafe.Pointer(in.Webhook))
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha1_ACMEChallengeSolverDNS01 is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha1_ACMEChallengeSolverDNS01(in *certmanager.ACMEChallengeSolverDNS01, out *v1alpha1.ACMEChallengeSolverDNS01, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha1_ACMEChallengeSolverDNS01(in, out, s)
+// Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha2_ACMEChallengeSolverDNS01 is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha2_ACMEChallengeSolverDNS01(in *certmanager.ACMEChallengeSolverDNS01, out *v1alpha2.ACMEChallengeSolverDNS01, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolverDNS01_To_v1alpha2_ACMEChallengeSolverDNS01(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in *v1alpha1.ACMEChallengeSolverHTTP01, out *certmanager.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in *v1alpha2.ACMEChallengeSolverHTTP01, out *certmanager.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
 	out.Ingress = (*certmanager.ACMEChallengeSolverHTTP01Ingress)(unsafe.Pointer(in.Ingress))
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01 is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in *v1alpha1.ACMEChallengeSolverHTTP01, out *certmanager.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01 is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in *v1alpha2.ACMEChallengeSolverHTTP01, out *certmanager.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolverHTTP01_To_certmanager_ACMEChallengeSolverHTTP01(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha1_ACMEChallengeSolverHTTP01(in *certmanager.ACMEChallengeSolverHTTP01, out *v1alpha1.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
-	out.Ingress = (*v1alpha1.ACMEChallengeSolverHTTP01Ingress)(unsafe.Pointer(in.Ingress))
+func autoConvert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha2_ACMEChallengeSolverHTTP01(in *certmanager.ACMEChallengeSolverHTTP01, out *v1alpha2.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
+	out.Ingress = (*v1alpha2.ACMEChallengeSolverHTTP01Ingress)(unsafe.Pointer(in.Ingress))
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha1_ACMEChallengeSolverHTTP01 is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha1_ACMEChallengeSolverHTTP01(in *certmanager.ACMEChallengeSolverHTTP01, out *v1alpha1.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha1_ACMEChallengeSolverHTTP01(in, out, s)
+// Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha2_ACMEChallengeSolverHTTP01 is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha2_ACMEChallengeSolverHTTP01(in *certmanager.ACMEChallengeSolverHTTP01, out *v1alpha2.ACMEChallengeSolverHTTP01, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolverHTTP01_To_v1alpha2_ACMEChallengeSolverHTTP01(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in *v1alpha1.ACMEChallengeSolverHTTP01Ingress, out *certmanager.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in *v1alpha2.ACMEChallengeSolverHTTP01Ingress, out *certmanager.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
 	out.ServiceType = v1.ServiceType(in.ServiceType)
 	out.Class = (*string)(unsafe.Pointer(in.Class))
 	out.Name = in.Name
@@ -752,173 +752,173 @@ func autoConvert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMECh
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in *v1alpha1.ACMEChallengeSolverHTTP01Ingress, out *certmanager.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in *v1alpha2.ACMEChallengeSolverHTTP01Ingress, out *certmanager.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolverHTTP01Ingress_To_certmanager_ACMEChallengeSolverHTTP01Ingress(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha1_ACMEChallengeSolverHTTP01Ingress(in *certmanager.ACMEChallengeSolverHTTP01Ingress, out *v1alpha1.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha2_ACMEChallengeSolverHTTP01Ingress(in *certmanager.ACMEChallengeSolverHTTP01Ingress, out *v1alpha2.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
 	out.ServiceType = v1.ServiceType(in.ServiceType)
 	out.Class = (*string)(unsafe.Pointer(in.Class))
 	out.Name = in.Name
-	out.PodTemplate = (*v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate)(unsafe.Pointer(in.PodTemplate))
+	out.PodTemplate = (*v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate)(unsafe.Pointer(in.PodTemplate))
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha1_ACMEChallengeSolverHTTP01Ingress is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha1_ACMEChallengeSolverHTTP01Ingress(in *certmanager.ACMEChallengeSolverHTTP01Ingress, out *v1alpha1.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha1_ACMEChallengeSolverHTTP01Ingress(in, out, s)
+// Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha2_ACMEChallengeSolverHTTP01Ingress is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha2_ACMEChallengeSolverHTTP01Ingress(in *certmanager.ACMEChallengeSolverHTTP01Ingress, out *v1alpha2.ACMEChallengeSolverHTTP01Ingress, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolverHTTP01Ingress_To_v1alpha2_ACMEChallengeSolverHTTP01Ingress(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in *v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec, out *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in *v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec, out *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
 	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
 	out.Affinity = (*v1.Affinity)(unsafe.Pointer(in.Affinity))
 	out.Tolerations = *(*[]v1.Toleration)(unsafe.Pointer(&in.Tolerations))
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in *v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec, out *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in *v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec, out *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec(in *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, out *v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec(in *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, out *v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
 	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
 	out.Affinity = (*v1.Affinity)(unsafe.Pointer(in.Affinity))
 	out.Tolerations = *(*[]v1.Toleration)(unsafe.Pointer(&in.Tolerations))
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec(in *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, out *v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec(in, out, s)
+// Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec(in *certmanager.ACMEChallengeSolverHTTP01IngressPodSpec, out *v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate, out *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate, out *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec_To_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate, out *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in, out, s)
+// Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate, out *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate_To_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate(in *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, out *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate(in *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, out *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodSpec_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate is an autogenerated conversion function.
-func Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate(in *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, out *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha1_ACMEChallengeSolverHTTP01IngressPodTemplate(in, out, s)
+// Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate is an autogenerated conversion function.
+func Convert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate(in *certmanager.ACMEChallengeSolverHTTP01IngressPodTemplate, out *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEChallengeSolverHTTP01IngressPodTemplate_To_v1alpha2_ACMEChallengeSolverHTTP01IngressPodTemplate(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuer_To_certmanager_ACMEIssuer(in *v1alpha1.ACMEIssuer, out *certmanager.ACMEIssuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuer_To_certmanager_ACMEIssuer(in *v1alpha2.ACMEIssuer, out *certmanager.ACMEIssuer, s conversion.Scope) error {
 	out.Email = in.Email
 	out.Server = in.Server
 	out.SkipTLSVerify = in.SkipTLSVerify
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.PrivateKey, &out.PrivateKey, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.PrivateKey, &out.PrivateKey, s); err != nil {
 		return err
 	}
 	out.Solvers = *(*[]certmanager.ACMEChallengeSolver)(unsafe.Pointer(&in.Solvers))
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuer_To_certmanager_ACMEIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuer_To_certmanager_ACMEIssuer(in *v1alpha1.ACMEIssuer, out *certmanager.ACMEIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuer_To_certmanager_ACMEIssuer(in, out, s)
+// Convert_v1alpha2_ACMEIssuer_To_certmanager_ACMEIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuer_To_certmanager_ACMEIssuer(in *v1alpha2.ACMEIssuer, out *certmanager.ACMEIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuer_To_certmanager_ACMEIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuer_To_v1alpha1_ACMEIssuer(in *certmanager.ACMEIssuer, out *v1alpha1.ACMEIssuer, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuer_To_v1alpha2_ACMEIssuer(in *certmanager.ACMEIssuer, out *v1alpha2.ACMEIssuer, s conversion.Scope) error {
 	out.Email = in.Email
 	out.Server = in.Server
 	out.SkipTLSVerify = in.SkipTLSVerify
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.PrivateKey, &out.PrivateKey, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.PrivateKey, &out.PrivateKey, s); err != nil {
 		return err
 	}
-	out.Solvers = *(*[]v1alpha1.ACMEChallengeSolver)(unsafe.Pointer(&in.Solvers))
+	out.Solvers = *(*[]v1alpha2.ACMEChallengeSolver)(unsafe.Pointer(&in.Solvers))
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuer_To_v1alpha1_ACMEIssuer is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuer_To_v1alpha1_ACMEIssuer(in *certmanager.ACMEIssuer, out *v1alpha1.ACMEIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuer_To_v1alpha1_ACMEIssuer(in, out, s)
+// Convert_certmanager_ACMEIssuer_To_v1alpha2_ACMEIssuer is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuer_To_v1alpha2_ACMEIssuer(in *certmanager.ACMEIssuer, out *v1alpha2.ACMEIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuer_To_v1alpha2_ACMEIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in *v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS, out *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in *v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS, out *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
 	out.Host = in.Host
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.AccountSecret, &out.AccountSecret, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.AccountSecret, &out.AccountSecret, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in *v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS, out *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in *v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS, out *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS_To_certmanager_ACMEIssuerDNS01ProviderAcmeDNS(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS(in *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, out *v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS(in *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, out *v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
 	out.Host = in.Host
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.AccountSecret, &out.AccountSecret, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.AccountSecret, &out.AccountSecret, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS(in *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, out *v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAcmeDNS(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS(in *certmanager.ACMEIssuerDNS01ProviderAcmeDNS, out *v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAcmeDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAcmeDNS(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in *v1alpha1.ACMEIssuerDNS01ProviderAkamai, out *certmanager.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in *v1alpha2.ACMEIssuerDNS01ProviderAkamai, out *certmanager.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
 	out.ServiceConsumerDomain = in.ServiceConsumerDomain
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientToken, &out.ClientToken, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientToken, &out.ClientToken, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.AccessToken, &out.AccessToken, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.AccessToken, &out.AccessToken, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in *v1alpha1.ACMEIssuerDNS01ProviderAkamai, out *certmanager.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in *v1alpha2.ACMEIssuerDNS01ProviderAkamai, out *certmanager.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAkamai_To_certmanager_ACMEIssuerDNS01ProviderAkamai(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha1_ACMEIssuerDNS01ProviderAkamai(in *certmanager.ACMEIssuerDNS01ProviderAkamai, out *v1alpha1.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha2_ACMEIssuerDNS01ProviderAkamai(in *certmanager.ACMEIssuerDNS01ProviderAkamai, out *v1alpha2.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
 	out.ServiceConsumerDomain = in.ServiceConsumerDomain
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.ClientToken, &out.ClientToken, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.ClientToken, &out.ClientToken, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.AccessToken, &out.AccessToken, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.AccessToken, &out.AccessToken, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha1_ACMEIssuerDNS01ProviderAkamai is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha1_ACMEIssuerDNS01ProviderAkamai(in *certmanager.ACMEIssuerDNS01ProviderAkamai, out *v1alpha1.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha1_ACMEIssuerDNS01ProviderAkamai(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha2_ACMEIssuerDNS01ProviderAkamai is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha2_ACMEIssuerDNS01ProviderAkamai(in *certmanager.ACMEIssuerDNS01ProviderAkamai, out *v1alpha2.ACMEIssuerDNS01ProviderAkamai, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAkamai_To_v1alpha2_ACMEIssuerDNS01ProviderAkamai(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in *v1alpha1.ACMEIssuerDNS01ProviderAzureDNS, out *certmanager.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in *v1alpha2.ACMEIssuerDNS01ProviderAzureDNS, out *certmanager.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
 	out.ClientID = in.ClientID
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
 		return err
 	}
 	out.SubscriptionID = in.SubscriptionID
@@ -929,108 +929,108 @@ func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIss
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in *v1alpha1.ACMEIssuerDNS01ProviderAzureDNS, out *certmanager.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in *v1alpha2.ACMEIssuerDNS01ProviderAzureDNS, out *certmanager.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS_To_certmanager_ACMEIssuerDNS01ProviderAzureDNS(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS(in *certmanager.ACMEIssuerDNS01ProviderAzureDNS, out *v1alpha1.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS(in *certmanager.ACMEIssuerDNS01ProviderAzureDNS, out *v1alpha2.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
 	out.ClientID = in.ClientID
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.ClientSecret, &out.ClientSecret, s); err != nil {
 		return err
 	}
 	out.SubscriptionID = in.SubscriptionID
 	out.TenantID = in.TenantID
 	out.ResourceGroupName = in.ResourceGroupName
 	out.HostedZoneName = in.HostedZoneName
-	out.Environment = v1alpha1.AzureDNSEnvironment(in.Environment)
+	out.Environment = v1alpha2.AzureDNSEnvironment(in.Environment)
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS(in *certmanager.ACMEIssuerDNS01ProviderAzureDNS, out *v1alpha1.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha1_ACMEIssuerDNS01ProviderAzureDNS(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS(in *certmanager.ACMEIssuerDNS01ProviderAzureDNS, out *v1alpha2.ACMEIssuerDNS01ProviderAzureDNS, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderAzureDNS_To_v1alpha2_ACMEIssuerDNS01ProviderAzureDNS(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in *v1alpha1.ACMEIssuerDNS01ProviderCloudDNS, out *certmanager.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ServiceAccount, &out.ServiceAccount, s); err != nil {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in *v1alpha2.ACMEIssuerDNS01ProviderCloudDNS, out *certmanager.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.ServiceAccount, &out.ServiceAccount, s); err != nil {
 		return err
 	}
 	out.Project = in.Project
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in *v1alpha1.ACMEIssuerDNS01ProviderCloudDNS, out *certmanager.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in *v1alpha2.ACMEIssuerDNS01ProviderCloudDNS, out *certmanager.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS_To_certmanager_ACMEIssuerDNS01ProviderCloudDNS(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS(in *certmanager.ACMEIssuerDNS01ProviderCloudDNS, out *v1alpha1.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.ServiceAccount, &out.ServiceAccount, s); err != nil {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS(in *certmanager.ACMEIssuerDNS01ProviderCloudDNS, out *v1alpha2.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.ServiceAccount, &out.ServiceAccount, s); err != nil {
 		return err
 	}
 	out.Project = in.Project
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS(in *certmanager.ACMEIssuerDNS01ProviderCloudDNS, out *v1alpha1.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha1_ACMEIssuerDNS01ProviderCloudDNS(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS(in *certmanager.ACMEIssuerDNS01ProviderCloudDNS, out *v1alpha2.ACMEIssuerDNS01ProviderCloudDNS, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudDNS_To_v1alpha2_ACMEIssuerDNS01ProviderCloudDNS(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in *v1alpha1.ACMEIssuerDNS01ProviderCloudflare, out *certmanager.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in *v1alpha2.ACMEIssuerDNS01ProviderCloudflare, out *certmanager.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
 	out.Email = in.Email
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.APIKey, &out.APIKey, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.APIKey, &out.APIKey, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in *v1alpha1.ACMEIssuerDNS01ProviderCloudflare, out *certmanager.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in *v1alpha2.ACMEIssuerDNS01ProviderCloudflare, out *certmanager.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderCloudflare_To_certmanager_ACMEIssuerDNS01ProviderCloudflare(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha1_ACMEIssuerDNS01ProviderCloudflare(in *certmanager.ACMEIssuerDNS01ProviderCloudflare, out *v1alpha1.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha2_ACMEIssuerDNS01ProviderCloudflare(in *certmanager.ACMEIssuerDNS01ProviderCloudflare, out *v1alpha2.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
 	out.Email = in.Email
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.APIKey, &out.APIKey, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.APIKey, &out.APIKey, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha1_ACMEIssuerDNS01ProviderCloudflare is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha1_ACMEIssuerDNS01ProviderCloudflare(in *certmanager.ACMEIssuerDNS01ProviderCloudflare, out *v1alpha1.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha1_ACMEIssuerDNS01ProviderCloudflare(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha2_ACMEIssuerDNS01ProviderCloudflare is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha2_ACMEIssuerDNS01ProviderCloudflare(in *certmanager.ACMEIssuerDNS01ProviderCloudflare, out *v1alpha2.ACMEIssuerDNS01ProviderCloudflare, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderCloudflare_To_v1alpha2_ACMEIssuerDNS01ProviderCloudflare(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in *v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean, out *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.Token, &out.Token, s); err != nil {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in *v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean, out *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.Token, &out.Token, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in *v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean, out *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in *v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean, out *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean_To_certmanager_ACMEIssuerDNS01ProviderDigitalOcean(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean(in *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, out *v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.Token, &out.Token, s); err != nil {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean(in *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, out *v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.Token, &out.Token, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean(in *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, out *v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha1_ACMEIssuerDNS01ProviderDigitalOcean(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean(in *certmanager.ACMEIssuerDNS01ProviderDigitalOcean, out *v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderDigitalOcean_To_v1alpha2_ACMEIssuerDNS01ProviderDigitalOcean(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in *v1alpha1.ACMEIssuerDNS01ProviderRFC2136, out *certmanager.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in *v1alpha2.ACMEIssuerDNS01ProviderRFC2136, out *certmanager.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
 	out.Nameserver = in.Nameserver
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.TSIGSecret, &out.TSIGSecret, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.TSIGSecret, &out.TSIGSecret, s); err != nil {
 		return err
 	}
 	out.TSIGKeyName = in.TSIGKeyName
@@ -1038,14 +1038,14 @@ func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssu
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136 is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in *v1alpha1.ACMEIssuerDNS01ProviderRFC2136, out *certmanager.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136 is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in *v1alpha2.ACMEIssuerDNS01ProviderRFC2136, out *certmanager.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderRFC2136_To_certmanager_ACMEIssuerDNS01ProviderRFC2136(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssuerDNS01ProviderRFC2136(in *certmanager.ACMEIssuerDNS01ProviderRFC2136, out *v1alpha1.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha2_ACMEIssuerDNS01ProviderRFC2136(in *certmanager.ACMEIssuerDNS01ProviderRFC2136, out *v1alpha2.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
 	out.Nameserver = in.Nameserver
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.TSIGSecret, &out.TSIGSecret, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.TSIGSecret, &out.TSIGSecret, s); err != nil {
 		return err
 	}
 	out.TSIGKeyName = in.TSIGKeyName
@@ -1053,14 +1053,14 @@ func autoConvert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssu
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssuerDNS01ProviderRFC2136 is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssuerDNS01ProviderRFC2136(in *certmanager.ACMEIssuerDNS01ProviderRFC2136, out *v1alpha1.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha1_ACMEIssuerDNS01ProviderRFC2136(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha2_ACMEIssuerDNS01ProviderRFC2136 is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha2_ACMEIssuerDNS01ProviderRFC2136(in *certmanager.ACMEIssuerDNS01ProviderRFC2136, out *v1alpha2.ACMEIssuerDNS01ProviderRFC2136, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderRFC2136_To_v1alpha2_ACMEIssuerDNS01ProviderRFC2136(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in *v1alpha1.ACMEIssuerDNS01ProviderRoute53, out *certmanager.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in *v1alpha2.ACMEIssuerDNS01ProviderRoute53, out *certmanager.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
 	out.AccessKeyID = in.AccessKeyID
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.SecretAccessKey, &out.SecretAccessKey, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.SecretAccessKey, &out.SecretAccessKey, s); err != nil {
 		return err
 	}
 	out.Role = in.Role
@@ -1069,14 +1069,14 @@ func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssu
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53 is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in *v1alpha1.ACMEIssuerDNS01ProviderRoute53, out *certmanager.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53 is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in *v1alpha2.ACMEIssuerDNS01ProviderRoute53, out *certmanager.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderRoute53_To_certmanager_ACMEIssuerDNS01ProviderRoute53(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssuerDNS01ProviderRoute53(in *certmanager.ACMEIssuerDNS01ProviderRoute53, out *v1alpha1.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha2_ACMEIssuerDNS01ProviderRoute53(in *certmanager.ACMEIssuerDNS01ProviderRoute53, out *v1alpha2.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
 	out.AccessKeyID = in.AccessKeyID
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.SecretAccessKey, &out.SecretAccessKey, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.SecretAccessKey, &out.SecretAccessKey, s); err != nil {
 		return err
 	}
 	out.Role = in.Role
@@ -1085,110 +1085,110 @@ func autoConvert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssu
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssuerDNS01ProviderRoute53 is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssuerDNS01ProviderRoute53(in *certmanager.ACMEIssuerDNS01ProviderRoute53, out *v1alpha1.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha1_ACMEIssuerDNS01ProviderRoute53(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha2_ACMEIssuerDNS01ProviderRoute53 is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha2_ACMEIssuerDNS01ProviderRoute53(in *certmanager.ACMEIssuerDNS01ProviderRoute53, out *v1alpha2.ACMEIssuerDNS01ProviderRoute53, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderRoute53_To_v1alpha2_ACMEIssuerDNS01ProviderRoute53(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in *v1alpha1.ACMEIssuerDNS01ProviderWebhook, out *certmanager.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in *v1alpha2.ACMEIssuerDNS01ProviderWebhook, out *certmanager.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
 	out.GroupName = in.GroupName
 	out.SolverName = in.SolverName
 	out.Config = (*v1beta1.JSON)(unsafe.Pointer(in.Config))
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in *v1alpha1.ACMEIssuerDNS01ProviderWebhook, out *certmanager.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in, out, s)
+// Convert_v1alpha2_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in *v1alpha2.ACMEIssuerDNS01ProviderWebhook, out *certmanager.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerDNS01ProviderWebhook_To_certmanager_ACMEIssuerDNS01ProviderWebhook(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha1_ACMEIssuerDNS01ProviderWebhook(in *certmanager.ACMEIssuerDNS01ProviderWebhook, out *v1alpha1.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha2_ACMEIssuerDNS01ProviderWebhook(in *certmanager.ACMEIssuerDNS01ProviderWebhook, out *v1alpha2.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
 	out.GroupName = in.GroupName
 	out.SolverName = in.SolverName
 	out.Config = (*v1beta1.JSON)(unsafe.Pointer(in.Config))
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha1_ACMEIssuerDNS01ProviderWebhook is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha1_ACMEIssuerDNS01ProviderWebhook(in *certmanager.ACMEIssuerDNS01ProviderWebhook, out *v1alpha1.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha1_ACMEIssuerDNS01ProviderWebhook(in, out, s)
+// Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha2_ACMEIssuerDNS01ProviderWebhook is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha2_ACMEIssuerDNS01ProviderWebhook(in *certmanager.ACMEIssuerDNS01ProviderWebhook, out *v1alpha2.ACMEIssuerDNS01ProviderWebhook, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerDNS01ProviderWebhook_To_v1alpha2_ACMEIssuerDNS01ProviderWebhook(in, out, s)
 }
 
-func autoConvert_v1alpha1_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in *v1alpha1.ACMEIssuerStatus, out *certmanager.ACMEIssuerStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in *v1alpha2.ACMEIssuerStatus, out *certmanager.ACMEIssuerStatus, s conversion.Scope) error {
 	out.URI = in.URI
 	out.LastRegisteredEmail = in.LastRegisteredEmail
 	return nil
 }
 
-// Convert_v1alpha1_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus is an autogenerated conversion function.
-func Convert_v1alpha1_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in *v1alpha1.ACMEIssuerStatus, out *certmanager.ACMEIssuerStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in, out, s)
+// Convert_v1alpha2_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus is an autogenerated conversion function.
+func Convert_v1alpha2_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in *v1alpha2.ACMEIssuerStatus, out *certmanager.ACMEIssuerStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ACMEIssuerStatus_To_certmanager_ACMEIssuerStatus(in, out, s)
 }
 
-func autoConvert_certmanager_ACMEIssuerStatus_To_v1alpha1_ACMEIssuerStatus(in *certmanager.ACMEIssuerStatus, out *v1alpha1.ACMEIssuerStatus, s conversion.Scope) error {
+func autoConvert_certmanager_ACMEIssuerStatus_To_v1alpha2_ACMEIssuerStatus(in *certmanager.ACMEIssuerStatus, out *v1alpha2.ACMEIssuerStatus, s conversion.Scope) error {
 	out.URI = in.URI
 	out.LastRegisteredEmail = in.LastRegisteredEmail
 	return nil
 }
 
-// Convert_certmanager_ACMEIssuerStatus_To_v1alpha1_ACMEIssuerStatus is an autogenerated conversion function.
-func Convert_certmanager_ACMEIssuerStatus_To_v1alpha1_ACMEIssuerStatus(in *certmanager.ACMEIssuerStatus, out *v1alpha1.ACMEIssuerStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_ACMEIssuerStatus_To_v1alpha1_ACMEIssuerStatus(in, out, s)
+// Convert_certmanager_ACMEIssuerStatus_To_v1alpha2_ACMEIssuerStatus is an autogenerated conversion function.
+func Convert_certmanager_ACMEIssuerStatus_To_v1alpha2_ACMEIssuerStatus(in *certmanager.ACMEIssuerStatus, out *v1alpha2.ACMEIssuerStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_ACMEIssuerStatus_To_v1alpha2_ACMEIssuerStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_CAIssuer_To_certmanager_CAIssuer(in *v1alpha1.CAIssuer, out *certmanager.CAIssuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_CAIssuer_To_certmanager_CAIssuer(in *v1alpha2.CAIssuer, out *certmanager.CAIssuer, s conversion.Scope) error {
 	out.SecretName = in.SecretName
 	return nil
 }
 
-// Convert_v1alpha1_CAIssuer_To_certmanager_CAIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_CAIssuer_To_certmanager_CAIssuer(in *v1alpha1.CAIssuer, out *certmanager.CAIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CAIssuer_To_certmanager_CAIssuer(in, out, s)
+// Convert_v1alpha2_CAIssuer_To_certmanager_CAIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_CAIssuer_To_certmanager_CAIssuer(in *v1alpha2.CAIssuer, out *certmanager.CAIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CAIssuer_To_certmanager_CAIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_CAIssuer_To_v1alpha1_CAIssuer(in *certmanager.CAIssuer, out *v1alpha1.CAIssuer, s conversion.Scope) error {
+func autoConvert_certmanager_CAIssuer_To_v1alpha2_CAIssuer(in *certmanager.CAIssuer, out *v1alpha2.CAIssuer, s conversion.Scope) error {
 	out.SecretName = in.SecretName
 	return nil
 }
 
-// Convert_certmanager_CAIssuer_To_v1alpha1_CAIssuer is an autogenerated conversion function.
-func Convert_certmanager_CAIssuer_To_v1alpha1_CAIssuer(in *certmanager.CAIssuer, out *v1alpha1.CAIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_CAIssuer_To_v1alpha1_CAIssuer(in, out, s)
+// Convert_certmanager_CAIssuer_To_v1alpha2_CAIssuer is an autogenerated conversion function.
+func Convert_certmanager_CAIssuer_To_v1alpha2_CAIssuer(in *certmanager.CAIssuer, out *v1alpha2.CAIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_CAIssuer_To_v1alpha2_CAIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_Certificate_To_certmanager_Certificate(in *v1alpha1.Certificate, out *certmanager.Certificate, s conversion.Scope) error {
+func autoConvert_v1alpha2_Certificate_To_certmanager_Certificate(in *v1alpha2.Certificate, out *certmanager.Certificate, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_Certificate_To_certmanager_Certificate is an autogenerated conversion function.
-func Convert_v1alpha1_Certificate_To_certmanager_Certificate(in *v1alpha1.Certificate, out *certmanager.Certificate, s conversion.Scope) error {
-	return autoConvert_v1alpha1_Certificate_To_certmanager_Certificate(in, out, s)
+// Convert_v1alpha2_Certificate_To_certmanager_Certificate is an autogenerated conversion function.
+func Convert_v1alpha2_Certificate_To_certmanager_Certificate(in *v1alpha2.Certificate, out *certmanager.Certificate, s conversion.Scope) error {
+	return autoConvert_v1alpha2_Certificate_To_certmanager_Certificate(in, out, s)
 }
 
-func autoConvert_certmanager_Certificate_To_v1alpha1_Certificate(in *certmanager.Certificate, out *v1alpha1.Certificate, s conversion.Scope) error {
+func autoConvert_certmanager_Certificate_To_v1alpha2_Certificate(in *certmanager.Certificate, out *v1alpha2.Certificate, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_Certificate_To_v1alpha1_Certificate is an autogenerated conversion function.
-func Convert_certmanager_Certificate_To_v1alpha1_Certificate(in *certmanager.Certificate, out *v1alpha1.Certificate, s conversion.Scope) error {
-	return autoConvert_certmanager_Certificate_To_v1alpha1_Certificate(in, out, s)
+// Convert_certmanager_Certificate_To_v1alpha2_Certificate is an autogenerated conversion function.
+func Convert_certmanager_Certificate_To_v1alpha2_Certificate(in *certmanager.Certificate, out *v1alpha2.Certificate, s conversion.Scope) error {
+	return autoConvert_certmanager_Certificate_To_v1alpha2_Certificate(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateCondition_To_certmanager_CertificateCondition(in *v1alpha1.CertificateCondition, out *certmanager.CertificateCondition, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateCondition_To_certmanager_CertificateCondition(in *v1alpha2.CertificateCondition, out *certmanager.CertificateCondition, s conversion.Scope) error {
 	out.Type = certmanager.CertificateConditionType(in.Type)
 	out.Status = certmanager.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
@@ -1197,104 +1197,104 @@ func autoConvert_v1alpha1_CertificateCondition_To_certmanager_CertificateConditi
 	return nil
 }
 
-// Convert_v1alpha1_CertificateCondition_To_certmanager_CertificateCondition is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateCondition_To_certmanager_CertificateCondition(in *v1alpha1.CertificateCondition, out *certmanager.CertificateCondition, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateCondition_To_certmanager_CertificateCondition(in, out, s)
+// Convert_v1alpha2_CertificateCondition_To_certmanager_CertificateCondition is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateCondition_To_certmanager_CertificateCondition(in *v1alpha2.CertificateCondition, out *certmanager.CertificateCondition, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateCondition_To_certmanager_CertificateCondition(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateCondition_To_v1alpha1_CertificateCondition(in *certmanager.CertificateCondition, out *v1alpha1.CertificateCondition, s conversion.Scope) error {
-	out.Type = v1alpha1.CertificateConditionType(in.Type)
-	out.Status = v1alpha1.ConditionStatus(in.Status)
+func autoConvert_certmanager_CertificateCondition_To_v1alpha2_CertificateCondition(in *certmanager.CertificateCondition, out *v1alpha2.CertificateCondition, s conversion.Scope) error {
+	out.Type = v1alpha2.CertificateConditionType(in.Type)
+	out.Status = v1alpha2.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
 	out.Reason = in.Reason
 	out.Message = in.Message
 	return nil
 }
 
-// Convert_certmanager_CertificateCondition_To_v1alpha1_CertificateCondition is an autogenerated conversion function.
-func Convert_certmanager_CertificateCondition_To_v1alpha1_CertificateCondition(in *certmanager.CertificateCondition, out *v1alpha1.CertificateCondition, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateCondition_To_v1alpha1_CertificateCondition(in, out, s)
+// Convert_certmanager_CertificateCondition_To_v1alpha2_CertificateCondition is an autogenerated conversion function.
+func Convert_certmanager_CertificateCondition_To_v1alpha2_CertificateCondition(in *certmanager.CertificateCondition, out *v1alpha2.CertificateCondition, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateCondition_To_v1alpha2_CertificateCondition(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in *v1alpha1.CertificateDNSNameSelector, out *certmanager.CertificateDNSNameSelector, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in *v1alpha2.CertificateDNSNameSelector, out *certmanager.CertificateDNSNameSelector, s conversion.Scope) error {
 	out.MatchLabels = *(*map[string]string)(unsafe.Pointer(&in.MatchLabels))
 	out.DNSNames = *(*[]string)(unsafe.Pointer(&in.DNSNames))
 	out.DNSZones = *(*[]string)(unsafe.Pointer(&in.DNSZones))
 	return nil
 }
 
-// Convert_v1alpha1_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in *v1alpha1.CertificateDNSNameSelector, out *certmanager.CertificateDNSNameSelector, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in, out, s)
+// Convert_v1alpha2_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in *v1alpha2.CertificateDNSNameSelector, out *certmanager.CertificateDNSNameSelector, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateDNSNameSelector_To_certmanager_CertificateDNSNameSelector(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateDNSNameSelector_To_v1alpha1_CertificateDNSNameSelector(in *certmanager.CertificateDNSNameSelector, out *v1alpha1.CertificateDNSNameSelector, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateDNSNameSelector_To_v1alpha2_CertificateDNSNameSelector(in *certmanager.CertificateDNSNameSelector, out *v1alpha2.CertificateDNSNameSelector, s conversion.Scope) error {
 	out.MatchLabels = *(*map[string]string)(unsafe.Pointer(&in.MatchLabels))
 	out.DNSNames = *(*[]string)(unsafe.Pointer(&in.DNSNames))
 	out.DNSZones = *(*[]string)(unsafe.Pointer(&in.DNSZones))
 	return nil
 }
 
-// Convert_certmanager_CertificateDNSNameSelector_To_v1alpha1_CertificateDNSNameSelector is an autogenerated conversion function.
-func Convert_certmanager_CertificateDNSNameSelector_To_v1alpha1_CertificateDNSNameSelector(in *certmanager.CertificateDNSNameSelector, out *v1alpha1.CertificateDNSNameSelector, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateDNSNameSelector_To_v1alpha1_CertificateDNSNameSelector(in, out, s)
+// Convert_certmanager_CertificateDNSNameSelector_To_v1alpha2_CertificateDNSNameSelector is an autogenerated conversion function.
+func Convert_certmanager_CertificateDNSNameSelector_To_v1alpha2_CertificateDNSNameSelector(in *certmanager.CertificateDNSNameSelector, out *v1alpha2.CertificateDNSNameSelector, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateDNSNameSelector_To_v1alpha2_CertificateDNSNameSelector(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateList_To_certmanager_CertificateList(in *v1alpha1.CertificateList, out *certmanager.CertificateList, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateList_To_certmanager_CertificateList(in *v1alpha2.CertificateList, out *certmanager.CertificateList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	out.Items = *(*[]certmanager.Certificate)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_v1alpha1_CertificateList_To_certmanager_CertificateList is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateList_To_certmanager_CertificateList(in *v1alpha1.CertificateList, out *certmanager.CertificateList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateList_To_certmanager_CertificateList(in, out, s)
+// Convert_v1alpha2_CertificateList_To_certmanager_CertificateList is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateList_To_certmanager_CertificateList(in *v1alpha2.CertificateList, out *certmanager.CertificateList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateList_To_certmanager_CertificateList(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateList_To_v1alpha1_CertificateList(in *certmanager.CertificateList, out *v1alpha1.CertificateList, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateList_To_v1alpha2_CertificateList(in *certmanager.CertificateList, out *v1alpha2.CertificateList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
-	out.Items = *(*[]v1alpha1.Certificate)(unsafe.Pointer(&in.Items))
+	out.Items = *(*[]v1alpha2.Certificate)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_certmanager_CertificateList_To_v1alpha1_CertificateList is an autogenerated conversion function.
-func Convert_certmanager_CertificateList_To_v1alpha1_CertificateList(in *certmanager.CertificateList, out *v1alpha1.CertificateList, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateList_To_v1alpha1_CertificateList(in, out, s)
+// Convert_certmanager_CertificateList_To_v1alpha2_CertificateList is an autogenerated conversion function.
+func Convert_certmanager_CertificateList_To_v1alpha2_CertificateList(in *certmanager.CertificateList, out *v1alpha2.CertificateList, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateList_To_v1alpha2_CertificateList(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateRequest_To_certmanager_CertificateRequest(in *v1alpha1.CertificateRequest, out *certmanager.CertificateRequest, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateRequest_To_certmanager_CertificateRequest(in *v1alpha2.CertificateRequest, out *certmanager.CertificateRequest, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_CertificateRequest_To_certmanager_CertificateRequest is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateRequest_To_certmanager_CertificateRequest(in *v1alpha1.CertificateRequest, out *certmanager.CertificateRequest, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateRequest_To_certmanager_CertificateRequest(in, out, s)
+// Convert_v1alpha2_CertificateRequest_To_certmanager_CertificateRequest is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateRequest_To_certmanager_CertificateRequest(in *v1alpha2.CertificateRequest, out *certmanager.CertificateRequest, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateRequest_To_certmanager_CertificateRequest(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateRequest_To_v1alpha1_CertificateRequest(in *certmanager.CertificateRequest, out *v1alpha1.CertificateRequest, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateRequest_To_v1alpha2_CertificateRequest(in *certmanager.CertificateRequest, out *v1alpha2.CertificateRequest, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_CertificateRequest_To_v1alpha1_CertificateRequest is an autogenerated conversion function.
-func Convert_certmanager_CertificateRequest_To_v1alpha1_CertificateRequest(in *certmanager.CertificateRequest, out *v1alpha1.CertificateRequest, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateRequest_To_v1alpha1_CertificateRequest(in, out, s)
+// Convert_certmanager_CertificateRequest_To_v1alpha2_CertificateRequest is an autogenerated conversion function.
+func Convert_certmanager_CertificateRequest_To_v1alpha2_CertificateRequest(in *certmanager.CertificateRequest, out *v1alpha2.CertificateRequest, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateRequest_To_v1alpha2_CertificateRequest(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in *v1alpha1.CertificateRequestCondition, out *certmanager.CertificateRequestCondition, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in *v1alpha2.CertificateRequestCondition, out *certmanager.CertificateRequestCondition, s conversion.Scope) error {
 	out.Type = certmanager.CertificateRequestConditionType(in.Type)
 	out.Status = certmanager.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
@@ -1303,50 +1303,50 @@ func autoConvert_v1alpha1_CertificateRequestCondition_To_certmanager_Certificate
 	return nil
 }
 
-// Convert_v1alpha1_CertificateRequestCondition_To_certmanager_CertificateRequestCondition is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in *v1alpha1.CertificateRequestCondition, out *certmanager.CertificateRequestCondition, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in, out, s)
+// Convert_v1alpha2_CertificateRequestCondition_To_certmanager_CertificateRequestCondition is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in *v1alpha2.CertificateRequestCondition, out *certmanager.CertificateRequestCondition, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateRequestCondition_To_certmanager_CertificateRequestCondition(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateRequestCondition_To_v1alpha1_CertificateRequestCondition(in *certmanager.CertificateRequestCondition, out *v1alpha1.CertificateRequestCondition, s conversion.Scope) error {
-	out.Type = v1alpha1.CertificateRequestConditionType(in.Type)
-	out.Status = v1alpha1.ConditionStatus(in.Status)
+func autoConvert_certmanager_CertificateRequestCondition_To_v1alpha2_CertificateRequestCondition(in *certmanager.CertificateRequestCondition, out *v1alpha2.CertificateRequestCondition, s conversion.Scope) error {
+	out.Type = v1alpha2.CertificateRequestConditionType(in.Type)
+	out.Status = v1alpha2.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
 	out.Reason = in.Reason
 	out.Message = in.Message
 	return nil
 }
 
-// Convert_certmanager_CertificateRequestCondition_To_v1alpha1_CertificateRequestCondition is an autogenerated conversion function.
-func Convert_certmanager_CertificateRequestCondition_To_v1alpha1_CertificateRequestCondition(in *certmanager.CertificateRequestCondition, out *v1alpha1.CertificateRequestCondition, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateRequestCondition_To_v1alpha1_CertificateRequestCondition(in, out, s)
+// Convert_certmanager_CertificateRequestCondition_To_v1alpha2_CertificateRequestCondition is an autogenerated conversion function.
+func Convert_certmanager_CertificateRequestCondition_To_v1alpha2_CertificateRequestCondition(in *certmanager.CertificateRequestCondition, out *v1alpha2.CertificateRequestCondition, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateRequestCondition_To_v1alpha2_CertificateRequestCondition(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateRequestList_To_certmanager_CertificateRequestList(in *v1alpha1.CertificateRequestList, out *certmanager.CertificateRequestList, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateRequestList_To_certmanager_CertificateRequestList(in *v1alpha2.CertificateRequestList, out *certmanager.CertificateRequestList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	out.Items = *(*[]certmanager.CertificateRequest)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_v1alpha1_CertificateRequestList_To_certmanager_CertificateRequestList is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateRequestList_To_certmanager_CertificateRequestList(in *v1alpha1.CertificateRequestList, out *certmanager.CertificateRequestList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateRequestList_To_certmanager_CertificateRequestList(in, out, s)
+// Convert_v1alpha2_CertificateRequestList_To_certmanager_CertificateRequestList is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateRequestList_To_certmanager_CertificateRequestList(in *v1alpha2.CertificateRequestList, out *certmanager.CertificateRequestList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateRequestList_To_certmanager_CertificateRequestList(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateRequestList_To_v1alpha1_CertificateRequestList(in *certmanager.CertificateRequestList, out *v1alpha1.CertificateRequestList, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateRequestList_To_v1alpha2_CertificateRequestList(in *certmanager.CertificateRequestList, out *v1alpha2.CertificateRequestList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
-	out.Items = *(*[]v1alpha1.CertificateRequest)(unsafe.Pointer(&in.Items))
+	out.Items = *(*[]v1alpha2.CertificateRequest)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_certmanager_CertificateRequestList_To_v1alpha1_CertificateRequestList is an autogenerated conversion function.
-func Convert_certmanager_CertificateRequestList_To_v1alpha1_CertificateRequestList(in *certmanager.CertificateRequestList, out *v1alpha1.CertificateRequestList, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateRequestList_To_v1alpha1_CertificateRequestList(in, out, s)
+// Convert_certmanager_CertificateRequestList_To_v1alpha2_CertificateRequestList is an autogenerated conversion function.
+func Convert_certmanager_CertificateRequestList_To_v1alpha2_CertificateRequestList(in *certmanager.CertificateRequestList, out *v1alpha2.CertificateRequestList, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateRequestList_To_v1alpha2_CertificateRequestList(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in *v1alpha1.CertificateRequestSpec, out *certmanager.CertificateRequestSpec, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in *v1alpha2.CertificateRequestSpec, out *certmanager.CertificateRequestSpec, s conversion.Scope) error {
 	out.Duration = (*metav1.Duration)(unsafe.Pointer(in.Duration))
-	if err := Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.CSRPEM = *(*[]byte)(unsafe.Pointer(&in.CSRPEM))
@@ -1355,28 +1355,28 @@ func autoConvert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateReque
 	return nil
 }
 
-// Convert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in *v1alpha1.CertificateRequestSpec, out *certmanager.CertificateRequestSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in, out, s)
+// Convert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in *v1alpha2.CertificateRequestSpec, out *certmanager.CertificateRequestSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateRequestSpec_To_certmanager_CertificateRequestSpec(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec(in *certmanager.CertificateRequestSpec, out *v1alpha1.CertificateRequestSpec, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec(in *certmanager.CertificateRequestSpec, out *v1alpha2.CertificateRequestSpec, s conversion.Scope) error {
 	out.Duration = (*metav1.Duration)(unsafe.Pointer(in.Duration))
-	if err := Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.CSRPEM = *(*[]byte)(unsafe.Pointer(&in.CSRPEM))
 	out.IsCA = in.IsCA
-	out.Usages = *(*[]v1alpha1.KeyUsage)(unsafe.Pointer(&in.Usages))
+	out.Usages = *(*[]v1alpha2.KeyUsage)(unsafe.Pointer(&in.Usages))
 	return nil
 }
 
-// Convert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec is an autogenerated conversion function.
-func Convert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec(in *certmanager.CertificateRequestSpec, out *v1alpha1.CertificateRequestSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateRequestSpec_To_v1alpha1_CertificateRequestSpec(in, out, s)
+// Convert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec is an autogenerated conversion function.
+func Convert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec(in *certmanager.CertificateRequestSpec, out *v1alpha2.CertificateRequestSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateRequestSpec_To_v1alpha2_CertificateRequestSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in *v1alpha1.CertificateRequestStatus, out *certmanager.CertificateRequestStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in *v1alpha2.CertificateRequestStatus, out *certmanager.CertificateRequestStatus, s conversion.Scope) error {
 	out.Conditions = *(*[]certmanager.CertificateRequestCondition)(unsafe.Pointer(&in.Conditions))
 	out.Certificate = *(*[]byte)(unsafe.Pointer(&in.Certificate))
 	out.CA = *(*[]byte)(unsafe.Pointer(&in.CA))
@@ -1384,25 +1384,25 @@ func autoConvert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateReq
 	return nil
 }
 
-// Convert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in *v1alpha1.CertificateRequestStatus, out *certmanager.CertificateRequestStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in, out, s)
+// Convert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in *v1alpha2.CertificateRequestStatus, out *certmanager.CertificateRequestStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateRequestStatus_To_certmanager_CertificateRequestStatus(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus(in *certmanager.CertificateRequestStatus, out *v1alpha1.CertificateRequestStatus, s conversion.Scope) error {
-	out.Conditions = *(*[]v1alpha1.CertificateRequestCondition)(unsafe.Pointer(&in.Conditions))
+func autoConvert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus(in *certmanager.CertificateRequestStatus, out *v1alpha2.CertificateRequestStatus, s conversion.Scope) error {
+	out.Conditions = *(*[]v1alpha2.CertificateRequestCondition)(unsafe.Pointer(&in.Conditions))
 	out.Certificate = *(*[]byte)(unsafe.Pointer(&in.Certificate))
 	out.CA = *(*[]byte)(unsafe.Pointer(&in.CA))
 	out.FailureTime = (*metav1.Time)(unsafe.Pointer(in.FailureTime))
 	return nil
 }
 
-// Convert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus is an autogenerated conversion function.
-func Convert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus(in *certmanager.CertificateRequestStatus, out *v1alpha1.CertificateRequestStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateRequestStatus_To_v1alpha1_CertificateRequestStatus(in, out, s)
+// Convert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus is an autogenerated conversion function.
+func Convert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus(in *certmanager.CertificateRequestStatus, out *v1alpha2.CertificateRequestStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateRequestStatus_To_v1alpha2_CertificateRequestStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(in *v1alpha1.CertificateSpec, out *certmanager.CertificateSpec, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec(in *v1alpha2.CertificateSpec, out *certmanager.CertificateSpec, s conversion.Scope) error {
 	out.CommonName = in.CommonName
 	out.Organization = *(*[]string)(unsafe.Pointer(&in.Organization))
 	out.Duration = (*metav1.Duration)(unsafe.Pointer(in.Duration))
@@ -1410,7 +1410,7 @@ func autoConvert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(in *v1a
 	out.DNSNames = *(*[]string)(unsafe.Pointer(&in.DNSNames))
 	out.IPAddresses = *(*[]string)(unsafe.Pointer(&in.IPAddresses))
 	out.SecretName = in.SecretName
-	if err := Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.IsCA = in.IsCA
@@ -1421,12 +1421,12 @@ func autoConvert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(in *v1a
 	return nil
 }
 
-// Convert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(in *v1alpha1.CertificateSpec, out *certmanager.CertificateSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateSpec_To_certmanager_CertificateSpec(in, out, s)
+// Convert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec(in *v1alpha2.CertificateSpec, out *certmanager.CertificateSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateSpec_To_certmanager_CertificateSpec(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(in *certmanager.CertificateSpec, out *v1alpha1.CertificateSpec, s conversion.Scope) error {
+func autoConvert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec(in *certmanager.CertificateSpec, out *v1alpha2.CertificateSpec, s conversion.Scope) error {
 	out.CommonName = in.CommonName
 	out.Organization = *(*[]string)(unsafe.Pointer(&in.Organization))
 	out.Duration = (*metav1.Duration)(unsafe.Pointer(in.Duration))
@@ -1434,101 +1434,101 @@ func autoConvert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(in *cer
 	out.DNSNames = *(*[]string)(unsafe.Pointer(&in.DNSNames))
 	out.IPAddresses = *(*[]string)(unsafe.Pointer(&in.IPAddresses))
 	out.SecretName = in.SecretName
-	if err := Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.IsCA = in.IsCA
-	out.Usages = *(*[]v1alpha1.KeyUsage)(unsafe.Pointer(&in.Usages))
+	out.Usages = *(*[]v1alpha2.KeyUsage)(unsafe.Pointer(&in.Usages))
 	out.KeySize = in.KeySize
-	out.KeyAlgorithm = v1alpha1.KeyAlgorithm(in.KeyAlgorithm)
-	out.KeyEncoding = v1alpha1.KeyEncoding(in.KeyEncoding)
+	out.KeyAlgorithm = v1alpha2.KeyAlgorithm(in.KeyAlgorithm)
+	out.KeyEncoding = v1alpha2.KeyEncoding(in.KeyEncoding)
 	return nil
 }
 
-// Convert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec is an autogenerated conversion function.
-func Convert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(in *certmanager.CertificateSpec, out *v1alpha1.CertificateSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateSpec_To_v1alpha1_CertificateSpec(in, out, s)
+// Convert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec is an autogenerated conversion function.
+func Convert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec(in *certmanager.CertificateSpec, out *v1alpha2.CertificateSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateSpec_To_v1alpha2_CertificateSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus(in *v1alpha1.CertificateStatus, out *certmanager.CertificateStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus(in *v1alpha2.CertificateStatus, out *certmanager.CertificateStatus, s conversion.Scope) error {
 	out.Conditions = *(*[]certmanager.CertificateCondition)(unsafe.Pointer(&in.Conditions))
 	out.LastFailureTime = (*metav1.Time)(unsafe.Pointer(in.LastFailureTime))
 	out.NotAfter = (*metav1.Time)(unsafe.Pointer(in.NotAfter))
 	return nil
 }
 
-// Convert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus is an autogenerated conversion function.
-func Convert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus(in *v1alpha1.CertificateStatus, out *certmanager.CertificateStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_CertificateStatus_To_certmanager_CertificateStatus(in, out, s)
+// Convert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus is an autogenerated conversion function.
+func Convert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus(in *v1alpha2.CertificateStatus, out *certmanager.CertificateStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_CertificateStatus_To_certmanager_CertificateStatus(in, out, s)
 }
 
-func autoConvert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus(in *certmanager.CertificateStatus, out *v1alpha1.CertificateStatus, s conversion.Scope) error {
-	out.Conditions = *(*[]v1alpha1.CertificateCondition)(unsafe.Pointer(&in.Conditions))
+func autoConvert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus(in *certmanager.CertificateStatus, out *v1alpha2.CertificateStatus, s conversion.Scope) error {
+	out.Conditions = *(*[]v1alpha2.CertificateCondition)(unsafe.Pointer(&in.Conditions))
 	out.LastFailureTime = (*metav1.Time)(unsafe.Pointer(in.LastFailureTime))
 	out.NotAfter = (*metav1.Time)(unsafe.Pointer(in.NotAfter))
 	return nil
 }
 
-// Convert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus is an autogenerated conversion function.
-func Convert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus(in *certmanager.CertificateStatus, out *v1alpha1.CertificateStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_CertificateStatus_To_v1alpha1_CertificateStatus(in, out, s)
+// Convert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus is an autogenerated conversion function.
+func Convert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus(in *certmanager.CertificateStatus, out *v1alpha2.CertificateStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_CertificateStatus_To_v1alpha2_CertificateStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_Challenge_To_certmanager_Challenge(in *v1alpha1.Challenge, out *certmanager.Challenge, s conversion.Scope) error {
+func autoConvert_v1alpha2_Challenge_To_certmanager_Challenge(in *v1alpha2.Challenge, out *certmanager.Challenge, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_Challenge_To_certmanager_Challenge is an autogenerated conversion function.
-func Convert_v1alpha1_Challenge_To_certmanager_Challenge(in *v1alpha1.Challenge, out *certmanager.Challenge, s conversion.Scope) error {
-	return autoConvert_v1alpha1_Challenge_To_certmanager_Challenge(in, out, s)
+// Convert_v1alpha2_Challenge_To_certmanager_Challenge is an autogenerated conversion function.
+func Convert_v1alpha2_Challenge_To_certmanager_Challenge(in *v1alpha2.Challenge, out *certmanager.Challenge, s conversion.Scope) error {
+	return autoConvert_v1alpha2_Challenge_To_certmanager_Challenge(in, out, s)
 }
 
-func autoConvert_certmanager_Challenge_To_v1alpha1_Challenge(in *certmanager.Challenge, out *v1alpha1.Challenge, s conversion.Scope) error {
+func autoConvert_certmanager_Challenge_To_v1alpha2_Challenge(in *certmanager.Challenge, out *v1alpha2.Challenge, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_Challenge_To_v1alpha1_Challenge is an autogenerated conversion function.
-func Convert_certmanager_Challenge_To_v1alpha1_Challenge(in *certmanager.Challenge, out *v1alpha1.Challenge, s conversion.Scope) error {
-	return autoConvert_certmanager_Challenge_To_v1alpha1_Challenge(in, out, s)
+// Convert_certmanager_Challenge_To_v1alpha2_Challenge is an autogenerated conversion function.
+func Convert_certmanager_Challenge_To_v1alpha2_Challenge(in *certmanager.Challenge, out *v1alpha2.Challenge, s conversion.Scope) error {
+	return autoConvert_certmanager_Challenge_To_v1alpha2_Challenge(in, out, s)
 }
 
-func autoConvert_v1alpha1_ChallengeList_To_certmanager_ChallengeList(in *v1alpha1.ChallengeList, out *certmanager.ChallengeList, s conversion.Scope) error {
+func autoConvert_v1alpha2_ChallengeList_To_certmanager_ChallengeList(in *v1alpha2.ChallengeList, out *certmanager.ChallengeList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	out.Items = *(*[]certmanager.Challenge)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_v1alpha1_ChallengeList_To_certmanager_ChallengeList is an autogenerated conversion function.
-func Convert_v1alpha1_ChallengeList_To_certmanager_ChallengeList(in *v1alpha1.ChallengeList, out *certmanager.ChallengeList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ChallengeList_To_certmanager_ChallengeList(in, out, s)
+// Convert_v1alpha2_ChallengeList_To_certmanager_ChallengeList is an autogenerated conversion function.
+func Convert_v1alpha2_ChallengeList_To_certmanager_ChallengeList(in *v1alpha2.ChallengeList, out *certmanager.ChallengeList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ChallengeList_To_certmanager_ChallengeList(in, out, s)
 }
 
-func autoConvert_certmanager_ChallengeList_To_v1alpha1_ChallengeList(in *certmanager.ChallengeList, out *v1alpha1.ChallengeList, s conversion.Scope) error {
+func autoConvert_certmanager_ChallengeList_To_v1alpha2_ChallengeList(in *certmanager.ChallengeList, out *v1alpha2.ChallengeList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
-	out.Items = *(*[]v1alpha1.Challenge)(unsafe.Pointer(&in.Items))
+	out.Items = *(*[]v1alpha2.Challenge)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_certmanager_ChallengeList_To_v1alpha1_ChallengeList is an autogenerated conversion function.
-func Convert_certmanager_ChallengeList_To_v1alpha1_ChallengeList(in *certmanager.ChallengeList, out *v1alpha1.ChallengeList, s conversion.Scope) error {
-	return autoConvert_certmanager_ChallengeList_To_v1alpha1_ChallengeList(in, out, s)
+// Convert_certmanager_ChallengeList_To_v1alpha2_ChallengeList is an autogenerated conversion function.
+func Convert_certmanager_ChallengeList_To_v1alpha2_ChallengeList(in *certmanager.ChallengeList, out *v1alpha2.ChallengeList, s conversion.Scope) error {
+	return autoConvert_certmanager_ChallengeList_To_v1alpha2_ChallengeList(in, out, s)
 }
 
-func autoConvert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(in *v1alpha1.ChallengeSpec, out *certmanager.ChallengeSpec, s conversion.Scope) error {
+func autoConvert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec(in *v1alpha2.ChallengeSpec, out *certmanager.ChallengeSpec, s conversion.Scope) error {
 	out.AuthzURL = in.AuthzURL
 	out.Type = string(in.Type)
 	out.URL = in.URL
@@ -1537,38 +1537,38 @@ func autoConvert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(in *v1alpha
 	out.Key = in.Key
 	out.Wildcard = in.Wildcard
 	out.Solver = (*certmanager.ACMEChallengeSolver)(unsafe.Pointer(in.Solver))
-	if err := Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec is an autogenerated conversion function.
-func Convert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(in *v1alpha1.ChallengeSpec, out *certmanager.ChallengeSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ChallengeSpec_To_certmanager_ChallengeSpec(in, out, s)
+// Convert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec is an autogenerated conversion function.
+func Convert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec(in *v1alpha2.ChallengeSpec, out *certmanager.ChallengeSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ChallengeSpec_To_certmanager_ChallengeSpec(in, out, s)
 }
 
-func autoConvert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec(in *certmanager.ChallengeSpec, out *v1alpha1.ChallengeSpec, s conversion.Scope) error {
+func autoConvert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec(in *certmanager.ChallengeSpec, out *v1alpha2.ChallengeSpec, s conversion.Scope) error {
 	out.AuthzURL = in.AuthzURL
-	out.Type = v1alpha1.ACMEChallengeType(in.Type)
+	out.Type = v1alpha2.ACMEChallengeType(in.Type)
 	out.URL = in.URL
 	out.DNSName = in.DNSName
 	out.Token = in.Token
 	out.Key = in.Key
 	out.Wildcard = in.Wildcard
-	out.Solver = (*v1alpha1.ACMEChallengeSolver)(unsafe.Pointer(in.Solver))
-	if err := Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	out.Solver = (*v1alpha2.ACMEChallengeSolver)(unsafe.Pointer(in.Solver))
+	if err := Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec is an autogenerated conversion function.
-func Convert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec(in *certmanager.ChallengeSpec, out *v1alpha1.ChallengeSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_ChallengeSpec_To_v1alpha1_ChallengeSpec(in, out, s)
+// Convert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec is an autogenerated conversion function.
+func Convert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec(in *certmanager.ChallengeSpec, out *v1alpha2.ChallengeSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_ChallengeSpec_To_v1alpha2_ChallengeSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(in *v1alpha1.ChallengeStatus, out *certmanager.ChallengeStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus(in *v1alpha2.ChallengeStatus, out *certmanager.ChallengeStatus, s conversion.Scope) error {
 	out.Processing = in.Processing
 	out.Presented = in.Presented
 	out.Reason = in.Reason
@@ -1576,111 +1576,111 @@ func autoConvert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(in *v1a
 	return nil
 }
 
-// Convert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus is an autogenerated conversion function.
-func Convert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(in *v1alpha1.ChallengeStatus, out *certmanager.ChallengeStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ChallengeStatus_To_certmanager_ChallengeStatus(in, out, s)
+// Convert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus is an autogenerated conversion function.
+func Convert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus(in *v1alpha2.ChallengeStatus, out *certmanager.ChallengeStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ChallengeStatus_To_certmanager_ChallengeStatus(in, out, s)
 }
 
-func autoConvert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus(in *certmanager.ChallengeStatus, out *v1alpha1.ChallengeStatus, s conversion.Scope) error {
+func autoConvert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus(in *certmanager.ChallengeStatus, out *v1alpha2.ChallengeStatus, s conversion.Scope) error {
 	out.Processing = in.Processing
 	out.Presented = in.Presented
 	out.Reason = in.Reason
-	out.State = v1alpha1.State(in.State)
+	out.State = v1alpha2.State(in.State)
 	return nil
 }
 
-// Convert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus is an autogenerated conversion function.
-func Convert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus(in *certmanager.ChallengeStatus, out *v1alpha1.ChallengeStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_ChallengeStatus_To_v1alpha1_ChallengeStatus(in, out, s)
+// Convert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus is an autogenerated conversion function.
+func Convert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus(in *certmanager.ChallengeStatus, out *v1alpha2.ChallengeStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_ChallengeStatus_To_v1alpha2_ChallengeStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_ClusterIssuer_To_certmanager_ClusterIssuer(in *v1alpha1.ClusterIssuer, out *certmanager.ClusterIssuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_ClusterIssuer_To_certmanager_ClusterIssuer(in *v1alpha2.ClusterIssuer, out *certmanager.ClusterIssuer, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_ClusterIssuer_To_certmanager_ClusterIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_ClusterIssuer_To_certmanager_ClusterIssuer(in *v1alpha1.ClusterIssuer, out *certmanager.ClusterIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ClusterIssuer_To_certmanager_ClusterIssuer(in, out, s)
+// Convert_v1alpha2_ClusterIssuer_To_certmanager_ClusterIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_ClusterIssuer_To_certmanager_ClusterIssuer(in *v1alpha2.ClusterIssuer, out *certmanager.ClusterIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ClusterIssuer_To_certmanager_ClusterIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_ClusterIssuer_To_v1alpha1_ClusterIssuer(in *certmanager.ClusterIssuer, out *v1alpha1.ClusterIssuer, s conversion.Scope) error {
+func autoConvert_certmanager_ClusterIssuer_To_v1alpha2_ClusterIssuer(in *certmanager.ClusterIssuer, out *v1alpha2.ClusterIssuer, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_ClusterIssuer_To_v1alpha1_ClusterIssuer is an autogenerated conversion function.
-func Convert_certmanager_ClusterIssuer_To_v1alpha1_ClusterIssuer(in *certmanager.ClusterIssuer, out *v1alpha1.ClusterIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_ClusterIssuer_To_v1alpha1_ClusterIssuer(in, out, s)
+// Convert_certmanager_ClusterIssuer_To_v1alpha2_ClusterIssuer is an autogenerated conversion function.
+func Convert_certmanager_ClusterIssuer_To_v1alpha2_ClusterIssuer(in *certmanager.ClusterIssuer, out *v1alpha2.ClusterIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_ClusterIssuer_To_v1alpha2_ClusterIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_ClusterIssuerList_To_certmanager_ClusterIssuerList(in *v1alpha1.ClusterIssuerList, out *certmanager.ClusterIssuerList, s conversion.Scope) error {
+func autoConvert_v1alpha2_ClusterIssuerList_To_certmanager_ClusterIssuerList(in *v1alpha2.ClusterIssuerList, out *certmanager.ClusterIssuerList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	out.Items = *(*[]certmanager.ClusterIssuer)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_v1alpha1_ClusterIssuerList_To_certmanager_ClusterIssuerList is an autogenerated conversion function.
-func Convert_v1alpha1_ClusterIssuerList_To_certmanager_ClusterIssuerList(in *v1alpha1.ClusterIssuerList, out *certmanager.ClusterIssuerList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ClusterIssuerList_To_certmanager_ClusterIssuerList(in, out, s)
+// Convert_v1alpha2_ClusterIssuerList_To_certmanager_ClusterIssuerList is an autogenerated conversion function.
+func Convert_v1alpha2_ClusterIssuerList_To_certmanager_ClusterIssuerList(in *v1alpha2.ClusterIssuerList, out *certmanager.ClusterIssuerList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ClusterIssuerList_To_certmanager_ClusterIssuerList(in, out, s)
 }
 
-func autoConvert_certmanager_ClusterIssuerList_To_v1alpha1_ClusterIssuerList(in *certmanager.ClusterIssuerList, out *v1alpha1.ClusterIssuerList, s conversion.Scope) error {
+func autoConvert_certmanager_ClusterIssuerList_To_v1alpha2_ClusterIssuerList(in *certmanager.ClusterIssuerList, out *v1alpha2.ClusterIssuerList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
-	out.Items = *(*[]v1alpha1.ClusterIssuer)(unsafe.Pointer(&in.Items))
+	out.Items = *(*[]v1alpha2.ClusterIssuer)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_certmanager_ClusterIssuerList_To_v1alpha1_ClusterIssuerList is an autogenerated conversion function.
-func Convert_certmanager_ClusterIssuerList_To_v1alpha1_ClusterIssuerList(in *certmanager.ClusterIssuerList, out *v1alpha1.ClusterIssuerList, s conversion.Scope) error {
-	return autoConvert_certmanager_ClusterIssuerList_To_v1alpha1_ClusterIssuerList(in, out, s)
+// Convert_certmanager_ClusterIssuerList_To_v1alpha2_ClusterIssuerList is an autogenerated conversion function.
+func Convert_certmanager_ClusterIssuerList_To_v1alpha2_ClusterIssuerList(in *certmanager.ClusterIssuerList, out *v1alpha2.ClusterIssuerList, s conversion.Scope) error {
+	return autoConvert_certmanager_ClusterIssuerList_To_v1alpha2_ClusterIssuerList(in, out, s)
 }
 
-func autoConvert_v1alpha1_Issuer_To_certmanager_Issuer(in *v1alpha1.Issuer, out *certmanager.Issuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_Issuer_To_certmanager_Issuer(in *v1alpha2.Issuer, out *certmanager.Issuer, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_Issuer_To_certmanager_Issuer is an autogenerated conversion function.
-func Convert_v1alpha1_Issuer_To_certmanager_Issuer(in *v1alpha1.Issuer, out *certmanager.Issuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_Issuer_To_certmanager_Issuer(in, out, s)
+// Convert_v1alpha2_Issuer_To_certmanager_Issuer is an autogenerated conversion function.
+func Convert_v1alpha2_Issuer_To_certmanager_Issuer(in *v1alpha2.Issuer, out *certmanager.Issuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_Issuer_To_certmanager_Issuer(in, out, s)
 }
 
-func autoConvert_certmanager_Issuer_To_v1alpha1_Issuer(in *certmanager.Issuer, out *v1alpha1.Issuer, s conversion.Scope) error {
+func autoConvert_certmanager_Issuer_To_v1alpha2_Issuer(in *certmanager.Issuer, out *v1alpha2.Issuer, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_Issuer_To_v1alpha1_Issuer is an autogenerated conversion function.
-func Convert_certmanager_Issuer_To_v1alpha1_Issuer(in *certmanager.Issuer, out *v1alpha1.Issuer, s conversion.Scope) error {
-	return autoConvert_certmanager_Issuer_To_v1alpha1_Issuer(in, out, s)
+// Convert_certmanager_Issuer_To_v1alpha2_Issuer is an autogenerated conversion function.
+func Convert_certmanager_Issuer_To_v1alpha2_Issuer(in *certmanager.Issuer, out *v1alpha2.Issuer, s conversion.Scope) error {
+	return autoConvert_certmanager_Issuer_To_v1alpha2_Issuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition(in *v1alpha1.IssuerCondition, out *certmanager.IssuerCondition, s conversion.Scope) error {
+func autoConvert_v1alpha2_IssuerCondition_To_certmanager_IssuerCondition(in *v1alpha2.IssuerCondition, out *certmanager.IssuerCondition, s conversion.Scope) error {
 	out.Type = certmanager.IssuerConditionType(in.Type)
 	out.Status = certmanager.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
@@ -1689,26 +1689,26 @@ func autoConvert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition(in *v1a
 	return nil
 }
 
-// Convert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition is an autogenerated conversion function.
-func Convert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition(in *v1alpha1.IssuerCondition, out *certmanager.IssuerCondition, s conversion.Scope) error {
-	return autoConvert_v1alpha1_IssuerCondition_To_certmanager_IssuerCondition(in, out, s)
+// Convert_v1alpha2_IssuerCondition_To_certmanager_IssuerCondition is an autogenerated conversion function.
+func Convert_v1alpha2_IssuerCondition_To_certmanager_IssuerCondition(in *v1alpha2.IssuerCondition, out *certmanager.IssuerCondition, s conversion.Scope) error {
+	return autoConvert_v1alpha2_IssuerCondition_To_certmanager_IssuerCondition(in, out, s)
 }
 
-func autoConvert_certmanager_IssuerCondition_To_v1alpha1_IssuerCondition(in *certmanager.IssuerCondition, out *v1alpha1.IssuerCondition, s conversion.Scope) error {
-	out.Type = v1alpha1.IssuerConditionType(in.Type)
-	out.Status = v1alpha1.ConditionStatus(in.Status)
+func autoConvert_certmanager_IssuerCondition_To_v1alpha2_IssuerCondition(in *certmanager.IssuerCondition, out *v1alpha2.IssuerCondition, s conversion.Scope) error {
+	out.Type = v1alpha2.IssuerConditionType(in.Type)
+	out.Status = v1alpha2.ConditionStatus(in.Status)
 	out.LastTransitionTime = (*metav1.Time)(unsafe.Pointer(in.LastTransitionTime))
 	out.Reason = in.Reason
 	out.Message = in.Message
 	return nil
 }
 
-// Convert_certmanager_IssuerCondition_To_v1alpha1_IssuerCondition is an autogenerated conversion function.
-func Convert_certmanager_IssuerCondition_To_v1alpha1_IssuerCondition(in *certmanager.IssuerCondition, out *v1alpha1.IssuerCondition, s conversion.Scope) error {
-	return autoConvert_certmanager_IssuerCondition_To_v1alpha1_IssuerCondition(in, out, s)
+// Convert_certmanager_IssuerCondition_To_v1alpha2_IssuerCondition is an autogenerated conversion function.
+func Convert_certmanager_IssuerCondition_To_v1alpha2_IssuerCondition(in *certmanager.IssuerCondition, out *v1alpha2.IssuerCondition, s conversion.Scope) error {
+	return autoConvert_certmanager_IssuerCondition_To_v1alpha2_IssuerCondition(in, out, s)
 }
 
-func autoConvert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(in *v1alpha1.IssuerConfig, out *certmanager.IssuerConfig, s conversion.Scope) error {
+func autoConvert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig(in *v1alpha2.IssuerConfig, out *certmanager.IssuerConfig, s conversion.Scope) error {
 	out.ACME = (*certmanager.ACMEIssuer)(unsafe.Pointer(in.ACME))
 	out.CA = (*certmanager.CAIssuer)(unsafe.Pointer(in.CA))
 	out.Vault = (*certmanager.VaultIssuer)(unsafe.Pointer(in.Vault))
@@ -1717,176 +1717,176 @@ func autoConvert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(in *v1alpha1.
 	return nil
 }
 
-// Convert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig is an autogenerated conversion function.
-func Convert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(in *v1alpha1.IssuerConfig, out *certmanager.IssuerConfig, s conversion.Scope) error {
-	return autoConvert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(in, out, s)
+// Convert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig is an autogenerated conversion function.
+func Convert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig(in *v1alpha2.IssuerConfig, out *certmanager.IssuerConfig, s conversion.Scope) error {
+	return autoConvert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig(in, out, s)
 }
 
-func autoConvert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig(in *certmanager.IssuerConfig, out *v1alpha1.IssuerConfig, s conversion.Scope) error {
-	out.ACME = (*v1alpha1.ACMEIssuer)(unsafe.Pointer(in.ACME))
-	out.CA = (*v1alpha1.CAIssuer)(unsafe.Pointer(in.CA))
-	out.Vault = (*v1alpha1.VaultIssuer)(unsafe.Pointer(in.Vault))
-	out.SelfSigned = (*v1alpha1.SelfSignedIssuer)(unsafe.Pointer(in.SelfSigned))
-	out.Venafi = (*v1alpha1.VenafiIssuer)(unsafe.Pointer(in.Venafi))
+func autoConvert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig(in *certmanager.IssuerConfig, out *v1alpha2.IssuerConfig, s conversion.Scope) error {
+	out.ACME = (*v1alpha2.ACMEIssuer)(unsafe.Pointer(in.ACME))
+	out.CA = (*v1alpha2.CAIssuer)(unsafe.Pointer(in.CA))
+	out.Vault = (*v1alpha2.VaultIssuer)(unsafe.Pointer(in.Vault))
+	out.SelfSigned = (*v1alpha2.SelfSignedIssuer)(unsafe.Pointer(in.SelfSigned))
+	out.Venafi = (*v1alpha2.VenafiIssuer)(unsafe.Pointer(in.Venafi))
 	return nil
 }
 
-// Convert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig is an autogenerated conversion function.
-func Convert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig(in *certmanager.IssuerConfig, out *v1alpha1.IssuerConfig, s conversion.Scope) error {
-	return autoConvert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig(in, out, s)
+// Convert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig is an autogenerated conversion function.
+func Convert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig(in *certmanager.IssuerConfig, out *v1alpha2.IssuerConfig, s conversion.Scope) error {
+	return autoConvert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig(in, out, s)
 }
 
-func autoConvert_v1alpha1_IssuerList_To_certmanager_IssuerList(in *v1alpha1.IssuerList, out *certmanager.IssuerList, s conversion.Scope) error {
+func autoConvert_v1alpha2_IssuerList_To_certmanager_IssuerList(in *v1alpha2.IssuerList, out *certmanager.IssuerList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	out.Items = *(*[]certmanager.Issuer)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_v1alpha1_IssuerList_To_certmanager_IssuerList is an autogenerated conversion function.
-func Convert_v1alpha1_IssuerList_To_certmanager_IssuerList(in *v1alpha1.IssuerList, out *certmanager.IssuerList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_IssuerList_To_certmanager_IssuerList(in, out, s)
+// Convert_v1alpha2_IssuerList_To_certmanager_IssuerList is an autogenerated conversion function.
+func Convert_v1alpha2_IssuerList_To_certmanager_IssuerList(in *v1alpha2.IssuerList, out *certmanager.IssuerList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_IssuerList_To_certmanager_IssuerList(in, out, s)
 }
 
-func autoConvert_certmanager_IssuerList_To_v1alpha1_IssuerList(in *certmanager.IssuerList, out *v1alpha1.IssuerList, s conversion.Scope) error {
+func autoConvert_certmanager_IssuerList_To_v1alpha2_IssuerList(in *certmanager.IssuerList, out *v1alpha2.IssuerList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
-	out.Items = *(*[]v1alpha1.Issuer)(unsafe.Pointer(&in.Items))
+	out.Items = *(*[]v1alpha2.Issuer)(unsafe.Pointer(&in.Items))
 	return nil
 }
 
-// Convert_certmanager_IssuerList_To_v1alpha1_IssuerList is an autogenerated conversion function.
-func Convert_certmanager_IssuerList_To_v1alpha1_IssuerList(in *certmanager.IssuerList, out *v1alpha1.IssuerList, s conversion.Scope) error {
-	return autoConvert_certmanager_IssuerList_To_v1alpha1_IssuerList(in, out, s)
+// Convert_certmanager_IssuerList_To_v1alpha2_IssuerList is an autogenerated conversion function.
+func Convert_certmanager_IssuerList_To_v1alpha2_IssuerList(in *certmanager.IssuerList, out *v1alpha2.IssuerList, s conversion.Scope) error {
+	return autoConvert_certmanager_IssuerList_To_v1alpha2_IssuerList(in, out, s)
 }
 
-func autoConvert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(in *v1alpha1.IssuerSpec, out *certmanager.IssuerSpec, s conversion.Scope) error {
-	if err := Convert_v1alpha1_IssuerConfig_To_certmanager_IssuerConfig(&in.IssuerConfig, &out.IssuerConfig, s); err != nil {
+func autoConvert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(in *v1alpha2.IssuerSpec, out *certmanager.IssuerSpec, s conversion.Scope) error {
+	if err := Convert_v1alpha2_IssuerConfig_To_certmanager_IssuerConfig(&in.IssuerConfig, &out.IssuerConfig, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec is an autogenerated conversion function.
-func Convert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(in *v1alpha1.IssuerSpec, out *certmanager.IssuerSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_IssuerSpec_To_certmanager_IssuerSpec(in, out, s)
+// Convert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec is an autogenerated conversion function.
+func Convert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(in *v1alpha2.IssuerSpec, out *certmanager.IssuerSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_IssuerSpec_To_certmanager_IssuerSpec(in, out, s)
 }
 
-func autoConvert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(in *certmanager.IssuerSpec, out *v1alpha1.IssuerSpec, s conversion.Scope) error {
-	if err := Convert_certmanager_IssuerConfig_To_v1alpha1_IssuerConfig(&in.IssuerConfig, &out.IssuerConfig, s); err != nil {
+func autoConvert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(in *certmanager.IssuerSpec, out *v1alpha2.IssuerSpec, s conversion.Scope) error {
+	if err := Convert_certmanager_IssuerConfig_To_v1alpha2_IssuerConfig(&in.IssuerConfig, &out.IssuerConfig, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec is an autogenerated conversion function.
-func Convert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(in *certmanager.IssuerSpec, out *v1alpha1.IssuerSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_IssuerSpec_To_v1alpha1_IssuerSpec(in, out, s)
+// Convert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec is an autogenerated conversion function.
+func Convert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(in *certmanager.IssuerSpec, out *v1alpha2.IssuerSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_IssuerSpec_To_v1alpha2_IssuerSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(in *v1alpha1.IssuerStatus, out *certmanager.IssuerStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(in *v1alpha2.IssuerStatus, out *certmanager.IssuerStatus, s conversion.Scope) error {
 	out.Conditions = *(*[]certmanager.IssuerCondition)(unsafe.Pointer(&in.Conditions))
 	out.ACME = (*certmanager.ACMEIssuerStatus)(unsafe.Pointer(in.ACME))
 	return nil
 }
 
-// Convert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus is an autogenerated conversion function.
-func Convert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(in *v1alpha1.IssuerStatus, out *certmanager.IssuerStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_IssuerStatus_To_certmanager_IssuerStatus(in, out, s)
+// Convert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus is an autogenerated conversion function.
+func Convert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(in *v1alpha2.IssuerStatus, out *certmanager.IssuerStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_IssuerStatus_To_certmanager_IssuerStatus(in, out, s)
 }
 
-func autoConvert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(in *certmanager.IssuerStatus, out *v1alpha1.IssuerStatus, s conversion.Scope) error {
-	out.Conditions = *(*[]v1alpha1.IssuerCondition)(unsafe.Pointer(&in.Conditions))
-	out.ACME = (*v1alpha1.ACMEIssuerStatus)(unsafe.Pointer(in.ACME))
+func autoConvert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(in *certmanager.IssuerStatus, out *v1alpha2.IssuerStatus, s conversion.Scope) error {
+	out.Conditions = *(*[]v1alpha2.IssuerCondition)(unsafe.Pointer(&in.Conditions))
+	out.ACME = (*v1alpha2.ACMEIssuerStatus)(unsafe.Pointer(in.ACME))
 	return nil
 }
 
-// Convert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus is an autogenerated conversion function.
-func Convert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(in *certmanager.IssuerStatus, out *v1alpha1.IssuerStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_IssuerStatus_To_v1alpha1_IssuerStatus(in, out, s)
+// Convert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus is an autogenerated conversion function.
+func Convert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(in *certmanager.IssuerStatus, out *v1alpha2.IssuerStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_IssuerStatus_To_v1alpha2_IssuerStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(in *v1alpha1.LocalObjectReference, out *certmanager.LocalObjectReference, s conversion.Scope) error {
+func autoConvert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(in *v1alpha2.LocalObjectReference, out *certmanager.LocalObjectReference, s conversion.Scope) error {
 	out.Name = in.Name
 	return nil
 }
 
-// Convert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference is an autogenerated conversion function.
-func Convert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(in *v1alpha1.LocalObjectReference, out *certmanager.LocalObjectReference, s conversion.Scope) error {
-	return autoConvert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(in, out, s)
+// Convert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference is an autogenerated conversion function.
+func Convert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(in *v1alpha2.LocalObjectReference, out *certmanager.LocalObjectReference, s conversion.Scope) error {
+	return autoConvert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(in, out, s)
 }
 
-func autoConvert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(in *certmanager.LocalObjectReference, out *v1alpha1.LocalObjectReference, s conversion.Scope) error {
+func autoConvert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(in *certmanager.LocalObjectReference, out *v1alpha2.LocalObjectReference, s conversion.Scope) error {
 	out.Name = in.Name
 	return nil
 }
 
-// Convert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference is an autogenerated conversion function.
-func Convert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(in *certmanager.LocalObjectReference, out *v1alpha1.LocalObjectReference, s conversion.Scope) error {
-	return autoConvert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(in, out, s)
+// Convert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference is an autogenerated conversion function.
+func Convert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(in *certmanager.LocalObjectReference, out *v1alpha2.LocalObjectReference, s conversion.Scope) error {
+	return autoConvert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(in, out, s)
 }
 
-func autoConvert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(in *v1alpha1.ObjectReference, out *certmanager.ObjectReference, s conversion.Scope) error {
+func autoConvert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(in *v1alpha2.ObjectReference, out *certmanager.ObjectReference, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Kind = in.Kind
 	out.Group = in.Group
 	return nil
 }
 
-// Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference is an autogenerated conversion function.
-func Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(in *v1alpha1.ObjectReference, out *certmanager.ObjectReference, s conversion.Scope) error {
-	return autoConvert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(in, out, s)
+// Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference is an autogenerated conversion function.
+func Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(in *v1alpha2.ObjectReference, out *certmanager.ObjectReference, s conversion.Scope) error {
+	return autoConvert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(in, out, s)
 }
 
-func autoConvert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(in *certmanager.ObjectReference, out *v1alpha1.ObjectReference, s conversion.Scope) error {
+func autoConvert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(in *certmanager.ObjectReference, out *v1alpha2.ObjectReference, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Kind = in.Kind
 	out.Group = in.Group
 	return nil
 }
 
-// Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference is an autogenerated conversion function.
-func Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(in *certmanager.ObjectReference, out *v1alpha1.ObjectReference, s conversion.Scope) error {
-	return autoConvert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(in, out, s)
+// Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference is an autogenerated conversion function.
+func Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(in *certmanager.ObjectReference, out *v1alpha2.ObjectReference, s conversion.Scope) error {
+	return autoConvert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(in, out, s)
 }
 
-func autoConvert_v1alpha1_Order_To_certmanager_Order(in *v1alpha1.Order, out *certmanager.Order, s conversion.Scope) error {
+func autoConvert_v1alpha2_Order_To_certmanager_Order(in *v1alpha2.Order, out *certmanager.Order, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_v1alpha2_OrderSpec_To_certmanager_OrderSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_v1alpha2_OrderStatus_To_certmanager_OrderStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_Order_To_certmanager_Order is an autogenerated conversion function.
-func Convert_v1alpha1_Order_To_certmanager_Order(in *v1alpha1.Order, out *certmanager.Order, s conversion.Scope) error {
-	return autoConvert_v1alpha1_Order_To_certmanager_Order(in, out, s)
+// Convert_v1alpha2_Order_To_certmanager_Order is an autogenerated conversion function.
+func Convert_v1alpha2_Order_To_certmanager_Order(in *v1alpha2.Order, out *certmanager.Order, s conversion.Scope) error {
+	return autoConvert_v1alpha2_Order_To_certmanager_Order(in, out, s)
 }
 
-func autoConvert_certmanager_Order_To_v1alpha1_Order(in *certmanager.Order, out *v1alpha1.Order, s conversion.Scope) error {
+func autoConvert_certmanager_Order_To_v1alpha2_Order(in *certmanager.Order, out *v1alpha2.Order, s conversion.Scope) error {
 	out.ObjectMeta = in.ObjectMeta
-	if err := Convert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(&in.Spec, &out.Spec, s); err != nil {
+	if err := Convert_certmanager_OrderSpec_To_v1alpha2_OrderSpec(&in.Spec, &out.Spec, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_OrderStatus_To_v1alpha1_OrderStatus(&in.Status, &out.Status, s); err != nil {
+	if err := Convert_certmanager_OrderStatus_To_v1alpha2_OrderStatus(&in.Status, &out.Status, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_Order_To_v1alpha1_Order is an autogenerated conversion function.
-func Convert_certmanager_Order_To_v1alpha1_Order(in *certmanager.Order, out *v1alpha1.Order, s conversion.Scope) error {
-	return autoConvert_certmanager_Order_To_v1alpha1_Order(in, out, s)
+// Convert_certmanager_Order_To_v1alpha2_Order is an autogenerated conversion function.
+func Convert_certmanager_Order_To_v1alpha2_Order(in *certmanager.Order, out *v1alpha2.Order, s conversion.Scope) error {
+	return autoConvert_certmanager_Order_To_v1alpha2_Order(in, out, s)
 }
 
-func autoConvert_v1alpha1_OrderList_To_certmanager_OrderList(in *v1alpha1.OrderList, out *certmanager.OrderList, s conversion.Scope) error {
+func autoConvert_v1alpha2_OrderList_To_certmanager_OrderList(in *v1alpha2.OrderList, out *certmanager.OrderList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	if in.Items != nil {
 		in, out := &in.Items, &out.Items
 		*out = make([]certmanager.Order, len(*in))
 		for i := range *in {
-			if err := Convert_v1alpha1_Order_To_certmanager_Order(&(*in)[i], &(*out)[i], s); err != nil {
+			if err := Convert_v1alpha2_Order_To_certmanager_Order(&(*in)[i], &(*out)[i], s); err != nil {
 				return err
 			}
 		}
@@ -1896,18 +1896,18 @@ func autoConvert_v1alpha1_OrderList_To_certmanager_OrderList(in *v1alpha1.OrderL
 	return nil
 }
 
-// Convert_v1alpha1_OrderList_To_certmanager_OrderList is an autogenerated conversion function.
-func Convert_v1alpha1_OrderList_To_certmanager_OrderList(in *v1alpha1.OrderList, out *certmanager.OrderList, s conversion.Scope) error {
-	return autoConvert_v1alpha1_OrderList_To_certmanager_OrderList(in, out, s)
+// Convert_v1alpha2_OrderList_To_certmanager_OrderList is an autogenerated conversion function.
+func Convert_v1alpha2_OrderList_To_certmanager_OrderList(in *v1alpha2.OrderList, out *certmanager.OrderList, s conversion.Scope) error {
+	return autoConvert_v1alpha2_OrderList_To_certmanager_OrderList(in, out, s)
 }
 
-func autoConvert_certmanager_OrderList_To_v1alpha1_OrderList(in *certmanager.OrderList, out *v1alpha1.OrderList, s conversion.Scope) error {
+func autoConvert_certmanager_OrderList_To_v1alpha2_OrderList(in *certmanager.OrderList, out *v1alpha2.OrderList, s conversion.Scope) error {
 	out.ListMeta = in.ListMeta
 	if in.Items != nil {
 		in, out := &in.Items, &out.Items
-		*out = make([]v1alpha1.Order, len(*in))
+		*out = make([]v1alpha2.Order, len(*in))
 		for i := range *in {
-			if err := Convert_certmanager_Order_To_v1alpha1_Order(&(*in)[i], &(*out)[i], s); err != nil {
+			if err := Convert_certmanager_Order_To_v1alpha2_Order(&(*in)[i], &(*out)[i], s); err != nil {
 				return err
 			}
 		}
@@ -1917,14 +1917,14 @@ func autoConvert_certmanager_OrderList_To_v1alpha1_OrderList(in *certmanager.Ord
 	return nil
 }
 
-// Convert_certmanager_OrderList_To_v1alpha1_OrderList is an autogenerated conversion function.
-func Convert_certmanager_OrderList_To_v1alpha1_OrderList(in *certmanager.OrderList, out *v1alpha1.OrderList, s conversion.Scope) error {
-	return autoConvert_certmanager_OrderList_To_v1alpha1_OrderList(in, out, s)
+// Convert_certmanager_OrderList_To_v1alpha2_OrderList is an autogenerated conversion function.
+func Convert_certmanager_OrderList_To_v1alpha2_OrderList(in *certmanager.OrderList, out *v1alpha2.OrderList, s conversion.Scope) error {
+	return autoConvert_certmanager_OrderList_To_v1alpha2_OrderList(in, out, s)
 }
 
-func autoConvert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(in *v1alpha1.OrderSpec, out *certmanager.OrderSpec, s conversion.Scope) error {
+func autoConvert_v1alpha2_OrderSpec_To_certmanager_OrderSpec(in *v1alpha2.OrderSpec, out *certmanager.OrderSpec, s conversion.Scope) error {
 	out.CSR = *(*[]byte)(unsafe.Pointer(&in.CSR))
-	if err := Convert_v1alpha1_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_v1alpha2_ObjectReference_To_certmanager_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.CommonName = in.CommonName
@@ -1932,14 +1932,14 @@ func autoConvert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(in *v1alpha1.OrderS
 	return nil
 }
 
-// Convert_v1alpha1_OrderSpec_To_certmanager_OrderSpec is an autogenerated conversion function.
-func Convert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(in *v1alpha1.OrderSpec, out *certmanager.OrderSpec, s conversion.Scope) error {
-	return autoConvert_v1alpha1_OrderSpec_To_certmanager_OrderSpec(in, out, s)
+// Convert_v1alpha2_OrderSpec_To_certmanager_OrderSpec is an autogenerated conversion function.
+func Convert_v1alpha2_OrderSpec_To_certmanager_OrderSpec(in *v1alpha2.OrderSpec, out *certmanager.OrderSpec, s conversion.Scope) error {
+	return autoConvert_v1alpha2_OrderSpec_To_certmanager_OrderSpec(in, out, s)
 }
 
-func autoConvert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(in *certmanager.OrderSpec, out *v1alpha1.OrderSpec, s conversion.Scope) error {
+func autoConvert_certmanager_OrderSpec_To_v1alpha2_OrderSpec(in *certmanager.OrderSpec, out *v1alpha2.OrderSpec, s conversion.Scope) error {
 	out.CSR = *(*[]byte)(unsafe.Pointer(&in.CSR))
-	if err := Convert_certmanager_ObjectReference_To_v1alpha1_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
+	if err := Convert_certmanager_ObjectReference_To_v1alpha2_ObjectReference(&in.IssuerRef, &out.IssuerRef, s); err != nil {
 		return err
 	}
 	out.CommonName = in.CommonName
@@ -1947,12 +1947,12 @@ func autoConvert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(in *certmanager.Ord
 	return nil
 }
 
-// Convert_certmanager_OrderSpec_To_v1alpha1_OrderSpec is an autogenerated conversion function.
-func Convert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(in *certmanager.OrderSpec, out *v1alpha1.OrderSpec, s conversion.Scope) error {
-	return autoConvert_certmanager_OrderSpec_To_v1alpha1_OrderSpec(in, out, s)
+// Convert_certmanager_OrderSpec_To_v1alpha2_OrderSpec is an autogenerated conversion function.
+func Convert_certmanager_OrderSpec_To_v1alpha2_OrderSpec(in *certmanager.OrderSpec, out *v1alpha2.OrderSpec, s conversion.Scope) error {
+	return autoConvert_certmanager_OrderSpec_To_v1alpha2_OrderSpec(in, out, s)
 }
 
-func autoConvert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(in *v1alpha1.OrderStatus, out *certmanager.OrderStatus, s conversion.Scope) error {
+func autoConvert_v1alpha2_OrderStatus_To_certmanager_OrderStatus(in *v1alpha2.OrderStatus, out *certmanager.OrderStatus, s conversion.Scope) error {
 	out.URL = in.URL
 	out.FinalizeURL = in.FinalizeURL
 	out.Authorizations = *(*[]certmanager.ACMEAuthorization)(unsafe.Pointer(&in.Authorizations))
@@ -1963,131 +1963,131 @@ func autoConvert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(in *v1alpha1.Or
 	return nil
 }
 
-// Convert_v1alpha1_OrderStatus_To_certmanager_OrderStatus is an autogenerated conversion function.
-func Convert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(in *v1alpha1.OrderStatus, out *certmanager.OrderStatus, s conversion.Scope) error {
-	return autoConvert_v1alpha1_OrderStatus_To_certmanager_OrderStatus(in, out, s)
+// Convert_v1alpha2_OrderStatus_To_certmanager_OrderStatus is an autogenerated conversion function.
+func Convert_v1alpha2_OrderStatus_To_certmanager_OrderStatus(in *v1alpha2.OrderStatus, out *certmanager.OrderStatus, s conversion.Scope) error {
+	return autoConvert_v1alpha2_OrderStatus_To_certmanager_OrderStatus(in, out, s)
 }
 
-func autoConvert_certmanager_OrderStatus_To_v1alpha1_OrderStatus(in *certmanager.OrderStatus, out *v1alpha1.OrderStatus, s conversion.Scope) error {
+func autoConvert_certmanager_OrderStatus_To_v1alpha2_OrderStatus(in *certmanager.OrderStatus, out *v1alpha2.OrderStatus, s conversion.Scope) error {
 	out.URL = in.URL
 	out.FinalizeURL = in.FinalizeURL
 	out.Certificate = *(*[]byte)(unsafe.Pointer(&in.Certificate))
-	out.State = v1alpha1.State(in.State)
+	out.State = v1alpha2.State(in.State)
 	out.Reason = in.Reason
-	out.Authorizations = *(*[]v1alpha1.ACMEAuthorization)(unsafe.Pointer(&in.Authorizations))
+	out.Authorizations = *(*[]v1alpha2.ACMEAuthorization)(unsafe.Pointer(&in.Authorizations))
 	out.FailureTime = (*metav1.Time)(unsafe.Pointer(in.FailureTime))
 	return nil
 }
 
-// Convert_certmanager_OrderStatus_To_v1alpha1_OrderStatus is an autogenerated conversion function.
-func Convert_certmanager_OrderStatus_To_v1alpha1_OrderStatus(in *certmanager.OrderStatus, out *v1alpha1.OrderStatus, s conversion.Scope) error {
-	return autoConvert_certmanager_OrderStatus_To_v1alpha1_OrderStatus(in, out, s)
+// Convert_certmanager_OrderStatus_To_v1alpha2_OrderStatus is an autogenerated conversion function.
+func Convert_certmanager_OrderStatus_To_v1alpha2_OrderStatus(in *certmanager.OrderStatus, out *v1alpha2.OrderStatus, s conversion.Scope) error {
+	return autoConvert_certmanager_OrderStatus_To_v1alpha2_OrderStatus(in, out, s)
 }
 
-func autoConvert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(in *v1alpha1.SecretKeySelector, out *certmanager.SecretKeySelector, s conversion.Scope) error {
-	if err := Convert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(&in.LocalObjectReference, &out.LocalObjectReference, s); err != nil {
+func autoConvert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(in *v1alpha2.SecretKeySelector, out *certmanager.SecretKeySelector, s conversion.Scope) error {
+	if err := Convert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(&in.LocalObjectReference, &out.LocalObjectReference, s); err != nil {
 		return err
 	}
 	out.Key = in.Key
 	return nil
 }
 
-// Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector is an autogenerated conversion function.
-func Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(in *v1alpha1.SecretKeySelector, out *certmanager.SecretKeySelector, s conversion.Scope) error {
-	return autoConvert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(in, out, s)
+// Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector is an autogenerated conversion function.
+func Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(in *v1alpha2.SecretKeySelector, out *certmanager.SecretKeySelector, s conversion.Scope) error {
+	return autoConvert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(in, out, s)
 }
 
-func autoConvert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(in *certmanager.SecretKeySelector, out *v1alpha1.SecretKeySelector, s conversion.Scope) error {
-	if err := Convert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(&in.LocalObjectReference, &out.LocalObjectReference, s); err != nil {
+func autoConvert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(in *certmanager.SecretKeySelector, out *v1alpha2.SecretKeySelector, s conversion.Scope) error {
+	if err := Convert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(&in.LocalObjectReference, &out.LocalObjectReference, s); err != nil {
 		return err
 	}
 	out.Key = in.Key
 	return nil
 }
 
-// Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector is an autogenerated conversion function.
-func Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(in *certmanager.SecretKeySelector, out *v1alpha1.SecretKeySelector, s conversion.Scope) error {
-	return autoConvert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(in, out, s)
+// Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector is an autogenerated conversion function.
+func Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(in *certmanager.SecretKeySelector, out *v1alpha2.SecretKeySelector, s conversion.Scope) error {
+	return autoConvert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(in, out, s)
 }
 
-func autoConvert_v1alpha1_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in *v1alpha1.SelfSignedIssuer, out *certmanager.SelfSignedIssuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in *v1alpha2.SelfSignedIssuer, out *certmanager.SelfSignedIssuer, s conversion.Scope) error {
 	return nil
 }
 
-// Convert_v1alpha1_SelfSignedIssuer_To_certmanager_SelfSignedIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in *v1alpha1.SelfSignedIssuer, out *certmanager.SelfSignedIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in, out, s)
+// Convert_v1alpha2_SelfSignedIssuer_To_certmanager_SelfSignedIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in *v1alpha2.SelfSignedIssuer, out *certmanager.SelfSignedIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_SelfSignedIssuer_To_certmanager_SelfSignedIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_SelfSignedIssuer_To_v1alpha1_SelfSignedIssuer(in *certmanager.SelfSignedIssuer, out *v1alpha1.SelfSignedIssuer, s conversion.Scope) error {
+func autoConvert_certmanager_SelfSignedIssuer_To_v1alpha2_SelfSignedIssuer(in *certmanager.SelfSignedIssuer, out *v1alpha2.SelfSignedIssuer, s conversion.Scope) error {
 	return nil
 }
 
-// Convert_certmanager_SelfSignedIssuer_To_v1alpha1_SelfSignedIssuer is an autogenerated conversion function.
-func Convert_certmanager_SelfSignedIssuer_To_v1alpha1_SelfSignedIssuer(in *certmanager.SelfSignedIssuer, out *v1alpha1.SelfSignedIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_SelfSignedIssuer_To_v1alpha1_SelfSignedIssuer(in, out, s)
+// Convert_certmanager_SelfSignedIssuer_To_v1alpha2_SelfSignedIssuer is an autogenerated conversion function.
+func Convert_certmanager_SelfSignedIssuer_To_v1alpha2_SelfSignedIssuer(in *certmanager.SelfSignedIssuer, out *v1alpha2.SelfSignedIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_SelfSignedIssuer_To_v1alpha2_SelfSignedIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole(in *v1alpha1.VaultAppRole, out *certmanager.VaultAppRole, s conversion.Scope) error {
+func autoConvert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole(in *v1alpha2.VaultAppRole, out *certmanager.VaultAppRole, s conversion.Scope) error {
 	out.Path = in.Path
 	out.RoleId = in.RoleId
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.SecretRef, &out.SecretRef, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.SecretRef, &out.SecretRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole is an autogenerated conversion function.
-func Convert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole(in *v1alpha1.VaultAppRole, out *certmanager.VaultAppRole, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole(in, out, s)
+// Convert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole is an autogenerated conversion function.
+func Convert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole(in *v1alpha2.VaultAppRole, out *certmanager.VaultAppRole, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole(in, out, s)
 }
 
-func autoConvert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole(in *certmanager.VaultAppRole, out *v1alpha1.VaultAppRole, s conversion.Scope) error {
+func autoConvert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole(in *certmanager.VaultAppRole, out *v1alpha2.VaultAppRole, s conversion.Scope) error {
 	out.Path = in.Path
 	out.RoleId = in.RoleId
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.SecretRef, &out.SecretRef, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.SecretRef, &out.SecretRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole is an autogenerated conversion function.
-func Convert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole(in *certmanager.VaultAppRole, out *v1alpha1.VaultAppRole, s conversion.Scope) error {
-	return autoConvert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole(in, out, s)
+// Convert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole is an autogenerated conversion function.
+func Convert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole(in *certmanager.VaultAppRole, out *v1alpha2.VaultAppRole, s conversion.Scope) error {
+	return autoConvert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole(in, out, s)
 }
 
-func autoConvert_v1alpha1_VaultAuth_To_certmanager_VaultAuth(in *v1alpha1.VaultAuth, out *certmanager.VaultAuth, s conversion.Scope) error {
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.TokenSecretRef, &out.TokenSecretRef, s); err != nil {
+func autoConvert_v1alpha2_VaultAuth_To_certmanager_VaultAuth(in *v1alpha2.VaultAuth, out *certmanager.VaultAuth, s conversion.Scope) error {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.TokenSecretRef, &out.TokenSecretRef, s); err != nil {
 		return err
 	}
-	if err := Convert_v1alpha1_VaultAppRole_To_certmanager_VaultAppRole(&in.AppRole, &out.AppRole, s); err != nil {
+	if err := Convert_v1alpha2_VaultAppRole_To_certmanager_VaultAppRole(&in.AppRole, &out.AppRole, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_VaultAuth_To_certmanager_VaultAuth is an autogenerated conversion function.
-func Convert_v1alpha1_VaultAuth_To_certmanager_VaultAuth(in *v1alpha1.VaultAuth, out *certmanager.VaultAuth, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VaultAuth_To_certmanager_VaultAuth(in, out, s)
+// Convert_v1alpha2_VaultAuth_To_certmanager_VaultAuth is an autogenerated conversion function.
+func Convert_v1alpha2_VaultAuth_To_certmanager_VaultAuth(in *v1alpha2.VaultAuth, out *certmanager.VaultAuth, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VaultAuth_To_certmanager_VaultAuth(in, out, s)
 }
 
-func autoConvert_certmanager_VaultAuth_To_v1alpha1_VaultAuth(in *certmanager.VaultAuth, out *v1alpha1.VaultAuth, s conversion.Scope) error {
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.TokenSecretRef, &out.TokenSecretRef, s); err != nil {
+func autoConvert_certmanager_VaultAuth_To_v1alpha2_VaultAuth(in *certmanager.VaultAuth, out *v1alpha2.VaultAuth, s conversion.Scope) error {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.TokenSecretRef, &out.TokenSecretRef, s); err != nil {
 		return err
 	}
-	if err := Convert_certmanager_VaultAppRole_To_v1alpha1_VaultAppRole(&in.AppRole, &out.AppRole, s); err != nil {
+	if err := Convert_certmanager_VaultAppRole_To_v1alpha2_VaultAppRole(&in.AppRole, &out.AppRole, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_VaultAuth_To_v1alpha1_VaultAuth is an autogenerated conversion function.
-func Convert_certmanager_VaultAuth_To_v1alpha1_VaultAuth(in *certmanager.VaultAuth, out *v1alpha1.VaultAuth, s conversion.Scope) error {
-	return autoConvert_certmanager_VaultAuth_To_v1alpha1_VaultAuth(in, out, s)
+// Convert_certmanager_VaultAuth_To_v1alpha2_VaultAuth is an autogenerated conversion function.
+func Convert_certmanager_VaultAuth_To_v1alpha2_VaultAuth(in *certmanager.VaultAuth, out *v1alpha2.VaultAuth, s conversion.Scope) error {
+	return autoConvert_certmanager_VaultAuth_To_v1alpha2_VaultAuth(in, out, s)
 }
 
-func autoConvert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer(in *v1alpha1.VaultIssuer, out *certmanager.VaultIssuer, s conversion.Scope) error {
-	if err := Convert_v1alpha1_VaultAuth_To_certmanager_VaultAuth(&in.Auth, &out.Auth, s); err != nil {
+func autoConvert_v1alpha2_VaultIssuer_To_certmanager_VaultIssuer(in *v1alpha2.VaultIssuer, out *certmanager.VaultIssuer, s conversion.Scope) error {
+	if err := Convert_v1alpha2_VaultAuth_To_certmanager_VaultAuth(&in.Auth, &out.Auth, s); err != nil {
 		return err
 	}
 	out.Server = in.Server
@@ -2096,13 +2096,13 @@ func autoConvert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer(in *v1alpha1.Va
 	return nil
 }
 
-// Convert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer(in *v1alpha1.VaultIssuer, out *certmanager.VaultIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VaultIssuer_To_certmanager_VaultIssuer(in, out, s)
+// Convert_v1alpha2_VaultIssuer_To_certmanager_VaultIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_VaultIssuer_To_certmanager_VaultIssuer(in *v1alpha2.VaultIssuer, out *certmanager.VaultIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VaultIssuer_To_certmanager_VaultIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer(in *certmanager.VaultIssuer, out *v1alpha1.VaultIssuer, s conversion.Scope) error {
-	if err := Convert_certmanager_VaultAuth_To_v1alpha1_VaultAuth(&in.Auth, &out.Auth, s); err != nil {
+func autoConvert_certmanager_VaultIssuer_To_v1alpha2_VaultIssuer(in *certmanager.VaultIssuer, out *v1alpha2.VaultIssuer, s conversion.Scope) error {
+	if err := Convert_certmanager_VaultAuth_To_v1alpha2_VaultAuth(&in.Auth, &out.Auth, s); err != nil {
 		return err
 	}
 	out.Server = in.Server
@@ -2111,85 +2111,85 @@ func autoConvert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer(in *certmanager
 	return nil
 }
 
-// Convert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer is an autogenerated conversion function.
-func Convert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer(in *certmanager.VaultIssuer, out *v1alpha1.VaultIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_VaultIssuer_To_v1alpha1_VaultIssuer(in, out, s)
+// Convert_certmanager_VaultIssuer_To_v1alpha2_VaultIssuer is an autogenerated conversion function.
+func Convert_certmanager_VaultIssuer_To_v1alpha2_VaultIssuer(in *certmanager.VaultIssuer, out *v1alpha2.VaultIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_VaultIssuer_To_v1alpha2_VaultIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_VenafiCloud_To_certmanager_VenafiCloud(in *v1alpha1.VenafiCloud, out *certmanager.VenafiCloud, s conversion.Scope) error {
+func autoConvert_v1alpha2_VenafiCloud_To_certmanager_VenafiCloud(in *v1alpha2.VenafiCloud, out *certmanager.VenafiCloud, s conversion.Scope) error {
 	out.URL = in.URL
-	if err := Convert_v1alpha1_SecretKeySelector_To_certmanager_SecretKeySelector(&in.APITokenSecretRef, &out.APITokenSecretRef, s); err != nil {
+	if err := Convert_v1alpha2_SecretKeySelector_To_certmanager_SecretKeySelector(&in.APITokenSecretRef, &out.APITokenSecretRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_v1alpha1_VenafiCloud_To_certmanager_VenafiCloud is an autogenerated conversion function.
-func Convert_v1alpha1_VenafiCloud_To_certmanager_VenafiCloud(in *v1alpha1.VenafiCloud, out *certmanager.VenafiCloud, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VenafiCloud_To_certmanager_VenafiCloud(in, out, s)
+// Convert_v1alpha2_VenafiCloud_To_certmanager_VenafiCloud is an autogenerated conversion function.
+func Convert_v1alpha2_VenafiCloud_To_certmanager_VenafiCloud(in *v1alpha2.VenafiCloud, out *certmanager.VenafiCloud, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VenafiCloud_To_certmanager_VenafiCloud(in, out, s)
 }
 
-func autoConvert_certmanager_VenafiCloud_To_v1alpha1_VenafiCloud(in *certmanager.VenafiCloud, out *v1alpha1.VenafiCloud, s conversion.Scope) error {
+func autoConvert_certmanager_VenafiCloud_To_v1alpha2_VenafiCloud(in *certmanager.VenafiCloud, out *v1alpha2.VenafiCloud, s conversion.Scope) error {
 	out.URL = in.URL
-	if err := Convert_certmanager_SecretKeySelector_To_v1alpha1_SecretKeySelector(&in.APITokenSecretRef, &out.APITokenSecretRef, s); err != nil {
+	if err := Convert_certmanager_SecretKeySelector_To_v1alpha2_SecretKeySelector(&in.APITokenSecretRef, &out.APITokenSecretRef, s); err != nil {
 		return err
 	}
 	return nil
 }
 
-// Convert_certmanager_VenafiCloud_To_v1alpha1_VenafiCloud is an autogenerated conversion function.
-func Convert_certmanager_VenafiCloud_To_v1alpha1_VenafiCloud(in *certmanager.VenafiCloud, out *v1alpha1.VenafiCloud, s conversion.Scope) error {
-	return autoConvert_certmanager_VenafiCloud_To_v1alpha1_VenafiCloud(in, out, s)
+// Convert_certmanager_VenafiCloud_To_v1alpha2_VenafiCloud is an autogenerated conversion function.
+func Convert_certmanager_VenafiCloud_To_v1alpha2_VenafiCloud(in *certmanager.VenafiCloud, out *v1alpha2.VenafiCloud, s conversion.Scope) error {
+	return autoConvert_certmanager_VenafiCloud_To_v1alpha2_VenafiCloud(in, out, s)
 }
 
-func autoConvert_v1alpha1_VenafiIssuer_To_certmanager_VenafiIssuer(in *v1alpha1.VenafiIssuer, out *certmanager.VenafiIssuer, s conversion.Scope) error {
+func autoConvert_v1alpha2_VenafiIssuer_To_certmanager_VenafiIssuer(in *v1alpha2.VenafiIssuer, out *certmanager.VenafiIssuer, s conversion.Scope) error {
 	out.Zone = in.Zone
 	out.TPP = (*certmanager.VenafiTPP)(unsafe.Pointer(in.TPP))
 	out.Cloud = (*certmanager.VenafiCloud)(unsafe.Pointer(in.Cloud))
 	return nil
 }
 
-// Convert_v1alpha1_VenafiIssuer_To_certmanager_VenafiIssuer is an autogenerated conversion function.
-func Convert_v1alpha1_VenafiIssuer_To_certmanager_VenafiIssuer(in *v1alpha1.VenafiIssuer, out *certmanager.VenafiIssuer, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VenafiIssuer_To_certmanager_VenafiIssuer(in, out, s)
+// Convert_v1alpha2_VenafiIssuer_To_certmanager_VenafiIssuer is an autogenerated conversion function.
+func Convert_v1alpha2_VenafiIssuer_To_certmanager_VenafiIssuer(in *v1alpha2.VenafiIssuer, out *certmanager.VenafiIssuer, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VenafiIssuer_To_certmanager_VenafiIssuer(in, out, s)
 }
 
-func autoConvert_certmanager_VenafiIssuer_To_v1alpha1_VenafiIssuer(in *certmanager.VenafiIssuer, out *v1alpha1.VenafiIssuer, s conversion.Scope) error {
+func autoConvert_certmanager_VenafiIssuer_To_v1alpha2_VenafiIssuer(in *certmanager.VenafiIssuer, out *v1alpha2.VenafiIssuer, s conversion.Scope) error {
 	out.Zone = in.Zone
-	out.TPP = (*v1alpha1.VenafiTPP)(unsafe.Pointer(in.TPP))
-	out.Cloud = (*v1alpha1.VenafiCloud)(unsafe.Pointer(in.Cloud))
+	out.TPP = (*v1alpha2.VenafiTPP)(unsafe.Pointer(in.TPP))
+	out.Cloud = (*v1alpha2.VenafiCloud)(unsafe.Pointer(in.Cloud))
 	return nil
 }
 
-// Convert_certmanager_VenafiIssuer_To_v1alpha1_VenafiIssuer is an autogenerated conversion function.
-func Convert_certmanager_VenafiIssuer_To_v1alpha1_VenafiIssuer(in *certmanager.VenafiIssuer, out *v1alpha1.VenafiIssuer, s conversion.Scope) error {
-	return autoConvert_certmanager_VenafiIssuer_To_v1alpha1_VenafiIssuer(in, out, s)
+// Convert_certmanager_VenafiIssuer_To_v1alpha2_VenafiIssuer is an autogenerated conversion function.
+func Convert_certmanager_VenafiIssuer_To_v1alpha2_VenafiIssuer(in *certmanager.VenafiIssuer, out *v1alpha2.VenafiIssuer, s conversion.Scope) error {
+	return autoConvert_certmanager_VenafiIssuer_To_v1alpha2_VenafiIssuer(in, out, s)
 }
 
-func autoConvert_v1alpha1_VenafiTPP_To_certmanager_VenafiTPP(in *v1alpha1.VenafiTPP, out *certmanager.VenafiTPP, s conversion.Scope) error {
+func autoConvert_v1alpha2_VenafiTPP_To_certmanager_VenafiTPP(in *v1alpha2.VenafiTPP, out *certmanager.VenafiTPP, s conversion.Scope) error {
 	out.URL = in.URL
-	if err := Convert_v1alpha1_LocalObjectReference_To_certmanager_LocalObjectReference(&in.CredentialsRef, &out.CredentialsRef, s); err != nil {
+	if err := Convert_v1alpha2_LocalObjectReference_To_certmanager_LocalObjectReference(&in.CredentialsRef, &out.CredentialsRef, s); err != nil {
 		return err
 	}
 	out.CABundle = *(*[]byte)(unsafe.Pointer(&in.CABundle))
 	return nil
 }
 
-// Convert_v1alpha1_VenafiTPP_To_certmanager_VenafiTPP is an autogenerated conversion function.
-func Convert_v1alpha1_VenafiTPP_To_certmanager_VenafiTPP(in *v1alpha1.VenafiTPP, out *certmanager.VenafiTPP, s conversion.Scope) error {
-	return autoConvert_v1alpha1_VenafiTPP_To_certmanager_VenafiTPP(in, out, s)
+// Convert_v1alpha2_VenafiTPP_To_certmanager_VenafiTPP is an autogenerated conversion function.
+func Convert_v1alpha2_VenafiTPP_To_certmanager_VenafiTPP(in *v1alpha2.VenafiTPP, out *certmanager.VenafiTPP, s conversion.Scope) error {
+	return autoConvert_v1alpha2_VenafiTPP_To_certmanager_VenafiTPP(in, out, s)
 }
 
-func autoConvert_certmanager_VenafiTPP_To_v1alpha1_VenafiTPP(in *certmanager.VenafiTPP, out *v1alpha1.VenafiTPP, s conversion.Scope) error {
+func autoConvert_certmanager_VenafiTPP_To_v1alpha2_VenafiTPP(in *certmanager.VenafiTPP, out *v1alpha2.VenafiTPP, s conversion.Scope) error {
 	out.URL = in.URL
-	if err := Convert_certmanager_LocalObjectReference_To_v1alpha1_LocalObjectReference(&in.CredentialsRef, &out.CredentialsRef, s); err != nil {
+	if err := Convert_certmanager_LocalObjectReference_To_v1alpha2_LocalObjectReference(&in.CredentialsRef, &out.CredentialsRef, s); err != nil {
 		return err
 	}
 	out.CABundle = *(*[]byte)(unsafe.Pointer(&in.CABundle))
 	return nil
 }
 
-// Convert_certmanager_VenafiTPP_To_v1alpha1_VenafiTPP is an autogenerated conversion function.
-func Convert_certmanager_VenafiTPP_To_v1alpha1_VenafiTPP(in *certmanager.VenafiTPP, out *v1alpha1.VenafiTPP, s conversion.Scope) error {
-	return autoConvert_certmanager_VenafiTPP_To_v1alpha1_VenafiTPP(in, out, s)
+// Convert_certmanager_VenafiTPP_To_v1alpha2_VenafiTPP is an autogenerated conversion function.
+func Convert_certmanager_VenafiTPP_To_v1alpha2_VenafiTPP(in *certmanager.VenafiTPP, out *v1alpha2.VenafiTPP, s conversion.Scope) error {
+	return autoConvert_certmanager_VenafiTPP_To_v1alpha2_VenafiTPP(in, out, s)
 }
diff --git a/pkg/internal/apis/certmanager/v1alpha2/zz_generated.defaults.go b/pkg/internal/apis/certmanager/v1alpha2/zz_generated.defaults.go
index 159fad37f..1ec9978b2 100644
--- a/pkg/internal/apis/certmanager/v1alpha2/zz_generated.defaults.go
+++ b/pkg/internal/apis/certmanager/v1alpha2/zz_generated.defaults.go
@@ -18,7 +18,7 @@ limitations under the License.
 
 // Code generated by defaulter-gen. DO NOT EDIT.
 
-package v1alpha1
+package v1alpha2
 
 import (
 	runtime "k8s.io/apimachinery/pkg/runtime"
diff --git a/pkg/internal/apis/certmanager/validation/BUILD.bazel b/pkg/internal/apis/certmanager/validation/BUILD.bazel
index f8a489c12..a4f21d12b 100644
--- a/pkg/internal/apis/certmanager/validation/BUILD.bazel
+++ b/pkg/internal/apis/certmanager/validation/BUILD.bazel
@@ -13,7 +13,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/apis/certmanager/validation/util:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
@@ -32,7 +32,7 @@ go_test(
     ],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/unit/gen:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
diff --git a/pkg/internal/apis/certmanager/validation/certificate.go b/pkg/internal/apis/certmanager/validation/certificate.go
index ae82fb964..d63a82843 100644
--- a/pkg/internal/apis/certmanager/validation/certificate.go
+++ b/pkg/internal/apis/certmanager/validation/certificate.go
@@ -24,12 +24,12 @@ import (
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
 	"github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-// Validation functions for cert-manager v1alpha1 Certificate types
+// Validation functions for cert-manager v1alpha2 Certificate types
 
-func ValidateCertificateSpec(crt *v1alpha1.CertificateSpec, fldPath *field.Path) field.ErrorList {
+func ValidateCertificateSpec(crt *v1alpha2.CertificateSpec, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	if crt.SecretName == "" {
 		el = append(el, field.Required(fldPath.Child("secretName"), "must be specified"))
@@ -57,12 +57,12 @@ func ValidateCertificateSpec(crt *v1alpha1.CertificateSpec, fldPath *field.Path)
 		el = append(el, field.Invalid(fldPath.Child("keySize"), crt.KeySize, "cannot be less than zero"))
 	}
 	switch crt.KeyAlgorithm {
-	case v1alpha1.KeyAlgorithm(""):
-	case v1alpha1.RSAKeyAlgorithm:
+	case v1alpha2.KeyAlgorithm(""):
+	case v1alpha2.RSAKeyAlgorithm:
 		if crt.KeySize > 0 && (crt.KeySize < 2048 || crt.KeySize > 8192) {
 			el = append(el, field.Invalid(fldPath.Child("keySize"), crt.KeySize, "must be between 2048 & 8192 for rsa keyAlgorithm"))
 		}
-	case v1alpha1.ECDSAKeyAlgorithm:
+	case v1alpha2.ECDSAKeyAlgorithm:
 		if crt.KeySize > 0 && crt.KeySize != 256 && crt.KeySize != 384 && crt.KeySize != 521 {
 			el = append(el, field.NotSupported(fldPath.Child("keySize"), crt.KeySize, []string{"256", "384", "521"}))
 		}
@@ -77,7 +77,7 @@ func ValidateCertificateSpec(crt *v1alpha1.CertificateSpec, fldPath *field.Path)
 		el = append(el, validateUsages(crt, fldPath)...)
 	}
 	switch crt.KeyEncoding {
-	case v1alpha1.KeyEncoding(""), v1alpha1.PKCS1, v1alpha1.PKCS8:
+	case v1alpha2.KeyEncoding(""), v1alpha2.PKCS1, v1alpha2.PKCS8:
 	default:
 		el = append(el, field.Invalid(fldPath.Child("keyEncoding"), crt.KeyEncoding, "must be either empty or one of pkcs1 or pkcs8"))
 	}
@@ -85,19 +85,19 @@ func ValidateCertificateSpec(crt *v1alpha1.CertificateSpec, fldPath *field.Path)
 }
 
 func ValidateCertificate(obj runtime.Object) field.ErrorList {
-	crt := obj.(*v1alpha1.Certificate)
+	crt := obj.(*v1alpha2.Certificate)
 	allErrs := ValidateCertificateSpec(&crt.Spec, field.NewPath("spec"))
 	return allErrs
 }
 
-func validateIssuerRef(issuerRef v1alpha1.ObjectReference, fldPath *field.Path) field.ErrorList {
+func validateIssuerRef(issuerRef v1alpha2.ObjectReference, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	issuerRefPath := fldPath.Child("issuerRef")
 	if issuerRef.Name == "" {
 		el = append(el, field.Required(issuerRefPath.Child("name"), "must be specified"))
 	}
-	if issuerRef.Group == "" || issuerRef.Group == v1alpha1.SchemeGroupVersion.Group {
+	if issuerRef.Group == "" || issuerRef.Group == v1alpha2.SchemeGroupVersion.Group {
 		switch issuerRef.Kind {
 		case "":
 		case "Issuer", "ClusterIssuer":
@@ -108,7 +108,7 @@ func validateIssuerRef(issuerRef v1alpha1.ObjectReference, fldPath *field.Path)
 	return el
 }
 
-func validateIPAddresses(a *v1alpha1.CertificateSpec, fldPath *field.Path) field.ErrorList {
+func validateIPAddresses(a *v1alpha2.CertificateSpec, fldPath *field.Path) field.ErrorList {
 	if len(a.IPAddresses) <= 0 {
 		return nil
 	}
@@ -122,7 +122,7 @@ func validateIPAddresses(a *v1alpha1.CertificateSpec, fldPath *field.Path) field
 	return el
 }
 
-func validateUsages(a *v1alpha1.CertificateSpec, fldPath *field.Path) field.ErrorList {
+func validateUsages(a *v1alpha2.CertificateSpec, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	for i, u := range a.Usages {
 		_, kok := util.KeyUsageType(u)
@@ -134,19 +134,19 @@ func validateUsages(a *v1alpha1.CertificateSpec, fldPath *field.Path) field.Erro
 	return el
 }
 
-func ValidateDuration(crt *v1alpha1.CertificateSpec, fldPath *field.Path) field.ErrorList {
+func ValidateDuration(crt *v1alpha2.CertificateSpec, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	duration := util.DefaultCertDuration(crt.Duration)
-	renewBefore := v1alpha1.DefaultRenewBefore
+	renewBefore := v1alpha2.DefaultRenewBefore
 	if crt.RenewBefore != nil {
 		renewBefore = crt.RenewBefore.Duration
 	}
-	if duration < v1alpha1.MinimumCertificateDuration {
-		el = append(el, field.Invalid(fldPath.Child("duration"), duration, fmt.Sprintf("certificate duration must be greater than %s", v1alpha1.MinimumCertificateDuration)))
+	if duration < v1alpha2.MinimumCertificateDuration {
+		el = append(el, field.Invalid(fldPath.Child("duration"), duration, fmt.Sprintf("certificate duration must be greater than %s", v1alpha2.MinimumCertificateDuration)))
 	}
-	if renewBefore < v1alpha1.MinimumRenewBefore {
-		el = append(el, field.Invalid(fldPath.Child("renewBefore"), renewBefore, fmt.Sprintf("certificate renewBefore must be greater than %s", v1alpha1.MinimumRenewBefore)))
+	if renewBefore < v1alpha2.MinimumRenewBefore {
+		el = append(el, field.Invalid(fldPath.Child("renewBefore"), renewBefore, fmt.Sprintf("certificate renewBefore must be greater than %s", v1alpha2.MinimumRenewBefore)))
 	}
 	if duration <= renewBefore {
 		el = append(el, field.Invalid(fldPath.Child("renewBefore"), renewBefore, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", duration, renewBefore)))
diff --git a/pkg/internal/apis/certmanager/validation/certificate_for_issuer.go b/pkg/internal/apis/certmanager/validation/certificate_for_issuer.go
index 87b2a29fe..9dbc19c12 100644
--- a/pkg/internal/apis/certmanager/validation/certificate_for_issuer.go
+++ b/pkg/internal/apis/certmanager/validation/certificate_for_issuer.go
@@ -20,10 +20,10 @@ import (
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func ValidateCertificateForIssuer(crt *v1alpha1.Certificate, issuerObj v1alpha1.GenericIssuer) field.ErrorList {
+func ValidateCertificateForIssuer(crt *v1alpha2.Certificate, issuerObj v1alpha2.GenericIssuer) field.ErrorList {
 	el := field.ErrorList{}
 
 	path := field.NewPath("spec")
@@ -50,7 +50,7 @@ func ValidateCertificateForIssuer(crt *v1alpha1.Certificate, issuerObj v1alpha1.
 	return el
 }
 
-func ValidateCertificateForACMEIssuer(crt *v1alpha1.CertificateSpec, issuer *v1alpha1.IssuerSpec, specPath *field.Path) field.ErrorList {
+func ValidateCertificateForACMEIssuer(crt *v1alpha2.CertificateSpec, issuer *v1alpha2.IssuerSpec, specPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	if crt.IsCA {
@@ -72,13 +72,13 @@ func ValidateCertificateForACMEIssuer(crt *v1alpha1.CertificateSpec, issuer *v1a
 	return el
 }
 
-func ValidateCertificateForCAIssuer(crt *v1alpha1.CertificateSpec, issuer *v1alpha1.IssuerSpec, specPath *field.Path) field.ErrorList {
+func ValidateCertificateForCAIssuer(crt *v1alpha2.CertificateSpec, issuer *v1alpha2.IssuerSpec, specPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	return el
 }
 
-func ValidateCertificateForVaultIssuer(crt *v1alpha1.CertificateSpec, issuer *v1alpha1.IssuerSpec, specPath *field.Path) field.ErrorList {
+func ValidateCertificateForVaultIssuer(crt *v1alpha2.CertificateSpec, issuer *v1alpha2.IssuerSpec, specPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	if crt.IsCA {
@@ -92,13 +92,13 @@ func ValidateCertificateForVaultIssuer(crt *v1alpha1.CertificateSpec, issuer *v1
 	return el
 }
 
-func ValidateCertificateForSelfSignedIssuer(crt *v1alpha1.CertificateSpec, issuer *v1alpha1.IssuerSpec, specPath *field.Path) field.ErrorList {
+func ValidateCertificateForSelfSignedIssuer(crt *v1alpha2.CertificateSpec, issuer *v1alpha2.IssuerSpec, specPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	return el
 }
 
-func ValidateCertificateForVenafiIssuer(crt *v1alpha1.CertificateSpec, issuer *v1alpha1.IssuerSpec, specPath *field.Path) field.ErrorList {
+func ValidateCertificateForVenafiIssuer(crt *v1alpha2.CertificateSpec, issuer *v1alpha2.IssuerSpec, specPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	return el
diff --git a/pkg/internal/apis/certmanager/validation/certificate_for_issuer_test.go b/pkg/internal/apis/certmanager/validation/certificate_for_issuer_test.go
index 31ed874b1..93c217023 100644
--- a/pkg/internal/apis/certmanager/validation/certificate_for_issuer_test.go
+++ b/pkg/internal/apis/certmanager/validation/certificate_for_issuer_test.go
@@ -24,7 +24,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 )
 
@@ -38,90 +38,90 @@ func TestValidateCertificateForIssuer(t *testing.T) {
 	fldPath := field.NewPath("spec")
 
 	scenarios := map[string]struct {
-		crt    *v1alpha1.Certificate
-		issuer *v1alpha1.Issuer
+		crt    *v1alpha2.Certificate
+		issuer *v1alpha2.Issuer
 		errs   []*field.Error
 	}{
 		"valid basic certificate": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					IssuerRef: validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 		},
 		"certificate with RSA keyAlgorithm for ACME": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					IssuerRef:    validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 		},
 		"certificate with ECDSA keyAlgorithm for ACME": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					IssuerRef:    validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 		},
 		"acme certificate with organization set": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Organization: []string{"shouldfailorg"},
 					IssuerRef:    validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 			errs: []*field.Error{
 				field.Invalid(fldPath.Child("organization"), []string{"shouldfailorg"}, "ACME does not support setting the organization name"),
 			},
 		},
 		"acme certificate with duration set": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:  &metav1.Duration{Duration: time.Minute * 60},
 					IssuerRef: validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 			errs: []*field.Error{
 				field.Invalid(fldPath.Child("duration"), &metav1.Duration{Duration: time.Minute * 60}, "ACME does not support certificate durations"),
 			},
 		},
 		"acme certificate with ipAddresses set": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					IPAddresses: []string{"127.0.0.1"},
 					IssuerRef:   validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 			errs: []*field.Error{
 				field.Invalid(fldPath.Child("ipAddresses"), []string{"127.0.0.1"}, "ACME does not support certificate ip addresses"),
 			},
 		},
 		"acme certificate with renewBefore set": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					RenewBefore: &metav1.Duration{Duration: time.Minute * 60},
 					IssuerRef:   validIssuerRef,
 				},
 			},
-			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{})),
+			issuer: gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{})),
 			errs:   []*field.Error{},
 		},
 		"certificate with unspecified issuer type": {
-			crt: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+			crt: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					IssuerRef:    validIssuerRef,
 				},
 			},
-			issuer: &v1alpha1.Issuer{},
+			issuer: &v1alpha2.Issuer{},
 			errs: []*field.Error{
 				field.Invalid(fldPath, "no issuer specified for Issuer '/'", "no issuer specified for Issuer '/'"),
 			},
diff --git a/pkg/internal/apis/certmanager/validation/certificate_test.go b/pkg/internal/apis/certmanager/validation/certificate_test.go
index d41362d6c..aee7da2c8 100644
--- a/pkg/internal/apis/certmanager/validation/certificate_test.go
+++ b/pkg/internal/apis/certmanager/validation/certificate_test.go
@@ -22,14 +22,14 @@ import (
 	"testing"
 	"time"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
 var (
-	validIssuerRef = v1alpha1.ObjectReference{
+	validIssuerRef = v1alpha2.ObjectReference{
 		Name: "name",
 		Kind: "ClusterIssuer",
 	}
@@ -42,12 +42,12 @@ func strPtr(s string) *string {
 func TestValidateCertificate(t *testing.T) {
 	fldPath := field.NewPath("spec")
 	scenarios := map[string]struct {
-		cfg  *v1alpha1.Certificate
+		cfg  *v1alpha2.Certificate
 		errs []*field.Error
 	}{
 		"valid basic certificate": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -55,22 +55,22 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid with blank issuerRef kind": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
-					IssuerRef: v1alpha1.ObjectReference{
+					IssuerRef: v1alpha2.ObjectReference{
 						Name: "valid",
 					},
 				},
 			},
 		},
 		"valid with 'Issuer' issuerRef kind": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
-					IssuerRef: v1alpha1.ObjectReference{
+					IssuerRef: v1alpha2.ObjectReference{
 						Name: "valid",
 						Kind: "Issuer",
 					},
@@ -78,8 +78,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid with org set": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					Organization: []string{"testorg"},
@@ -88,11 +88,11 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"invalid issuerRef kind": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
-					IssuerRef: v1alpha1.ObjectReference{
+					IssuerRef: v1alpha2.ObjectReference{
 						Name: "valid",
 						Kind: "invalid",
 					},
@@ -103,8 +103,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate missing secretName": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					IssuerRef:  validIssuerRef,
 				},
@@ -114,8 +114,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with no domains": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
 				},
@@ -125,8 +125,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with no issuerRef": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 				},
@@ -136,8 +136,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with only dnsNames": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					DNSNames:   []string{"validdnsname"},
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -145,94 +145,94 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with rsa keyAlgorithm specified and no keySize": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 				},
 			},
 		},
 		"valid certificate with rsa keyAlgorithm specified with keySize 2048": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					KeySize:      2048,
 				},
 			},
 		},
 		"valid certificate with rsa keyAlgorithm specified with keySize 4096": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					KeySize:      4096,
 				},
 			},
 		},
 		"valid certificate with rsa keyAlgorithm specified with keySize 8192": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					KeySize:      8192,
 				},
 			},
 		},
 		"valid certificate with ecdsa keyAlgorithm specified and no keySize": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 				},
 			},
 		},
 		"valid certificate with ecdsa keyAlgorithm specified with keySize 256": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					KeySize:      256,
 				},
 			},
 		},
 		"valid certificate with ecdsa keyAlgorithm specified with keySize 384": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					KeySize:      384,
 				},
 			},
 		},
 		"valid certificate with ecdsa keyAlgorithm specified with keySize 521": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					KeySize:      521,
 				},
 			},
 		},
 		"valid certificate with keyAlgorithm not specified and keySize specified": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -241,8 +241,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with keysize less than zero": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -254,12 +254,12 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with rsa keyAlgorithm specified and invalid keysize 1024": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					KeySize:      1024,
 				},
 			},
@@ -268,12 +268,12 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with rsa keyAlgorithm specified and invalid keysize 8196": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.RSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.RSAKeyAlgorithm,
 					KeySize:      8196,
 				},
 			},
@@ -282,12 +282,12 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with ecdsa keyAlgorithm specified and invalid keysize": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.ECDSAKeyAlgorithm,
+					KeyAlgorithm: v1alpha2.ECDSAKeyAlgorithm,
 					KeySize:      100,
 				},
 			},
@@ -296,21 +296,21 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with invalid keyAlgorithm": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:   "testcn",
 					SecretName:   "abc",
 					IssuerRef:    validIssuerRef,
-					KeyAlgorithm: v1alpha1.KeyAlgorithm("blah"),
+					KeyAlgorithm: v1alpha2.KeyAlgorithm("blah"),
 				},
 			},
 			errs: []*field.Error{
-				field.Invalid(fldPath.Child("keyAlgorithm"), v1alpha1.KeyAlgorithm("blah"), "must be either empty or one of rsa or ecdsa"),
+				field.Invalid(fldPath.Child("keyAlgorithm"), v1alpha2.KeyAlgorithm("blah"), "must be either empty or one of rsa or ecdsa"),
 			},
 		},
 		"valid certificate with ipAddresses": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:  "testcn",
 					IPAddresses: []string{"127.0.0.1"},
 					SecretName:  "abc",
@@ -319,8 +319,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"certificate with invalid ipAddresses": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName:  "testcn",
 					IPAddresses: []string{"blah"},
 					SecretName:  "abc",
@@ -332,8 +332,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with commonName exactly 64 bytes": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "this-is-a-big-long-string-which-is-exactly-sixty-four-characters",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -342,8 +342,8 @@ func TestValidateCertificate(t *testing.T) {
 			errs: []*field.Error{},
 		},
 		"invalid certificate with commonName longer than 64 bytes": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "this-is-a-big-long-string-which-has-exactly-sixty-five-characters",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -354,8 +354,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"invalid certificate with no commonName and first dnsName longer than 64 bytes": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
 					DNSNames: []string{
@@ -369,8 +369,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with no commonName and second dnsName longer than 64 bytes": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
 					DNSNames: []string{
@@ -381,8 +381,8 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with commonName and first dnsName longer than 64 bytes": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -394,36 +394,36 @@ func TestValidateCertificate(t *testing.T) {
 			},
 		},
 		"valid certificate with basic keyusage": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
-					Usages:     []v1alpha1.KeyUsage{"signing"},
+					Usages:     []v1alpha2.KeyUsage{"signing"},
 				},
 			},
 		},
 		"valid certificate with multiple keyusage": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
-					Usages:     []v1alpha1.KeyUsage{"signing", "s/mime"},
+					Usages:     []v1alpha2.KeyUsage{"signing", "s/mime"},
 				},
 			},
 		},
 		"invalid certificate with nonexistant keyusage": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
-					Usages:     []v1alpha1.KeyUsage{"nonexistant"},
+					Usages:     []v1alpha2.KeyUsage{"nonexistant"},
 				},
 			},
 			errs: []*field.Error{
-				field.Invalid(fldPath.Child("usages").Index(0), v1alpha1.KeyUsage("nonexistant"), "unknown keyusage"),
+				field.Invalid(fldPath.Child("usages").Index(0), v1alpha2.KeyUsage("nonexistant"), "unknown keyusage"),
 			},
 		},
 	}
@@ -458,12 +458,12 @@ func TestValidateDuration(t *testing.T) {
 
 	fldPath := field.NewPath("spec")
 	scenarios := map[string]struct {
-		cfg  *v1alpha1.Certificate
+		cfg  *v1alpha2.Certificate
 		errs []*field.Error
 	}{
 		"default duration and renewBefore": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
@@ -471,8 +471,8 @@ func TestValidateDuration(t *testing.T) {
 			},
 		},
 		"valid duration and renewBefore": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:    usefulDurations["one year"],
 					RenewBefore: usefulDurations["half year"],
 					CommonName:  "testcn",
@@ -482,8 +482,8 @@ func TestValidateDuration(t *testing.T) {
 			},
 		},
 		"unset duration, valid renewBefore for default": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					RenewBefore: usefulDurations["one month"],
 					CommonName:  "testcn",
 					SecretName:  "abc",
@@ -492,8 +492,8 @@ func TestValidateDuration(t *testing.T) {
 			},
 		},
 		"unset renewBefore, valid duration for default": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:   usefulDurations["one year"],
 					CommonName: "testcn",
 					SecretName: "abc",
@@ -502,30 +502,30 @@ func TestValidateDuration(t *testing.T) {
 			},
 		},
 		"renewBefore is bigger than the default duration": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					RenewBefore: usefulDurations["ten years"],
 					CommonName:  "testcn",
 					SecretName:  "abc",
 					IssuerRef:   validIssuerRef,
 				},
 			},
-			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), usefulDurations["ten years"].Duration, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", v1alpha1.DefaultCertificateDuration, usefulDurations["ten years"].Duration))},
+			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), usefulDurations["ten years"].Duration, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", v1alpha2.DefaultCertificateDuration, usefulDurations["ten years"].Duration))},
 		},
 		"default renewBefore is bigger than the set duration": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:   usefulDurations["one hour"],
 					CommonName: "testcn",
 					SecretName: "abc",
 					IssuerRef:  validIssuerRef,
 				},
 			},
-			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), v1alpha1.DefaultRenewBefore, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", usefulDurations["one hour"].Duration, v1alpha1.DefaultRenewBefore))},
+			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), v1alpha2.DefaultRenewBefore, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", usefulDurations["one hour"].Duration, v1alpha2.DefaultRenewBefore))},
 		},
 		"renewBefore is bigger than the duration": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:    usefulDurations["one month"],
 					RenewBefore: usefulDurations["one year"],
 					CommonName:  "testcn",
@@ -536,19 +536,19 @@ func TestValidateDuration(t *testing.T) {
 			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), usefulDurations["one year"].Duration, fmt.Sprintf("certificate duration %s must be greater than renewBefore %s", usefulDurations["one month"].Duration, usefulDurations["one year"].Duration))},
 		},
 		"renewBefore is less than the minimum permitted value": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					RenewBefore: usefulDurations["one second"],
 					CommonName:  "testcn",
 					SecretName:  "abc",
 					IssuerRef:   validIssuerRef,
 				},
 			},
-			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), usefulDurations["one second"].Duration, fmt.Sprintf("certificate renewBefore must be greater than %s", v1alpha1.MinimumRenewBefore))},
+			errs: []*field.Error{field.Invalid(fldPath.Child("renewBefore"), usefulDurations["one second"].Duration, fmt.Sprintf("certificate renewBefore must be greater than %s", v1alpha2.MinimumRenewBefore))},
 		},
 		"duration is less than the minimum permitted value": {
-			cfg: &v1alpha1.Certificate{
-				Spec: v1alpha1.CertificateSpec{
+			cfg: &v1alpha2.Certificate{
+				Spec: v1alpha2.CertificateSpec{
 					Duration:    usefulDurations["half hour"],
 					RenewBefore: usefulDurations["ten minutes"],
 					CommonName:  "testcn",
@@ -556,7 +556,7 @@ func TestValidateDuration(t *testing.T) {
 					IssuerRef:   validIssuerRef,
 				},
 			},
-			errs: []*field.Error{field.Invalid(fldPath.Child("duration"), usefulDurations["half hour"].Duration, fmt.Sprintf("certificate duration must be greater than %s", v1alpha1.MinimumCertificateDuration))},
+			errs: []*field.Error{field.Invalid(fldPath.Child("duration"), usefulDurations["half hour"].Duration, fmt.Sprintf("certificate duration must be greater than %s", v1alpha2.MinimumCertificateDuration))},
 		},
 	}
 	for n, s := range scenarios {
diff --git a/pkg/internal/apis/certmanager/validation/certificaterequest.go b/pkg/internal/apis/certmanager/validation/certificaterequest.go
index 1df14c5bf..8b59fe012 100644
--- a/pkg/internal/apis/certmanager/validation/certificaterequest.go
+++ b/pkg/internal/apis/certmanager/validation/certificaterequest.go
@@ -22,17 +22,17 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 )
 
 func ValidateCertificateRequest(obj runtime.Object) field.ErrorList {
-	cr := obj.(*v1alpha1.CertificateRequest)
+	cr := obj.(*v1alpha2.CertificateRequest)
 	allErrs := ValidateCertificateRequestSpec(&cr.Spec, field.NewPath("spec"))
 	return allErrs
 }
 
-func ValidateCertificateRequestSpec(crSpec *v1alpha1.CertificateRequestSpec, fldPath *field.Path) field.ErrorList {
+func ValidateCertificateRequestSpec(crSpec *v1alpha2.CertificateRequestSpec, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	el = append(el, validateIssuerRef(crSpec.IssuerRef, fldPath)...)
diff --git a/pkg/internal/apis/certmanager/validation/clusterissuer.go b/pkg/internal/apis/certmanager/validation/clusterissuer.go
index 95c6c390c..755f2c067 100644
--- a/pkg/internal/apis/certmanager/validation/clusterissuer.go
+++ b/pkg/internal/apis/certmanager/validation/clusterissuer.go
@@ -20,13 +20,13 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-// Validation functions for cert-manager v1alpha1 ClusterIssuer types
+// Validation functions for cert-manager v1alpha2 ClusterIssuer types
 
 func ValidateClusterIssuer(obj runtime.Object) field.ErrorList {
-	iss := obj.(*v1alpha1.ClusterIssuer)
+	iss := obj.(*v1alpha2.ClusterIssuer)
 	allErrs := ValidateIssuerSpec(&iss.Spec, field.NewPath("spec"))
 	return allErrs
 }
diff --git a/pkg/internal/apis/certmanager/validation/issuer.go b/pkg/internal/apis/certmanager/validation/issuer.go
index 556175b17..59e2623ea 100644
--- a/pkg/internal/apis/certmanager/validation/issuer.go
+++ b/pkg/internal/apis/certmanager/validation/issuer.go
@@ -27,25 +27,25 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/internal/apis/certmanager/validation/util"
 )
 
-// Validation functions for cert-manager v1alpha1 Issuer types
+// Validation functions for cert-manager v1alpha2 Issuer types
 
 func ValidateIssuer(obj runtime.Object) field.ErrorList {
-	iss := obj.(*v1alpha1.Issuer)
+	iss := obj.(*v1alpha2.Issuer)
 	allErrs := ValidateIssuerSpec(&iss.Spec, field.NewPath("spec"))
 	return allErrs
 }
 
-func ValidateIssuerSpec(iss *v1alpha1.IssuerSpec, fldPath *field.Path) field.ErrorList {
+func ValidateIssuerSpec(iss *v1alpha2.IssuerSpec, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	el = ValidateIssuerConfig(&iss.IssuerConfig, fldPath)
 	return el
 }
 
-func ValidateIssuerConfig(iss *v1alpha1.IssuerConfig, fldPath *field.Path) field.ErrorList {
+func ValidateIssuerConfig(iss *v1alpha2.IssuerConfig, fldPath *field.Path) field.ErrorList {
 	numConfigs := 0
 	el := field.ErrorList{}
 	if iss.ACME != nil {
@@ -95,7 +95,7 @@ func ValidateIssuerConfig(iss *v1alpha1.IssuerConfig, fldPath *field.Path) field
 	return el
 }
 
-func ValidateACMEIssuerConfig(iss *v1alpha1.ACMEIssuer, fldPath *field.Path) field.ErrorList {
+func ValidateACMEIssuerConfig(iss *v1alpha2.ACMEIssuer, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	if len(iss.PrivateKey.Name) == 0 {
 		el = append(el, field.Required(fldPath.Child("privateKeySecretRef", "name"), "private key secret name is a required field"))
@@ -110,7 +110,7 @@ func ValidateACMEIssuerConfig(iss *v1alpha1.ACMEIssuer, fldPath *field.Path) fie
 	return el
 }
 
-func ValidateACMEIssuerChallengeSolverConfig(sol *v1alpha1.ACMEChallengeSolver, fldPath *field.Path) field.ErrorList {
+func ValidateACMEIssuerChallengeSolverConfig(sol *v1alpha2.ACMEChallengeSolver, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	numProviders := 0
@@ -133,7 +133,7 @@ func ValidateACMEIssuerChallengeSolverConfig(sol *v1alpha1.ACMEChallengeSolver,
 	return el
 }
 
-func ValidateACMEIssuerChallengeSolverHTTP01Config(http01 *v1alpha1.ACMEChallengeSolverHTTP01, fldPath *field.Path) field.ErrorList {
+func ValidateACMEIssuerChallengeSolverHTTP01Config(http01 *v1alpha2.ACMEChallengeSolverHTTP01, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	numDefined := 0
@@ -148,7 +148,7 @@ func ValidateACMEIssuerChallengeSolverHTTP01Config(http01 *v1alpha1.ACMEChalleng
 	return el
 }
 
-func ValidateACMEIssuerChallengeSolverHTTP01IngressConfig(ingress *v1alpha1.ACMEChallengeSolverHTTP01Ingress, fldPath *field.Path) field.ErrorList {
+func ValidateACMEIssuerChallengeSolverHTTP01IngressConfig(ingress *v1alpha2.ACMEChallengeSolverHTTP01Ingress, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	if ingress.Class != nil && len(ingress.Name) > 0 {
@@ -166,7 +166,7 @@ func ValidateACMEIssuerChallengeSolverHTTP01IngressConfig(ingress *v1alpha1.ACME
 	return el
 }
 
-func ValidateACMEIssuerChallengeSolverHTTP01IngressPodTemplateConfig(podTempl *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate, fldPath *field.Path) field.ErrorList {
+func ValidateACMEIssuerChallengeSolverHTTP01IngressPodTemplateConfig(podTempl *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	cpyPodTempl := podTempl.DeepCopy()
@@ -180,7 +180,7 @@ func ValidateACMEIssuerChallengeSolverHTTP01IngressPodTemplateConfig(podTempl *v
 	return el
 }
 
-func ValidateCAIssuerConfig(iss *v1alpha1.CAIssuer, fldPath *field.Path) field.ErrorList {
+func ValidateCAIssuerConfig(iss *v1alpha2.CAIssuer, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	if len(iss.SecretName) == 0 {
 		el = append(el, field.Required(fldPath.Child("secretName"), ""))
@@ -188,11 +188,11 @@ func ValidateCAIssuerConfig(iss *v1alpha1.CAIssuer, fldPath *field.Path) field.E
 	return el
 }
 
-func ValidateSelfSignedIssuerConfig(iss *v1alpha1.SelfSignedIssuer, fldPath *field.Path) field.ErrorList {
+func ValidateSelfSignedIssuerConfig(iss *v1alpha2.SelfSignedIssuer, fldPath *field.Path) field.ErrorList {
 	return nil
 }
 
-func ValidateVaultIssuerConfig(iss *v1alpha1.VaultIssuer, fldPath *field.Path) field.ErrorList {
+func ValidateVaultIssuerConfig(iss *v1alpha2.VaultIssuer, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	if len(iss.Server) == 0 {
 		el = append(el, field.Required(fldPath.Child("server"), ""))
@@ -215,7 +215,7 @@ func ValidateVaultIssuerConfig(iss *v1alpha1.VaultIssuer, fldPath *field.Path) f
 	// TODO: add validation for Vault authentication types
 }
 
-func ValidateVenafiIssuerConfig(iss *v1alpha1.VenafiIssuer, fldPath *field.Path) field.ErrorList {
+func ValidateVenafiIssuerConfig(iss *v1alpha2.VenafiIssuer, fldPath *field.Path) field.ErrorList {
 	//TODO: make extended validation fro fake\tpp\cloud modes
 	return nil
 }
@@ -228,17 +228,17 @@ var supportedTSIGAlgorithms = []string{
 	"HMACSHA512",
 }
 
-func ValidateACMEChallengeSolverDNS01(p *v1alpha1.ACMEChallengeSolverDNS01, fldPath *field.Path) field.ErrorList {
+func ValidateACMEChallengeSolverDNS01(p *v1alpha2.ACMEChallengeSolverDNS01, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 
 	// allow empty values for now, until we have a MutatingWebhook to apply
 	// default values to fields.
 	if len(p.CNAMEStrategy) > 0 {
 		switch p.CNAMEStrategy {
-		case v1alpha1.NoneStrategy:
-		case v1alpha1.FollowStrategy:
+		case v1alpha2.NoneStrategy:
+		case v1alpha2.FollowStrategy:
 		default:
-			el = append(el, field.Invalid(fldPath.Child("cnameStrategy"), p.CNAMEStrategy, fmt.Sprintf("must be one of %q or %q", v1alpha1.NoneStrategy, v1alpha1.FollowStrategy)))
+			el = append(el, field.Invalid(fldPath.Child("cnameStrategy"), p.CNAMEStrategy, fmt.Sprintf("must be one of %q or %q", v1alpha2.NoneStrategy, v1alpha2.FollowStrategy)))
 		}
 	}
 	numProviders := 0
@@ -270,10 +270,10 @@ func ValidateACMEChallengeSolverDNS01(p *v1alpha1.ACMEChallengeSolverDNS01, fldP
 				el = append(el, field.Required(fldPath.Child("azuredns", "resourceGroupName"), ""))
 			}
 			switch p.AzureDNS.Environment {
-			case "", v1alpha1.AzurePublicCloud, v1alpha1.AzureChinaCloud, v1alpha1.AzureGermanCloud, v1alpha1.AzureUSGovernmentCloud:
+			case "", v1alpha2.AzurePublicCloud, v1alpha2.AzureChinaCloud, v1alpha2.AzureGermanCloud, v1alpha2.AzureUSGovernmentCloud:
 			default:
 				el = append(el, field.Invalid(fldPath.Child("azuredns", "environment"), p.AzureDNS.Environment,
-					fmt.Sprintf("must be either empty or one of %s, %s, %s or %s", v1alpha1.AzurePublicCloud, v1alpha1.AzureChinaCloud, v1alpha1.AzureGermanCloud, v1alpha1.AzureUSGovernmentCloud)))
+					fmt.Sprintf("must be either empty or one of %s, %s, %s or %s", v1alpha2.AzurePublicCloud, v1alpha2.AzureChinaCloud, v1alpha2.AzureGermanCloud, v1alpha2.AzureUSGovernmentCloud)))
 			}
 		}
 	}
@@ -383,7 +383,7 @@ func ValidateACMEChallengeSolverDNS01(p *v1alpha1.ACMEChallengeSolverDNS01, fldP
 	return el
 }
 
-func ValidateSecretKeySelector(sks *v1alpha1.SecretKeySelector, fldPath *field.Path) field.ErrorList {
+func ValidateSecretKeySelector(sks *v1alpha2.SecretKeySelector, fldPath *field.Path) field.ErrorList {
 	el := field.ErrorList{}
 	if sks.Name == "" {
 		el = append(el, field.Required(fldPath.Child("name"), "secret name is required"))
diff --git a/pkg/internal/apis/certmanager/validation/issuer_test.go b/pkg/internal/apis/certmanager/validation/issuer_test.go
index 8532245ff..f671126f9 100644
--- a/pkg/internal/apis/certmanager/validation/issuer_test.go
+++ b/pkg/internal/apis/certmanager/validation/issuer_test.go
@@ -24,31 +24,31 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 var (
-	validCloudDNSProvider = v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+	validCloudDNSProvider = v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 		ServiceAccount: validSecretKeyRef,
 		Project:        "valid",
 	}
-	validSecretKeyRef = v1alpha1.SecretKeySelector{
-		LocalObjectReference: v1alpha1.LocalObjectReference{
+	validSecretKeyRef = v1alpha2.SecretKeySelector{
+		LocalObjectReference: v1alpha2.LocalObjectReference{
 			Name: "valid",
 		},
 		Key: "validkey",
 	}
-	validCloudflareProvider = v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+	validCloudflareProvider = v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 		APIKey: validSecretKeyRef,
 		Email:  "valid",
 	}
-	validACMEIssuer = v1alpha1.ACMEIssuer{
+	validACMEIssuer = v1alpha2.ACMEIssuer{
 		Email:      "valid-email",
 		Server:     "valid-server",
 		PrivateKey: validSecretKeyRef,
 	}
-	validVaultIssuer = v1alpha1.VaultIssuer{
-		Auth: v1alpha1.VaultAuth{
+	validVaultIssuer = v1alpha2.VaultIssuer{
+		Auth: v1alpha2.VaultAuth{
 			TokenSecretRef: validSecretKeyRef,
 		},
 		Server: "something",
@@ -59,21 +59,21 @@ var (
 func TestValidateVaultIssuerConfig(t *testing.T) {
 	fldPath := field.NewPath("")
 	scenarios := map[string]struct {
-		spec *v1alpha1.VaultIssuer
+		spec *v1alpha2.VaultIssuer
 		errs []*field.Error
 	}{
 		"valid vault issuer": {
 			spec: &validVaultIssuer,
 		},
 		"vault issuer with missing fields": {
-			spec: &v1alpha1.VaultIssuer{},
+			spec: &v1alpha2.VaultIssuer{},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("server"), ""),
 				field.Required(fldPath.Child("path"), ""),
 			},
 		},
 		"vault issuer with invalid fields": {
-			spec: &v1alpha1.VaultIssuer{
+			spec: &v1alpha2.VaultIssuer{
 				Server:   "something",
 				Path:     "a/b/c",
 				CABundle: []byte("invalid"),
@@ -103,25 +103,25 @@ func TestValidateVaultIssuerConfig(t *testing.T) {
 func TestValidateACMEIssuerConfig(t *testing.T) {
 	fldPath := field.NewPath("")
 	scenarios := map[string]struct {
-		spec *v1alpha1.ACMEIssuer
+		spec *v1alpha2.ACMEIssuer
 		errs []*field.Error
 	}{
 		"valid acme issuer": {
 			spec: &validACMEIssuer,
 		},
 		"acme issuer with missing fields": {
-			spec: &v1alpha1.ACMEIssuer{},
+			spec: &v1alpha2.ACMEIssuer{},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("privateKeySecretRef", "name"), "private key secret name is a required field"),
 				field.Required(fldPath.Child("server"), "acme server URL is a required field"),
 			},
 		},
 		"acme solver without any config": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{},
 				},
 			},
@@ -130,13 +130,13 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme solver with valid dns01 config": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
+						DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
 							CloudDNS: &validCloudDNSProvider,
 						},
 					},
@@ -144,13 +144,13 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme solver with missing http01 config type": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{},
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{},
 					},
 				},
 			},
@@ -159,29 +159,29 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme solver with valid http01 config": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
 			},
 		},
 		"acme issue with valid pod template ObjectMeta attributes": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
-								PodTemplate: &v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
+								PodTemplate: &v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate{
 									ObjectMeta: metav1.ObjectMeta{
 										Labels: map[string]string{
 											"valid_to_contain": "labels",
@@ -198,15 +198,15 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme issue with invalid pod template ObjectMeta attributes": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
-								PodTemplate: &v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
+								PodTemplate: &v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate{
 									ObjectMeta: metav1.ObjectMeta{
 										Annotations: map[string]string{
 											"valid_to_contain": "annotations",
@@ -226,16 +226,16 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme issue with valid pod template PodSpec attributes": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
-								PodTemplate: &v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate{
-									Spec: v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
+								PodTemplate: &v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate{
+									Spec: v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec{
 										NodeSelector: map[string]string{
 											"valid_to_contain": "nodeSelector",
 										},
@@ -255,21 +255,21 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 			},
 		},
 		"acme issue with valid pod template ObjectMeta and PodSpec attributes": {
-			spec: &v1alpha1.ACMEIssuer{
+			spec: &v1alpha2.ACMEIssuer{
 				Email:      "valid-email",
 				Server:     "valid-server",
 				PrivateKey: validSecretKeyRef,
-				Solvers: []v1alpha1.ACMEChallengeSolver{
+				Solvers: []v1alpha2.ACMEChallengeSolver{
 					{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
-								PodTemplate: &v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
+								PodTemplate: &v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate{
 									ObjectMeta: metav1.ObjectMeta{
 										Labels: map[string]string{
 											"valid_to_contain": "labels",
 										},
 									},
-									Spec: v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec{
+									Spec: v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec{
 										NodeSelector: map[string]string{
 											"valid_to_contain": "nodeSelector",
 										},
@@ -302,60 +302,60 @@ func TestValidateACMEIssuerConfig(t *testing.T) {
 func TestValidateIssuerSpec(t *testing.T) {
 	fldPath := field.NewPath("")
 	scenarios := map[string]struct {
-		spec *v1alpha1.IssuerSpec
+		spec *v1alpha2.IssuerSpec
 		errs []*field.Error
 	}{
 		"valid ca issuer": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					CA: &v1alpha1.CAIssuer{
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					CA: &v1alpha2.CAIssuer{
 						SecretName: "valid",
 					},
 				},
 			},
 		},
 		"ca issuer without secret name specified": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					CA: &v1alpha1.CAIssuer{},
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					CA: &v1alpha2.CAIssuer{},
 				},
 			},
 			errs: []*field.Error{field.Required(fldPath.Child("ca", "secretName"), "")},
 		},
 		"valid self signed issuer": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					SelfSigned: &v1alpha1.SelfSignedIssuer{},
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					SelfSigned: &v1alpha2.SelfSignedIssuer{},
 				},
 			},
 		},
 		"valid acme issuer": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
 					ACME: &validACMEIssuer,
 				},
 			},
 		},
 		"valid vault issuer": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
 					Vault: &validVaultIssuer,
 				},
 			},
 		},
 		"missing issuer config": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{},
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{},
 			},
 			errs: []*field.Error{
 				field.Required(fldPath, "at least one issuer must be configured"),
 			},
 		},
 		"multiple issuers configured": {
-			spec: &v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					SelfSigned: &v1alpha1.SelfSignedIssuer{},
-					CA: &v1alpha1.CAIssuer{
+			spec: &v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					SelfSigned: &v1alpha2.SelfSignedIssuer{},
+					CA: &v1alpha2.CAIssuer{
 						SecretName: "valid",
 					},
 				},
@@ -386,33 +386,33 @@ func TestValidateACMEIssuerHTTP01Config(t *testing.T) {
 	fldPath := field.NewPath("")
 	scenarios := map[string]struct {
 		isExpectedFailure bool
-		cfg               *v1alpha1.ACMEChallengeSolverHTTP01
+		cfg               *v1alpha2.ACMEChallengeSolverHTTP01
 		errs              []*field.Error
 	}{
 		"ingress field specified": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{Name: "abc"},
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{Name: "abc"},
 			},
 		},
 		"ingress class field specified": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{Class: strPtr("abc")},
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{Class: strPtr("abc")},
 			},
 		},
 		"neither field specified": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 			},
 		},
 		"no solver config type specified": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{},
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{},
 			errs: []*field.Error{
 				field.Required(fldPath, "no HTTP01 solver type configured"),
 			},
 		},
 		"both fields specified": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 					Name:  "abc",
 					Class: strPtr("abc"),
 				},
@@ -422,29 +422,29 @@ func TestValidateACMEIssuerHTTP01Config(t *testing.T) {
 			},
 		},
 		"acme issuer with valid http01 service config serviceType ClusterIP": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 					ServiceType: corev1.ServiceType("ClusterIP"),
 				},
 			},
 		},
 		"acme issuer with valid http01 service config serviceType NodePort": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 					ServiceType: corev1.ServiceType("NodePort"),
 				},
 			},
 		},
 		"acme issuer with valid http01 service config serviceType (empty string)": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 					ServiceType: corev1.ServiceType(""),
 				},
 			},
 		},
 		"acme issuer with invalid http01 service config": {
-			cfg: &v1alpha1.ACMEChallengeSolverHTTP01{
-				Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+			cfg: &v1alpha2.ACMEChallengeSolverHTTP01{
+				Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 					ServiceType: corev1.ServiceType("InvalidServiceType"),
 				},
 			},
@@ -473,12 +473,12 @@ func TestValidateACMEIssuerHTTP01Config(t *testing.T) {
 func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 	fldPath := field.NewPath("test")
 	scenarios := map[string]struct {
-		cfg  *v1alpha1.ACMEChallengeSolverDNS01
+		cfg  *v1alpha2.ACMEChallengeSolverDNS01
 		errs []*field.Error
 	}{
 		"missing clouddns project": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				CloudDNS: &v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				CloudDNS: &v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 					ServiceAccount: validSecretKeyRef,
 				},
 			},
@@ -487,11 +487,11 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"missing clouddns service account key": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				CloudDNS: &v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				CloudDNS: &v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 					Project: "valid",
-					ServiceAccount: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{Name: "something"},
+					ServiceAccount: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{Name: "something"},
 						Key:                  "",
 					},
 				},
@@ -501,11 +501,11 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"missing clouddns service account name": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				CloudDNS: &v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				CloudDNS: &v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 					Project: "valid",
-					ServiceAccount: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{Name: ""},
+					ServiceAccount: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{Name: ""},
 						Key:                  "something",
 					},
 				},
@@ -515,15 +515,15 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"clouddns serviceAccount field not set should be allowed for ambient auth": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				CloudDNS: &v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				CloudDNS: &v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 					Project: "valid",
 				},
 			},
 		},
 		"missing cloudflare token": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 					Email: "valid",
 				},
 			},
@@ -533,8 +533,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"missing cloudflare email": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 					APIKey: validSecretKeyRef,
 				},
 			},
@@ -543,22 +543,22 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"missing route53 region": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{},
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{},
 			},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("route53", "region"), ""),
 			},
 		},
 		"missing provider config": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{},
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{},
 			errs: []*field.Error{
 				field.Required(fldPath, "no DNS01 provider configured"),
 			},
 		},
 		"missing azuredns config": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				AzureDNS: &v1alpha1.ACMEIssuerDNS01ProviderAzureDNS{},
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				AzureDNS: &v1alpha2.ACMEIssuerDNS01ProviderAzureDNS{},
 			},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("azuredns", "clientSecretSecretRef", "name"), "secret name is required"),
@@ -570,8 +570,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"invalid azuredns environment": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				AzureDNS: &v1alpha1.ACMEIssuerDNS01ProviderAzureDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				AzureDNS: &v1alpha2.ACMEIssuerDNS01ProviderAzureDNS{
 					Environment: "an env",
 				},
 			},
@@ -582,13 +582,13 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 				field.Required(fldPath.Child("azuredns", "subscriptionID"), ""),
 				field.Required(fldPath.Child("azuredns", "tenantID"), ""),
 				field.Required(fldPath.Child("azuredns", "resourceGroupName"), ""),
-				field.Invalid(fldPath.Child("azuredns", "environment"), v1alpha1.AzureDNSEnvironment("an env"),
+				field.Invalid(fldPath.Child("azuredns", "environment"), v1alpha2.AzureDNSEnvironment("an env"),
 					"must be either empty or one of AzurePublicCloud, AzureChinaCloud, AzureGermanCloud or AzureUSGovernmentCloud"),
 			},
 		},
 		"missing akamai config": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				Akamai: &v1alpha1.ACMEIssuerDNS01ProviderAkamai{},
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				Akamai: &v1alpha2.ACMEIssuerDNS01ProviderAkamai{},
 			},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("akamai", "accessToken", "name"), "secret name is required"),
@@ -601,8 +601,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"valid akamai config": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				Akamai: &v1alpha1.ACMEIssuerDNS01ProviderAkamai{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				Akamai: &v1alpha2.ACMEIssuerDNS01ProviderAkamai{
 					AccessToken:           validSecretKeyRef,
 					ClientSecret:          validSecretKeyRef,
 					ClientToken:           validSecretKeyRef,
@@ -612,24 +612,24 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			errs: []*field.Error{},
 		},
 		"valid rfc2136 config": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver: "127.0.0.1",
 				},
 			},
 			errs: []*field.Error{},
 		},
 		"missing rfc2136 required field": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{},
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{},
 			},
 			errs: []*field.Error{
 				field.Required(fldPath.Child("rfc2136", "nameserver"), ""),
 			},
 		},
 		"rfc2136 provider invalid nameserver": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver: "dns.example.com",
 				},
 			},
@@ -638,8 +638,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"rfc2136 provider using case-camel in algorithm": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver:    "127.0.0.1",
 					TSIGAlgorithm: "HmAcMd5",
 				},
@@ -647,8 +647,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			errs: []*field.Error{},
 		},
 		"rfc2136 provider using unsupported algorithm": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver:    "127.0.0.1",
 					TSIGAlgorithm: "HAMMOCK",
 				},
@@ -658,8 +658,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"rfc2136 provider TSIGKeyName provided but no TSIGSecret": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver:  "127.0.0.1",
 					TSIGKeyName: "some-name",
 				},
@@ -670,8 +670,8 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"rfc2136 provider TSIGSecret provided but no TSIGKeyName": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				RFC2136: &v1alpha1.ACMEIssuerDNS01ProviderRFC2136{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				RFC2136: &v1alpha2.ACMEIssuerDNS01ProviderRFC2136{
 					Nameserver: "127.0.0.1",
 					TSIGSecret: validSecretKeyRef,
 				},
@@ -681,11 +681,11 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 			},
 		},
 		"multiple providers configured": {
-			cfg: &v1alpha1.ACMEChallengeSolverDNS01{
-				CloudDNS: &v1alpha1.ACMEIssuerDNS01ProviderCloudDNS{
+			cfg: &v1alpha2.ACMEChallengeSolverDNS01{
+				CloudDNS: &v1alpha2.ACMEIssuerDNS01ProviderCloudDNS{
 					Project: "something",
 				},
-				Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{},
+				Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{},
 			},
 			errs: []*field.Error{
 				field.Forbidden(fldPath.Child("cloudflare"), "may not specify more than one provider type"),
@@ -710,38 +710,38 @@ func TestValidateACMEIssuerDNS01Config(t *testing.T) {
 }
 
 func TestValidateSecretKeySelector(t *testing.T) {
-	validName := v1alpha1.LocalObjectReference{Name: "name"}
+	validName := v1alpha2.LocalObjectReference{Name: "name"}
 	validKey := "key"
-	// invalidName := v1alpha1.LocalObjectReference{"-name-"}
+	// invalidName := v1alpha2.LocalObjectReference{"-name-"}
 	// invalidKey := "-key-"
 	fldPath := field.NewPath("")
 	scenarios := map[string]struct {
 		isExpectedFailure bool
-		selector          *v1alpha1.SecretKeySelector
+		selector          *v1alpha2.SecretKeySelector
 		errs              []*field.Error
 	}{
 		"valid selector": {
-			selector: &v1alpha1.SecretKeySelector{
+			selector: &v1alpha2.SecretKeySelector{
 				LocalObjectReference: validName,
 				Key:                  validKey,
 			},
 		},
 		// "invalid name": {
 		// 	isExpectedFailure: true,
-		// 	selector: &v1alpha1.SecretKeySelector{
+		// 	selector: &v1alpha2.SecretKeySelector{
 		// 		LocalObjectReference: invalidName,
 		// 		Key:                  validKey,
 		// 	},
 		// },
 		// "invalid key": {
 		// 	isExpectedFailure: true,
-		// 	selector: &v1alpha1.SecretKeySelector{
+		// 	selector: &v1alpha2.SecretKeySelector{
 		// 		LocalObjectReference: validName,
 		// 		Key:                  invalidKey,
 		// 	},
 		// },
 		"missing name": {
-			selector: &v1alpha1.SecretKeySelector{
+			selector: &v1alpha2.SecretKeySelector{
 				Key: validKey,
 			},
 			errs: []*field.Error{
@@ -749,7 +749,7 @@ func TestValidateSecretKeySelector(t *testing.T) {
 			},
 		},
 		"missing key": {
-			selector: &v1alpha1.SecretKeySelector{
+			selector: &v1alpha2.SecretKeySelector{
 				LocalObjectReference: validName,
 			},
 			errs: []*field.Error{
diff --git a/pkg/internal/vault/BUILD.bazel b/pkg/internal/vault/BUILD.bazel
index 9c3412afb..f48ed8ed7 100644
--- a/pkg/internal/vault/BUILD.bazel
+++ b/pkg/internal/vault/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/internal/vault",
     visibility = ["//pkg:__subpackages__"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//vendor/github.com/hashicorp/vault/api:go_default_library",
         "//vendor/github.com/hashicorp/vault/helper/certutil:go_default_library",
@@ -19,7 +19,7 @@ go_test(
     srcs = ["vault_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/vault/fake:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//test/unit/gen:go_default_library",
diff --git a/pkg/internal/vault/fake/BUILD.bazel b/pkg/internal/vault/fake/BUILD.bazel
index f00dccf88..272ef21d4 100644
--- a/pkg/internal/vault/fake/BUILD.bazel
+++ b/pkg/internal/vault/fake/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/internal/vault/fake",
     visibility = ["//pkg:__subpackages__"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/github.com/hashicorp/vault/api:go_default_library",
         "//vendor/k8s.io/client-go/listers/core/v1:go_default_library",
     ],
diff --git a/pkg/internal/vault/fake/vault.go b/pkg/internal/vault/fake/vault.go
index bbafc8ea7..41519f82a 100644
--- a/pkg/internal/vault/fake/vault.go
+++ b/pkg/internal/vault/fake/vault.go
@@ -22,11 +22,11 @@ import (
 	vault "github.com/hashicorp/vault/api"
 	corelisters "k8s.io/client-go/listers/core/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 type Vault struct {
-	NewFn  func(string, corelisters.SecretLister, v1alpha1.GenericIssuer) (*Vault, error)
+	NewFn  func(string, corelisters.SecretLister, v1alpha2.GenericIssuer) (*Vault, error)
 	SignFn func([]byte, time.Duration) ([]byte, []byte, error)
 }
 
@@ -37,7 +37,7 @@ func New() *Vault {
 		},
 	}
 
-	v.NewFn = func(string, corelisters.SecretLister, v1alpha1.GenericIssuer) (*Vault, error) {
+	v.NewFn = func(string, corelisters.SecretLister, v1alpha2.GenericIssuer) (*Vault, error) {
 		return v, nil
 	}
 
@@ -55,12 +55,12 @@ func (v *Vault) WithSign(certPEM, caPEM []byte, err error) *Vault {
 	return v
 }
 
-func (v *Vault) WithNew(f func(string, corelisters.SecretLister, v1alpha1.GenericIssuer) (*Vault, error)) *Vault {
+func (v *Vault) WithNew(f func(string, corelisters.SecretLister, v1alpha2.GenericIssuer) (*Vault, error)) *Vault {
 	v.NewFn = f
 	return v
 }
 
-func (v *Vault) New(ns string, sl corelisters.SecretLister, iss v1alpha1.GenericIssuer) (*Vault, error) {
+func (v *Vault) New(ns string, sl corelisters.SecretLister, iss v1alpha2.GenericIssuer) (*Vault, error) {
 	_, err := v.NewFn(ns, sl, iss)
 	if err != nil {
 		return nil, err
diff --git a/pkg/internal/vault/vault.go b/pkg/internal/vault/vault.go
index c388c7513..9d15b5887 100644
--- a/pkg/internal/vault/vault.go
+++ b/pkg/internal/vault/vault.go
@@ -29,14 +29,14 @@ import (
 	"github.com/hashicorp/vault/helper/certutil"
 	corelisters "k8s.io/client-go/listers/core/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 )
 
 var _ Interface = &Vault{}
 
 type VaultClientBuilder func(namespace string, secretsLister corelisters.SecretLister,
-	issuer v1alpha1.GenericIssuer) (Interface, error)
+	issuer v1alpha2.GenericIssuer) (Interface, error)
 
 type Interface interface {
 	Sign(csrPEM []byte, duration time.Duration) (certPEM []byte, caPEM []byte, err error)
@@ -53,14 +53,14 @@ type Client interface {
 
 type Vault struct {
 	secretsLister corelisters.SecretLister
-	issuer        v1alpha1.GenericIssuer
+	issuer        v1alpha2.GenericIssuer
 	namespace     string
 
 	client Client
 }
 
 func New(namespace string, secretsLister corelisters.SecretLister,
-	issuer v1alpha1.GenericIssuer) (Interface, error) {
+	issuer v1alpha2.GenericIssuer) (Interface, error) {
 	v := &Vault{
 		secretsLister: secretsLister,
 		namespace:     namespace,
@@ -208,7 +208,7 @@ func (v *Vault) tokenRef(name, namespace, key string) (string, error) {
 	return token, nil
 }
 
-func (v *Vault) appRoleRef(appRole *v1alpha1.VaultAppRole) (roleId, secretId string, err error) {
+func (v *Vault) appRoleRef(appRole *v1alpha2.VaultAppRole) (roleId, secretId string, err error) {
 	roleId = strings.TrimSpace(appRole.RoleId)
 
 	secret, err := v.secretsLister.Secrets(v.namespace).Get(appRole.SecretRef.Name)
@@ -229,7 +229,7 @@ func (v *Vault) appRoleRef(appRole *v1alpha1.VaultAppRole) (roleId, secretId str
 	return roleId, secretId, nil
 }
 
-func (v *Vault) requestTokenWithAppRoleRef(client Client, appRole *v1alpha1.VaultAppRole) (string, error) {
+func (v *Vault) requestTokenWithAppRoleRef(client Client, appRole *v1alpha2.VaultAppRole) (string, error) {
 	roleId, secretId, err := v.appRoleRef(appRole)
 	if err != nil {
 		return "", err
diff --git a/pkg/internal/vault/vault_test.go b/pkg/internal/vault/vault_test.go
index b5c1ed409..35906151f 100644
--- a/pkg/internal/vault/vault_test.go
+++ b/pkg/internal/vault/vault_test.go
@@ -39,7 +39,7 @@ import (
 	"github.com/hashicorp/vault/helper/jsonutil"
 	corev1 "k8s.io/api/core/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	vaultfake "github.com/jetstack/cert-manager/pkg/internal/vault/fake"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 	"github.com/jetstack/cert-manager/test/unit/gen"
@@ -98,7 +98,7 @@ func generateCSR(t *testing.T, secretKey crypto.Signer) []byte {
 }
 
 type testSignT struct {
-	issuer     *v1alpha1.Issuer
+	issuer     *v1alpha2.Issuer
 	fakeLister *listers.FakeSecretLister
 	fakeClient *vaultfake.Client
 
@@ -135,7 +135,7 @@ func TestSign(t *testing.T) {
 		"a good csr but failed request should error": {
 			csrPEM: csrPEM,
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{}),
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{}),
 			),
 			fakeClient:   vaultfake.NewFakeClient().WithRawRequest(nil, errors.New("request failed")),
 			expectedErr:  errors.New("failed to sign certificate by vault: request failed"),
@@ -146,7 +146,7 @@ func TestSign(t *testing.T) {
 		"a good csr and good response should return a certificate": {
 			csrPEM: csrPEM,
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{}),
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{}),
 			),
 			fakeClient: vaultfake.NewFakeClient().WithRawRequest(&vault.Response{
 				Response: &http.Response{
@@ -183,7 +183,7 @@ type testSetTokenT struct {
 	expectedToken string
 	expectedErr   error
 
-	issuer     *v1alpha1.Issuer
+	issuer     *v1alpha2.Issuer
 	fakeLister *listers.FakeSecretLister
 	fakeClient *vaultfake.Client
 }
@@ -204,9 +204,9 @@ func TestSetToken(t *testing.T) {
 	tests := map[string]testSetTokenT{
 		"if neither token secret ref or app role secret ref not found then error": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth:     v1alpha1.VaultAuth{},
+					Auth:     v1alpha2.VaultAuth{},
 				}),
 			),
 			fakeLister:    listers.FakeSecretListerFrom(listers.NewFakeSecretLister()),
@@ -218,11 +218,11 @@ func TestSetToken(t *testing.T) {
 
 		"if token secret ref is set but secret doesn't exist should error": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth: v1alpha1.VaultAuth{
-						TokenSecretRef: v1alpha1.SecretKeySelector{
-							LocalObjectReference: v1alpha1.LocalObjectReference{
+					Auth: v1alpha2.VaultAuth{
+						TokenSecretRef: v1alpha2.SecretKeySelector{
+							LocalObjectReference: v1alpha2.LocalObjectReference{
 								Name: "secret-ref-name",
 							},
 						},
@@ -239,11 +239,11 @@ func TestSetToken(t *testing.T) {
 
 		"if token secret ref set, return client using token stored": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth: v1alpha1.VaultAuth{
-						TokenSecretRef: v1alpha1.SecretKeySelector{
-							LocalObjectReference: v1alpha1.LocalObjectReference{
+					Auth: v1alpha2.VaultAuth{
+						TokenSecretRef: v1alpha2.SecretKeySelector{
+							LocalObjectReference: v1alpha2.LocalObjectReference{
 								Name: "secret-ref-name",
 							},
 							Key: "my-token-key",
@@ -261,13 +261,13 @@ func TestSetToken(t *testing.T) {
 
 		"if app role set but secret token not but vault fails to return token, error": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth: v1alpha1.VaultAuth{
-						AppRole: v1alpha1.VaultAppRole{
+					Auth: v1alpha2.VaultAuth{
+						AppRole: v1alpha2.VaultAppRole{
 							RoleId: "my-role-id",
-							SecretRef: v1alpha1.SecretKeySelector{
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+							SecretRef: v1alpha2.SecretKeySelector{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: "secret-ref-name",
 								},
 								Key: "my-role-key",
@@ -286,13 +286,13 @@ func TestSetToken(t *testing.T) {
 
 		"if app role secret ref set, return client using token stored": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth: v1alpha1.VaultAuth{
-						AppRole: v1alpha1.VaultAppRole{
+					Auth: v1alpha2.VaultAuth{
+						AppRole: v1alpha2.VaultAppRole{
 							RoleId: "my-role-id",
-							SecretRef: v1alpha1.SecretKeySelector{
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+							SecretRef: v1alpha2.SecretKeySelector{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: "secret-ref-name",
 								},
 								Key: "my-role-key",
@@ -317,20 +317,20 @@ func TestSetToken(t *testing.T) {
 		},
 		"if app role secret ref and token secret set, take preference on token secret": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
-					Auth: v1alpha1.VaultAuth{
-						AppRole: v1alpha1.VaultAppRole{
+					Auth: v1alpha2.VaultAuth{
+						AppRole: v1alpha2.VaultAppRole{
 							RoleId: "my-role-id",
-							SecretRef: v1alpha1.SecretKeySelector{
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+							SecretRef: v1alpha2.SecretKeySelector{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: "secret-ref-name",
 								},
 								Key: "my-role-key",
 							},
 						},
-						TokenSecretRef: v1alpha1.SecretKeySelector{
-							LocalObjectReference: v1alpha1.LocalObjectReference{
+						TokenSecretRef: v1alpha2.SecretKeySelector{
+							LocalObjectReference: v1alpha2.LocalObjectReference{
 								Name: "secret-ref-name",
 							},
 							Key: "my-token-key",
@@ -372,7 +372,7 @@ type testAppRoleRefT struct {
 	expectedSecretID string
 	expectedErr      error
 
-	appRole *v1alpha1.VaultAppRole
+	appRole *v1alpha2.VaultAppRole
 
 	fakeLister *listers.FakeSecretLister
 }
@@ -380,7 +380,7 @@ type testAppRoleRefT struct {
 func TestAppRoleRef(t *testing.T) {
 	errSecretGet := errors.New("no secret found")
 
-	basicAppRoleRef := &v1alpha1.VaultAppRole{
+	basicAppRoleRef := &v1alpha2.VaultAppRole{
 		RoleId: "my-role-id",
 	}
 
@@ -396,10 +396,10 @@ func TestAppRoleRef(t *testing.T) {
 		},
 
 		"no data in key should fail": {
-			appRole: &v1alpha1.VaultAppRole{
+			appRole: &v1alpha2.VaultAppRole{
 				RoleId: "",
-				SecretRef: v1alpha1.SecretKeySelector{
-					LocalObjectReference: v1alpha1.LocalObjectReference{
+				SecretRef: v1alpha2.SecretKeySelector{
+					LocalObjectReference: v1alpha2.LocalObjectReference{
 						Name: "secret-name",
 					},
 					Key: "my-key",
@@ -419,10 +419,10 @@ func TestAppRoleRef(t *testing.T) {
 		},
 
 		"should return roleID and secretID with trimmed space": {
-			appRole: &v1alpha1.VaultAppRole{
+			appRole: &v1alpha2.VaultAppRole{
 				RoleId: "    my-role-id  ",
-				SecretRef: v1alpha1.SecretKeySelector{
-					LocalObjectReference: v1alpha1.LocalObjectReference{
+				SecretRef: v1alpha2.SecretKeySelector{
+					LocalObjectReference: v1alpha2.LocalObjectReference{
 						Name: "secret-name",
 					},
 					Key: "my-key",
@@ -559,7 +559,7 @@ func TestTokenRef(t *testing.T) {
 
 type testNewConfigT struct {
 	expectedErr error
-	issuer      *v1alpha1.Issuer
+	issuer      *v1alpha2.Issuer
 	checkFunc   func(cfg *vault.Config) error
 }
 
@@ -567,7 +567,7 @@ func TestNewConfig(t *testing.T) {
 	tests := map[string]testNewConfigT{
 		"no CA bundle set in issuer should return nil": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: nil,
 				}),
 			),
@@ -576,7 +576,7 @@ func TestNewConfig(t *testing.T) {
 
 		"a bad cert bundle should error": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte("a bad cert bundle"),
 				}),
 			),
@@ -585,7 +585,7 @@ func TestNewConfig(t *testing.T) {
 
 		"a good cert bundle should be added to the config": {
 			issuer: gen.Issuer("vault-issuer",
-				gen.SetIssuerVault(v1alpha1.VaultIssuer{
+				gen.SetIssuerVault(v1alpha2.VaultIssuer{
 					CABundle: []byte(testCertBundle),
 				}),
 			),
@@ -635,7 +635,7 @@ func TestNewConfig(t *testing.T) {
 
 type requestTokenWithAppRoleRefT struct {
 	client  Client
-	appRole *v1alpha1.VaultAppRole
+	appRole *v1alpha2.VaultAppRole
 
 	fakeLister *listers.FakeSecretLister
 
@@ -644,10 +644,10 @@ type requestTokenWithAppRoleRefT struct {
 }
 
 func TestRequestTokenWithAppRoleRef(t *testing.T) {
-	basicAppRoleRef := &v1alpha1.VaultAppRole{
+	basicAppRoleRef := &v1alpha2.VaultAppRole{
 		RoleId: "test-role-id",
-		SecretRef: v1alpha1.SecretKeySelector{
-			LocalObjectReference: v1alpha1.LocalObjectReference{
+		SecretRef: v1alpha2.SecretKeySelector{
+			LocalObjectReference: v1alpha2.LocalObjectReference{
 				Name: "test-secret",
 			},
 			Key: "my-key",
diff --git a/pkg/internal/venafi/BUILD.bazel b/pkg/internal/venafi/BUILD.bazel
index 79f956b19..2a0a01fc0 100644
--- a/pkg/internal/venafi/BUILD.bazel
+++ b/pkg/internal/venafi/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/internal/venafi",
     visibility = ["//pkg:__subpackages__"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//vendor/github.com/Venafi/vcert:go_default_library",
         "//vendor/github.com/Venafi/vcert/pkg/certificate:go_default_library",
@@ -43,7 +43,7 @@ go_test(
     ],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/venafi/fake:go_default_library",
         "//pkg/util:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/pkg/internal/venafi/venafi.go b/pkg/internal/venafi/venafi.go
index 1ee251a82..0204c3066 100644
--- a/pkg/internal/venafi/venafi.go
+++ b/pkg/internal/venafi/venafi.go
@@ -25,7 +25,7 @@ import (
 	"github.com/Venafi/vcert/pkg/endpoint"
 	corelisters "k8s.io/client-go/listers/core/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 const (
diff --git a/pkg/internal/venafi/venafi_test.go b/pkg/internal/venafi/venafi_test.go
index 1c6da84a1..8e1080f2c 100644
--- a/pkg/internal/venafi/venafi_test.go
+++ b/pkg/internal/venafi/venafi_test.go
@@ -25,7 +25,7 @@ import (
 	clientcorev1 "k8s.io/client-go/listers/core/v1"
 	corelisters "k8s.io/client-go/listers/core/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 	testlisters "github.com/jetstack/cert-manager/test/unit/listers"
 )
diff --git a/pkg/issuer/BUILD.bazel b/pkg/issuer/BUILD.bazel
index e2ba768c1..accf62f91 100644
--- a/pkg/issuer/BUILD.bazel
+++ b/pkg/issuer/BUILD.bazel
@@ -11,8 +11,8 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
     ],
 )
@@ -44,7 +44,7 @@ go_test(
     srcs = ["helper_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//test/unit/gen:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
diff --git a/pkg/issuer/acme/BUILD.bazel b/pkg/issuer/acme/BUILD.bazel
index 49ca5d0fb..fefe531e6 100644
--- a/pkg/issuer/acme/BUILD.bazel
+++ b/pkg/issuer/acme/BUILD.bazel
@@ -12,8 +12,8 @@ go_library(
         "//pkg/acme:go_default_library",
         "//pkg/acme/client:go_default_library",
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer:go_default_library",
         "//pkg/logs:go_default_library",
@@ -37,7 +37,7 @@ go_test(
     embed = [":go_default_library"],
     deps = [
         "//pkg/acme/client:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//vendor/k8s.io/utils/clock/testing:go_default_library",
     ],
diff --git a/pkg/issuer/acme/acme.go b/pkg/issuer/acme/acme.go
index 077ad50d9..4aef55c87 100644
--- a/pkg/issuer/acme/acme.go
+++ b/pkg/issuer/acme/acme.go
@@ -24,8 +24,8 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme"
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
@@ -35,7 +35,7 @@ import (
 // mechanisms.
 type Acme struct {
 	*controller.Context
-	issuer v1alpha1.GenericIssuer
+	issuer v1alpha2.GenericIssuer
 	helper acme.Helper
 
 	secretsLister corelisters.SecretLister
@@ -46,7 +46,7 @@ type Acme struct {
 }
 
 // New returns a new ACME issuer interface for the given issuer.
-func New(ctx *controller.Context, issuer v1alpha1.GenericIssuer) (issuer.Interface, error) {
+func New(ctx *controller.Context, issuer v1alpha2.GenericIssuer) (issuer.Interface, error) {
 	if issuer.GetSpec().ACME == nil {
 		return nil, fmt.Errorf("acme config may not be empty")
 	}
@@ -55,7 +55,7 @@ func New(ctx *controller.Context, issuer v1alpha1.GenericIssuer) (issuer.Interfa
 	// we are interested in
 
 	secretsLister := ctx.KubeSharedInformerFactory.Core().V1().Secrets().Lister()
-	orderLister := ctx.SharedInformerFactory.Certmanager().V1alpha1().Orders().Lister()
+	orderLister := ctx.SharedInformerFactory.Certmanager().V1alpha2().Orders().Lister()
 
 	a := &Acme{
 		Context: ctx,
diff --git a/pkg/issuer/acme/dns/BUILD.bazel b/pkg/issuer/acme/dns/BUILD.bazel
index 2d93f0ebf..46d6ea11f 100644
--- a/pkg/issuer/acme/dns/BUILD.bazel
+++ b/pkg/issuer/acme/dns/BUILD.bazel
@@ -8,7 +8,7 @@ go_library(
     deps = [
         "//pkg/acme/webhook:go_default_library",
         "//pkg/acme/webhook/apis/acme/v1alpha1:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer/acme/dns/acmedns:go_default_library",
         "//pkg/issuer/acme/dns/akamai:go_default_library",
@@ -35,7 +35,7 @@ go_test(
     ],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/issuer/acme/dns/acmedns:go_default_library",
diff --git a/pkg/issuer/acme/dns/dns.go b/pkg/issuer/acme/dns/dns.go
index 8bed09636..c65d6c380 100644
--- a/pkg/issuer/acme/dns/dns.go
+++ b/pkg/issuer/acme/dns/dns.go
@@ -29,7 +29,7 @@ import (
 
 	"github.com/jetstack/cert-manager/pkg/acme/webhook"
 	whapi "github.com/jetstack/cert-manager/pkg/acme/webhook/apis/acme/v1alpha1"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/acmedns"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/akamai"
@@ -78,7 +78,7 @@ type Solver struct {
 }
 
 // Present performs the work to configure DNS to resolve a DNS01 challenge.
-func (s *Solver) Present(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) Present(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	log := logs.WithResource(logs.FromContext(ctx, "Present"), ch).WithValues("domain", ch.Spec.DNSName)
 	ctx = logs.NewContext(ctx, log)
 
@@ -107,7 +107,7 @@ func (s *Solver) Present(ctx context.Context, issuer v1alpha1.GenericIssuer, ch
 }
 
 // Check verifies that the DNS records for the ACME challenge have propagated.
-func (s *Solver) Check(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) Check(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	log := logs.WithResource(logs.FromContext(ctx, "Check"), ch).WithValues("domain", ch.Spec.DNSName)
 	ctx = logs.NewContext(ctx, log)
 
@@ -137,7 +137,7 @@ func (s *Solver) Check(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v
 
 // CleanUp removes DNS records which are no longer needed after
 // certificate issuance.
-func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	log := logs.WithResource(logs.FromContext(ctx, "CleanUp"), ch).WithValues("domain", ch.Spec.DNSName)
 	ctx = logs.NewContext(ctx, log)
 
@@ -163,14 +163,14 @@ func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha1.GenericIssuer, ch
 	return slv.CleanUp(ch.Spec.DNSName, fqdn, ch.Spec.Key)
 }
 
-func followCNAME(strategy v1alpha1.CNAMEStrategy) bool {
-	if strategy == v1alpha1.FollowStrategy {
+func followCNAME(strategy v1alpha2.CNAMEStrategy) bool {
+	if strategy == v1alpha2.FollowStrategy {
 		return true
 	}
 	return false
 }
 
-func extractChallengeSolverConfig(ch *v1alpha1.Challenge) (*v1alpha1.ACMEChallengeSolverDNS01, error) {
+func extractChallengeSolverConfig(ch *v1alpha2.Challenge) (*v1alpha2.ACMEChallengeSolverDNS01, error) {
 	switch {
 	case ch.Spec.Solver != nil:
 		return ch.Spec.Solver.DNS01, nil
@@ -182,7 +182,7 @@ func extractChallengeSolverConfig(ch *v1alpha1.Challenge) (*v1alpha1.ACMEChallen
 // solverForChallenge returns a Solver for the given providerName.
 // The providerName is the name of an ACME DNS-01 challenge provider as
 // specified on the Issuer resource for the Solver.
-func (s *Solver) solverForChallenge(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) (solver, *v1alpha1.ACMEChallengeSolverDNS01, error) {
+func (s *Solver) solverForChallenge(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) (solver, *v1alpha2.ACMEChallengeSolverDNS01, error) {
 	log := logs.FromContext(ctx, "solverForChallenge")
 	dbg := log.V(logs.DebugLevel)
 	ctx = logs.NewContext(ctx, log)
@@ -356,7 +356,7 @@ func (s *Solver) solverForChallenge(ctx context.Context, issuer v1alpha1.Generic
 	return impl, providerConfig, nil
 }
 
-func (s *Solver) prepareChallengeRequest(issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) (webhook.Solver, *whapi.ChallengeRequest, error) {
+func (s *Solver) prepareChallengeRequest(issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) (webhook.Solver, *whapi.ChallengeRequest, error) {
 	dns01Config, err := extractChallengeSolverConfig(ch)
 	if err != nil {
 		return nil, nil, err
@@ -404,7 +404,7 @@ func (s *Solver) prepareChallengeRequest(issuer v1alpha1.GenericIssuer, ch *v1al
 
 var errNotFound = fmt.Errorf("failed to determine DNS01 solver type")
 
-func (s *Solver) dns01SolverForConfig(config *v1alpha1.ACMEChallengeSolverDNS01) (webhook.Solver, interface{}, error) {
+func (s *Solver) dns01SolverForConfig(config *v1alpha2.ACMEChallengeSolverDNS01) (webhook.Solver, interface{}, error) {
 	solverName := ""
 	var c interface{}
 	switch {
@@ -463,7 +463,7 @@ func NewSolver(ctx *controller.Context) (*Solver, error) {
 	}, nil
 }
 
-func (s *Solver) loadSecretData(selector *v1alpha1.SecretKeySelector, ns string) ([]byte, error) {
+func (s *Solver) loadSecretData(selector *v1alpha2.SecretKeySelector, ns string) ([]byte, error) {
 	secret, err := s.secretLister.Secrets(ns).Get(selector.Name)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to load secret %q", ns+"/"+selector.Name)
diff --git a/pkg/issuer/acme/dns/dns_test.go b/pkg/issuer/acme/dns/dns_test.go
index a530636ef..05004a0ac 100644
--- a/pkg/issuer/acme/dns/dns_test.go
+++ b/pkg/issuer/acme/dns/dns_test.go
@@ -25,7 +25,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/acmedns"
@@ -33,15 +33,15 @@ import (
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/util"
 )
 
-func newIssuer(name, namespace string) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func newIssuer(name, namespace string) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      name,
 			Namespace: namespace,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				ACME: &v1alpha1.ACMEIssuer{},
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				ACME: &v1alpha2.ACMEIssuer{},
 			},
 		},
 	}
@@ -74,14 +74,14 @@ func TestSolverFor(t *testing.T) {
 					},
 				},
 				Issuer: newIssuer("test", "default"),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 									Email: "test",
-									APIKey: v1alpha1.SecretKeySelector{
-										LocalObjectReference: v1alpha1.LocalObjectReference{
+									APIKey: v1alpha2.SecretKeySelector{
+										LocalObjectReference: v1alpha2.LocalObjectReference{
 											Name: "cloudflare-key",
 										},
 										Key: "api-key",
@@ -99,14 +99,14 @@ func TestSolverFor(t *testing.T) {
 			solverFixture: &solverFixture{
 				Issuer: newIssuer("test", "default"),
 				// don't include any secrets in the lister
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 									Email: "test",
-									APIKey: v1alpha1.SecretKeySelector{
-										LocalObjectReference: v1alpha1.LocalObjectReference{
+									APIKey: v1alpha2.SecretKeySelector{
+										LocalObjectReference: v1alpha2.LocalObjectReference{
 											Name: "cloudflare-key",
 										},
 										Key: "api-key",
@@ -130,14 +130,14 @@ func TestSolverFor(t *testing.T) {
 					},
 				},
 				Issuer: newIssuer("test", "default"),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Cloudflare: &v1alpha1.ACMEIssuerDNS01ProviderCloudflare{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Cloudflare: &v1alpha2.ACMEIssuerDNS01ProviderCloudflare{
 									Email: "test",
-									APIKey: v1alpha1.SecretKeySelector{
-										LocalObjectReference: v1alpha1.LocalObjectReference{
+									APIKey: v1alpha2.SecretKeySelector{
+										LocalObjectReference: v1alpha2.LocalObjectReference{
 											Name: "cloudflare-key",
 										},
 										Key: "api-key",
@@ -161,14 +161,14 @@ func TestSolverFor(t *testing.T) {
 					},
 				},
 				Issuer: newIssuer("test", "default"),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								AcmeDNS: &v1alpha1.ACMEIssuerDNS01ProviderAcmeDNS{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								AcmeDNS: &v1alpha2.ACMEIssuerDNS01ProviderAcmeDNS{
 									Host: "http://127.0.0.1/",
-									AccountSecret: v1alpha1.SecretKeySelector{
-										LocalObjectReference: v1alpha1.LocalObjectReference{
+									AccountSecret: v1alpha2.SecretKeySelector{
+										LocalObjectReference: v1alpha2.LocalObjectReference{
 											Name: "acmedns-key",
 										},
 										Key: "acmedns.json",
@@ -215,13 +215,13 @@ func TestSolveForDigitalOcean(t *testing.T) {
 			},
 		},
 		Issuer: newIssuer("test", "default"),
-		Challenge: &v1alpha1.Challenge{
-			Spec: v1alpha1.ChallengeSpec{
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						DigitalOcean: &v1alpha1.ACMEIssuerDNS01ProviderDigitalOcean{
-							Token: v1alpha1.SecretKeySelector{
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+		Challenge: &v1alpha2.Challenge{
+			Spec: v1alpha2.ChallengeSpec{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						DigitalOcean: &v1alpha2.ACMEIssuerDNS01ProviderDigitalOcean{
+							Token: v1alpha2.SecretKeySelector{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: "digitalocean",
 								},
 								Key: "token",
@@ -266,15 +266,15 @@ func TestRoute53TrimCreds(t *testing.T) {
 			},
 		},
 		Issuer: newIssuer("test", "default"),
-		Challenge: &v1alpha1.Challenge{
-			Spec: v1alpha1.ChallengeSpec{
-				Solver: &v1alpha1.ACMEChallengeSolver{
-					DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-						Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{
+		Challenge: &v1alpha2.Challenge{
+			Spec: v1alpha2.ChallengeSpec{
+				Solver: &v1alpha2.ACMEChallengeSolver{
+					DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+						Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{
 							AccessKeyID: "  test_with_spaces  ",
 							Region:      "us-west-2",
-							SecretAccessKey: v1alpha1.SecretKeySelector{
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+							SecretAccessKey: v1alpha2.SecretKeySelector{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: "route53",
 								},
 								Key: "secret",
@@ -329,11 +329,11 @@ func TestRoute53AmbientCreds(t *testing.T) {
 				},
 				Issuer:       newIssuer("test", "default"),
 				dnsProviders: newFakeDNSProviders(),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{
 									Region: "us-west-2",
 								},
 							},
@@ -359,11 +359,11 @@ func TestRoute53AmbientCreds(t *testing.T) {
 				},
 				Issuer:       newIssuer("test", "default"),
 				dnsProviders: newFakeDNSProviders(),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{
 									Region: "us-west-2",
 								},
 							},
@@ -419,11 +419,11 @@ func TestRoute53AssumeRole(t *testing.T) {
 				},
 				Issuer:       newIssuer("test", "default"),
 				dnsProviders: newFakeDNSProviders(),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{
 									Region: "us-west-2",
 									Role:   "my-role",
 								},
@@ -450,11 +450,11 @@ func TestRoute53AssumeRole(t *testing.T) {
 				},
 				Issuer:       newIssuer("test", "default"),
 				dnsProviders: newFakeDNSProviders(),
-				Challenge: &v1alpha1.Challenge{
-					Spec: v1alpha1.ChallengeSpec{
-						Solver: &v1alpha1.ACMEChallengeSolver{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Route53: &v1alpha1.ACMEIssuerDNS01ProviderRoute53{
+				Challenge: &v1alpha2.Challenge{
+					Spec: v1alpha2.ChallengeSpec{
+						Solver: &v1alpha2.ACMEChallengeSolver{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Route53: &v1alpha2.ACMEIssuerDNS01ProviderRoute53{
 									Region: "us-west-2",
 									Role:   "my-other-role",
 								},
diff --git a/pkg/issuer/acme/dns/rfc2136/BUILD.bazel b/pkg/issuer/acme/dns/rfc2136/BUILD.bazel
index aa3022e25..2191aefa5 100644
--- a/pkg/issuer/acme/dns/rfc2136/BUILD.bazel
+++ b/pkg/issuer/acme/dns/rfc2136/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/acme/webhook/apis/acme/v1alpha1:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/internal/apis/certmanager/validation/util:go_default_library",
         "//vendor/github.com/miekg/dns:go_default_library",
         "//vendor/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1:go_default_library",
@@ -31,7 +31,7 @@ go_test(
     data = glob(["testdata/**"]),
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/logs:go_default_library",
         "//test/acme/dns:go_default_library",
         "//test/acme/dns/server:go_default_library",
diff --git a/pkg/issuer/acme/dns/rfc2136/provider.go b/pkg/issuer/acme/dns/rfc2136/provider.go
index c13e4b3da..b25afc7cc 100644
--- a/pkg/issuer/acme/dns/rfc2136/provider.go
+++ b/pkg/issuer/acme/dns/rfc2136/provider.go
@@ -29,7 +29,7 @@ import (
 	restclient "k8s.io/client-go/rest"
 
 	whapi "github.com/jetstack/cert-manager/pkg/acme/webhook/apis/acme/v1alpha1"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 type Solver struct {
diff --git a/pkg/issuer/acme/dns/rfc2136/provider_test.go b/pkg/issuer/acme/dns/rfc2136/provider_test.go
index f6328bc48..9dd20eded 100644
--- a/pkg/issuer/acme/dns/rfc2136/provider_test.go
+++ b/pkg/issuer/acme/dns/rfc2136/provider_test.go
@@ -19,7 +19,7 @@ package rfc2136
 import (
 	"testing"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/test/acme/dns"
 	testserver "github.com/jetstack/cert-manager/test/acme/dns/server"
diff --git a/pkg/issuer/acme/dns/util_test.go b/pkg/issuer/acme/dns/util_test.go
index bfc63aa7a..4cb289b31 100644
--- a/pkg/issuer/acme/dns/util_test.go
+++ b/pkg/issuer/acme/dns/util_test.go
@@ -20,7 +20,7 @@ import (
 	"errors"
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/acmedns"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/dns/azuredns"
@@ -34,7 +34,7 @@ import (
 
 const (
 	defaultTestIssuerName      = "test-issuer"
-	defaultTestIssuerKind      = v1alpha1.IssuerKind
+	defaultTestIssuerKind      = v1alpha2.IssuerKind
 	defaultTestNamespace       = gen.DefaultTestNamespace
 	defaultTestCertificateName = "test-cert"
 )
@@ -45,9 +45,9 @@ type solverFixture struct {
 	*test.Builder
 
 	// Issuer to be passed to functions on the Solver (a default will be used if nil)
-	Issuer v1alpha1.GenericIssuer
+	Issuer v1alpha2.GenericIssuer
 	// Challenge resource to use during tests
-	Challenge *v1alpha1.Challenge
+	Challenge *v1alpha2.Challenge
 
 	dnsProviders *fakeDNSProviders
 
@@ -69,7 +69,7 @@ type solverFixture struct {
 
 func (s *solverFixture) Setup(t *testing.T) {
 	if s.Issuer == nil {
-		s.Issuer = gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha1.ACMEIssuer{}))
+		s.Issuer = gen.Issuer(defaultTestIssuerName, gen.SetIssuerACME(v1alpha2.ACMEIssuer{}))
 	}
 	if s.testResources == nil {
 		s.testResources = map[string]interface{}{}
diff --git a/pkg/issuer/acme/dns/webhook/BUILD.bazel b/pkg/issuer/acme/dns/webhook/BUILD.bazel
index c62be88e4..e358e2f80 100644
--- a/pkg/issuer/acme/dns/webhook/BUILD.bazel
+++ b/pkg/issuer/acme/dns/webhook/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/acme/webhook/apis/acme/v1alpha1:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned/scheme:go_default_library",
         "//vendor/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/runtime/schema:go_default_library",
diff --git a/pkg/issuer/acme/dns/webhook/webhook.go b/pkg/issuer/acme/dns/webhook/webhook.go
index 792017721..932007aa8 100644
--- a/pkg/issuer/acme/dns/webhook/webhook.go
+++ b/pkg/issuer/acme/dns/webhook/webhook.go
@@ -29,7 +29,7 @@ import (
 	"k8s.io/klog"
 
 	"github.com/jetstack/cert-manager/pkg/acme/webhook/apis/acme/v1alpha1"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 )
 
diff --git a/pkg/issuer/acme/http/BUILD.bazel b/pkg/issuer/acme/http/BUILD.bazel
index 107202228..770e7464c 100644
--- a/pkg/issuer/acme/http/BUILD.bazel
+++ b/pkg/issuer/acme/http/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/issuer/acme/http",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer/acme/http/solver:go_default_library",
         "//pkg/logs:go_default_library",
@@ -40,7 +40,7 @@ go_test(
     ],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//test/unit/gen:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
diff --git a/pkg/issuer/acme/http/http.go b/pkg/issuer/acme/http/http.go
index 015c09588..f4f28a00b 100644
--- a/pkg/issuer/acme/http/http.go
+++ b/pkg/issuer/acme/http/http.go
@@ -29,7 +29,7 @@ import (
 	corev1listers "k8s.io/client-go/listers/core/v1"
 	extv1beta1listers "k8s.io/client-go/listers/extensions/v1beta1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/http/solver"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
@@ -48,7 +48,7 @@ const (
 )
 
 var (
-	challengeGvk = v1alpha1.SchemeGroupVersion.WithKind("Challenge")
+	challengeGvk = v1alpha2.SchemeGroupVersion.WithKind("Challenge")
 )
 
 // Solver is an implementation of the acme http-01 challenge solver protocol
@@ -82,7 +82,7 @@ func http01LogCtx(ctx context.Context) context.Context {
 	return logf.NewContext(ctx, nil, "http01")
 }
 
-func httpDomainCfgForChallenge(ch *v1alpha1.Challenge) (*v1alpha1.ACMEChallengeSolverHTTP01Ingress, error) {
+func httpDomainCfgForChallenge(ch *v1alpha2.Challenge) (*v1alpha2.ACMEChallengeSolverHTTP01Ingress, error) {
 	if ch.Spec.Solver != nil {
 		if ch.Spec.Solver.HTTP01 == nil || ch.Spec.Solver.HTTP01.Ingress == nil {
 			return nil, fmt.Errorf("challenge's 'solver' field is specified but no HTTP01 ingress config provided. " +
@@ -96,7 +96,7 @@ func httpDomainCfgForChallenge(ch *v1alpha1.Challenge) (*v1alpha1.ACMEChallengeS
 // Present will realise the resources required to solve the given HTTP01
 // challenge validation in the apiserver. If those resources already exist, it
 // will return nil (i.e. this function is idempotent).
-func (s *Solver) Present(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) Present(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	ctx = http01LogCtx(ctx)
 
 	_, podErr := s.ensurePod(ctx, ch)
@@ -108,7 +108,7 @@ func (s *Solver) Present(ctx context.Context, issuer v1alpha1.GenericIssuer, ch
 	return utilerrors.NewAggregate([]error{podErr, svcErr, ingressErr})
 }
 
-func (s *Solver) Check(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) Check(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	ctx = logf.NewContext(http01LogCtx(ctx), nil, "selfCheck")
 	log := logf.FromContext(ctx)
 
@@ -149,7 +149,7 @@ func (s *Solver) Check(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v
 
 // CleanUp will ensure the created service, ingress and pod are clean/deleted of any
 // cert-manager created data.
-func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha1.GenericIssuer, ch *v1alpha1.Challenge) error {
+func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha2.GenericIssuer, ch *v1alpha2.Challenge) error {
 	var errs []error
 	errs = append(errs, s.cleanupPods(ctx, ch))
 	errs = append(errs, s.cleanupServices(ctx, ch))
@@ -157,7 +157,7 @@ func (s *Solver) CleanUp(ctx context.Context, issuer v1alpha1.GenericIssuer, ch
 	return utilerrors.NewAggregate(errs)
 }
 
-func (s *Solver) buildChallengeUrl(ch *v1alpha1.Challenge) *url.URL {
+func (s *Solver) buildChallengeUrl(ch *v1alpha2.Challenge) *url.URL {
 	url := &url.URL{}
 	url.Scheme = "http"
 	url.Host = ch.Spec.DNSName
diff --git a/pkg/issuer/acme/http/http_test.go b/pkg/issuer/acme/http/http_test.go
index 44c8539b5..668bd5175 100644
--- a/pkg/issuer/acme/http/http_test.go
+++ b/pkg/issuer/acme/http/http_test.go
@@ -22,7 +22,7 @@ import (
 	"net/url"
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // countReachabilityTestCalls is a wrapper function that allows us to count the number
@@ -38,7 +38,7 @@ func TestCheck(t *testing.T) {
 	type testT struct {
 		name             string
 		reachabilityTest reachabilityTest
-		challenge        *v1alpha1.Challenge
+		challenge        *v1alpha2.Challenge
 		expectedErr      bool
 	}
 	tests := []testT{
@@ -64,7 +64,7 @@ func TestCheck(t *testing.T) {
 			calls := 0
 			requiredCallsForPass := 2
 			if test.challenge == nil {
-				test.challenge = &v1alpha1.Challenge{}
+				test.challenge = &v1alpha2.Challenge{}
 			}
 			s := Solver{
 				testReachability: countReachabilityTestCalls(&calls, test.reachabilityTest),
diff --git a/pkg/issuer/acme/http/ingress.go b/pkg/issuer/acme/http/ingress.go
index 4c9b0a799..e3964a1f4 100644
--- a/pkg/issuer/acme/http/ingress.go
+++ b/pkg/issuer/acme/http/ingress.go
@@ -28,7 +28,7 @@ import (
 	utilerrors "k8s.io/apimachinery/pkg/util/errors"
 	"k8s.io/apimachinery/pkg/util/intstr"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/issuer/acme/http/solver"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/util"
@@ -36,7 +36,7 @@ import (
 
 // getIngressesForChallenge returns a list of Ingresses that were created to solve
 // http challenges for the given domain
-func (s *Solver) getIngressesForChallenge(ctx context.Context, ch *v1alpha1.Challenge) ([]*extv1beta1.Ingress, error) {
+func (s *Solver) getIngressesForChallenge(ctx context.Context, ch *v1alpha2.Challenge) ([]*extv1beta1.Ingress, error) {
 	log := logf.FromContext(ctx)
 
 	podLabels := podLabels(ch)
@@ -71,7 +71,7 @@ func (s *Solver) getIngressesForChallenge(ctx context.Context, ch *v1alpha1.Chal
 // ensureIngress will ensure the ingress required to solve this challenge
 // exists, or if an existing ingress is specified on the secret will ensure
 // that the ingress has an appropriate challenge path configured
-func (s *Solver) ensureIngress(ctx context.Context, ch *v1alpha1.Challenge, svcName string) (ing *extv1beta1.Ingress, err error) {
+func (s *Solver) ensureIngress(ctx context.Context, ch *v1alpha2.Challenge, svcName string) (ing *extv1beta1.Ingress, err error) {
 	log := logf.FromContext(ctx).WithName("ensureIngress")
 	httpDomainCfg, err := httpDomainCfgForChallenge(ch)
 	if err != nil {
@@ -106,7 +106,7 @@ func (s *Solver) ensureIngress(ctx context.Context, ch *v1alpha1.Challenge, svcN
 
 // createIngress will create a challenge solving pod for the given certificate,
 // domain, token and key.
-func (s *Solver) createIngress(ch *v1alpha1.Challenge, svcName string) (*extv1beta1.Ingress, error) {
+func (s *Solver) createIngress(ch *v1alpha2.Challenge, svcName string) (*extv1beta1.Ingress, error) {
 	ing, err := buildIngressResource(ch, svcName)
 	if err != nil {
 		return nil, err
@@ -114,7 +114,7 @@ func (s *Solver) createIngress(ch *v1alpha1.Challenge, svcName string) (*extv1be
 	return s.Client.ExtensionsV1beta1().Ingresses(ch.Namespace).Create(ing)
 }
 
-func buildIngressResource(ch *v1alpha1.Challenge, svcName string) (*extv1beta1.Ingress, error) {
+func buildIngressResource(ch *v1alpha2.Challenge, svcName string) (*extv1beta1.Ingress, error) {
 	httpDomainCfg, err := httpDomainCfgForChallenge(ch)
 	if err != nil {
 		return nil, err
@@ -158,7 +158,7 @@ func buildIngressResource(ch *v1alpha1.Challenge, svcName string) (*extv1beta1.I
 	}, nil
 }
 
-func (s *Solver) addChallengePathToIngress(ctx context.Context, ch *v1alpha1.Challenge, svcName string) (*extv1beta1.Ingress, error) {
+func (s *Solver) addChallengePathToIngress(ctx context.Context, ch *v1alpha2.Challenge, svcName string) (*extv1beta1.Ingress, error) {
 	httpDomainCfg, err := httpDomainCfgForChallenge(ch)
 	if err != nil {
 		return nil, err
@@ -210,7 +210,7 @@ func (s *Solver) addChallengePathToIngress(ctx context.Context, ch *v1alpha1.Cha
 // cleanupIngresses will remove the rules added by cert-manager to an existing
 // ingress, or delete the ingress if an existing ingress name is not specified
 // on the certificate.
-func (s *Solver) cleanupIngresses(ctx context.Context, ch *v1alpha1.Challenge) error {
+func (s *Solver) cleanupIngresses(ctx context.Context, ch *v1alpha2.Challenge) error {
 	log := logf.FromContext(ctx, "cleanupPods")
 
 	httpDomainCfg, err := httpDomainCfgForChallenge(ch)
diff --git a/pkg/issuer/acme/http/ingress_test.go b/pkg/issuer/acme/http/ingress_test.go
index 7166e3063..4b57cb317 100644
--- a/pkg/issuer/acme/http/ingress_test.go
+++ b/pkg/issuer/acme/http/ingress_test.go
@@ -30,7 +30,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/intstr"
 	coretesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
@@ -38,12 +38,12 @@ func TestGetIngressesForChallenge(t *testing.T) {
 	const createdIngressKey = "createdIngress"
 	tests := map[string]solverFixture{
 		"should return one ingress that matches": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -71,12 +71,12 @@ func TestGetIngressesForChallenge(t *testing.T) {
 			},
 		},
 		"should not return an ingress for the same certificate but different domain": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -120,13 +120,13 @@ func TestCleanupIngresses(t *testing.T) {
 	const createdIngressKey = "createdIngress"
 	tests := map[string]solverFixture{
 		"should delete ingress resource": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "abcd",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 								Class: strPtr("nginx"),
 							},
 						},
@@ -153,13 +153,13 @@ func TestCleanupIngresses(t *testing.T) {
 			},
 		},
 		"should not delete ingress resources without appropriate labels": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "abcd",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 								Class: strPtr("nginx"),
 							},
 						},
@@ -221,13 +221,13 @@ func TestCleanupIngresses(t *testing.T) {
 					},
 				},
 			},
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "abcd",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 								Name: "testingress",
 							},
 						},
@@ -304,13 +304,13 @@ func TestCleanupIngresses(t *testing.T) {
 					},
 				},
 			},
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "abcd",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 								Name: "testingress",
 							},
 						},
@@ -337,13 +337,13 @@ func TestCleanupIngresses(t *testing.T) {
 			},
 		},
 		"should return an error if a delete fails": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "abcd",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 								Class: strPtr("nginx"),
 							},
 						},
diff --git a/pkg/issuer/acme/http/pod.go b/pkg/issuer/acme/http/pod.go
index 94fe5d9d5..cbd2870de 100644
--- a/pkg/issuer/acme/http/pod.go
+++ b/pkg/issuer/acme/http/pod.go
@@ -27,11 +27,11 @@ import (
 	"k8s.io/apimachinery/pkg/selection"
 	utilerrors "k8s.io/apimachinery/pkg/util/errors"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
 
-func podLabels(ch *v1alpha1.Challenge) map[string]string {
+func podLabels(ch *v1alpha2.Challenge) map[string]string {
 	domainHash := fmt.Sprintf("%d", adler32.Checksum([]byte(ch.Spec.DNSName)))
 	tokenHash := fmt.Sprintf("%d", adler32.Checksum([]byte(ch.Spec.Token)))
 	solverIdent := "true"
@@ -46,7 +46,7 @@ func podLabels(ch *v1alpha1.Challenge) map[string]string {
 	}
 }
 
-func (s *Solver) ensurePod(ctx context.Context, ch *v1alpha1.Challenge) (*corev1.Pod, error) {
+func (s *Solver) ensurePod(ctx context.Context, ch *v1alpha2.Challenge) (*corev1.Pod, error) {
 	log := logf.FromContext(ctx).WithName("ensurePod")
 
 	log.V(logf.DebugLevel).Info("checking for existing HTTP01 solver pods")
@@ -74,7 +74,7 @@ func (s *Solver) ensurePod(ctx context.Context, ch *v1alpha1.Challenge) (*corev1
 
 // getPodsForChallenge returns a list of pods that were created to solve
 // the given challenge
-func (s *Solver) getPodsForChallenge(ctx context.Context, ch *v1alpha1.Challenge) ([]*corev1.Pod, error) {
+func (s *Solver) getPodsForChallenge(ctx context.Context, ch *v1alpha2.Challenge) ([]*corev1.Pod, error) {
 	log := logf.FromContext(ctx)
 
 	podLabels := podLabels(ch)
@@ -105,7 +105,7 @@ func (s *Solver) getPodsForChallenge(ctx context.Context, ch *v1alpha1.Challenge
 	return relevantPods, nil
 }
 
-func (s *Solver) cleanupPods(ctx context.Context, ch *v1alpha1.Challenge) error {
+func (s *Solver) cleanupPods(ctx context.Context, ch *v1alpha2.Challenge) error {
 	log := logf.FromContext(ctx, "cleanupPods")
 
 	pods, err := s.getPodsForChallenge(ctx, ch)
@@ -131,14 +131,14 @@ func (s *Solver) cleanupPods(ctx context.Context, ch *v1alpha1.Challenge) error
 
 // createPod will create a challenge solving pod for the given certificate,
 // domain, token and key.
-func (s *Solver) createPod(ch *v1alpha1.Challenge) (*corev1.Pod, error) {
+func (s *Solver) createPod(ch *v1alpha2.Challenge) (*corev1.Pod, error) {
 	return s.Client.CoreV1().Pods(ch.Namespace).Create(
 		s.buildPod(ch))
 }
 
 // buildPod will build a challenge solving pod for the given certificate,
 // domain, token and key. It will not create it in the API server
-func (s *Solver) buildPod(ch *v1alpha1.Challenge) *corev1.Pod {
+func (s *Solver) buildPod(ch *v1alpha2.Challenge) *corev1.Pod {
 	pod := s.buildDefaultPod(ch)
 
 	// Override defaults if they have changed in the pod template.
@@ -152,7 +152,7 @@ func (s *Solver) buildPod(ch *v1alpha1.Challenge) *corev1.Pod {
 	return pod
 }
 
-func (s *Solver) buildDefaultPod(ch *v1alpha1.Challenge) *corev1.Pod {
+func (s *Solver) buildDefaultPod(ch *v1alpha2.Challenge) *corev1.Pod {
 	podLabels := podLabels(ch)
 
 	return &corev1.Pod{
@@ -203,7 +203,7 @@ func (s *Solver) buildDefaultPod(ch *v1alpha1.Challenge) *corev1.Pod {
 }
 
 // Merge object meta from the pod template. Fall back to default values.
-func (s *Solver) mergePodObjectMetaWithPodTemplate(pod *corev1.Pod, podTempl *v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate) *corev1.Pod {
+func (s *Solver) mergePodObjectMetaWithPodTemplate(pod *corev1.Pod, podTempl *v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate) *corev1.Pod {
 	if podTempl == nil {
 		return pod
 	}
diff --git a/pkg/issuer/acme/http/pod_test.go b/pkg/issuer/acme/http/pod_test.go
index 903beb5aa..d4880161b 100644
--- a/pkg/issuer/acme/http/pod_test.go
+++ b/pkg/issuer/acme/http/pod_test.go
@@ -27,21 +27,21 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	coretesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func TestEnsurePod(t *testing.T) {
 	const createdPodKey = "createdPod"
 	tests := map[string]solverFixture{
 		"should return an existing pod if one already exists": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "token",
 					Key:     "key",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -77,14 +77,14 @@ func TestEnsurePod(t *testing.T) {
 			},
 		},
 		"should create a new pod if one does not exist": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "token",
 					Key:     "key",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -129,14 +129,14 @@ func TestEnsurePod(t *testing.T) {
 			},
 		},
 		"should clean up if multiple pods exist": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
 					Token:   "token",
 					Key:     "key",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -186,12 +186,12 @@ func TestGetPodsForCertificate(t *testing.T) {
 	const createdPodKey = "createdPod"
 	tests := map[string]solverFixture{
 		"should return one pod that matches": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -219,12 +219,12 @@ func TestGetPodsForCertificate(t *testing.T) {
 			},
 		},
 		"should not return a pod for the same certificate but different domain": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -268,13 +268,13 @@ func TestMergePodObjectMetaWithPodTemplate(t *testing.T) {
 	const createdPodKey = "createdPod"
 	tests := map[string]solverFixture{
 		"should use labels and annotations from template": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
-								PodTemplate: &v1alpha1.ACMEChallengeSolverHTTP01IngressPodTemplate{
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
+								PodTemplate: &v1alpha2.ACMEChallengeSolverHTTP01IngressPodTemplate{
 									ObjectMeta: metav1.ObjectMeta{
 										Labels: map[string]string{
 											"this is a":                           "label",
@@ -285,7 +285,7 @@ func TestMergePodObjectMetaWithPodTemplate(t *testing.T) {
 											"foo":                     "bar",
 										},
 									},
-									Spec: v1alpha1.ACMEChallengeSolverHTTP01IngressPodSpec{
+									Spec: v1alpha2.ACMEChallengeSolverHTTP01IngressPodSpec{
 										NodeSelector: map[string]string{
 											"node": "selector",
 										},
@@ -350,12 +350,12 @@ func TestMergePodObjectMetaWithPodTemplate(t *testing.T) {
 			},
 		},
 		"should use default if nothing has changed in template": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
diff --git a/pkg/issuer/acme/http/service.go b/pkg/issuer/acme/http/service.go
index 12e9538a8..804488fcb 100644
--- a/pkg/issuer/acme/http/service.go
+++ b/pkg/issuer/acme/http/service.go
@@ -27,11 +27,11 @@ import (
 	utilerrors "k8s.io/apimachinery/pkg/util/errors"
 	"k8s.io/apimachinery/pkg/util/intstr"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 )
 
-func (s *Solver) ensureService(ctx context.Context, ch *v1alpha1.Challenge) (*corev1.Service, error) {
+func (s *Solver) ensureService(ctx context.Context, ch *v1alpha2.Challenge) (*corev1.Service, error) {
 	log := logf.FromContext(ctx).WithName("ensureService")
 
 	log.V(logf.DebugLevel).Info("checking for existing HTTP01 solver services for challenge")
@@ -58,7 +58,7 @@ func (s *Solver) ensureService(ctx context.Context, ch *v1alpha1.Challenge) (*co
 
 // getServicesForChallenge returns a list of services that were created to solve
 // http challenges for the given domain
-func (s *Solver) getServicesForChallenge(ctx context.Context, ch *v1alpha1.Challenge) ([]*corev1.Service, error) {
+func (s *Solver) getServicesForChallenge(ctx context.Context, ch *v1alpha2.Challenge) ([]*corev1.Service, error) {
 	log := logf.FromContext(ctx)
 
 	podLabels := podLabels(ch)
@@ -91,7 +91,7 @@ func (s *Solver) getServicesForChallenge(ctx context.Context, ch *v1alpha1.Chall
 
 // createService will create the service required to solve this challenge
 // in the target API server.
-func (s *Solver) createService(ch *v1alpha1.Challenge) (*corev1.Service, error) {
+func (s *Solver) createService(ch *v1alpha2.Challenge) (*corev1.Service, error) {
 	svc, err := buildService(ch)
 	if err != nil {
 		return nil, err
@@ -99,7 +99,7 @@ func (s *Solver) createService(ch *v1alpha1.Challenge) (*corev1.Service, error)
 	return s.Client.CoreV1().Services(ch.Namespace).Create(svc)
 }
 
-func buildService(ch *v1alpha1.Challenge) (*corev1.Service, error) {
+func buildService(ch *v1alpha2.Challenge) (*corev1.Service, error) {
 	podLabels := podLabels(ch)
 	service := &corev1.Service{
 		ObjectMeta: metav1.ObjectMeta{
@@ -136,7 +136,7 @@ func buildService(ch *v1alpha1.Challenge) (*corev1.Service, error) {
 	return service, nil
 }
 
-func (s *Solver) cleanupServices(ctx context.Context, ch *v1alpha1.Challenge) error {
+func (s *Solver) cleanupServices(ctx context.Context, ch *v1alpha2.Challenge) error {
 	log := logf.FromContext(ctx, "cleanupPods")
 
 	services, err := s.getServicesForChallenge(ctx, ch)
diff --git a/pkg/issuer/acme/http/service_test.go b/pkg/issuer/acme/http/service_test.go
index 5a7570fba..2f11cd978 100644
--- a/pkg/issuer/acme/http/service_test.go
+++ b/pkg/issuer/acme/http/service_test.go
@@ -26,19 +26,19 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	coretesting "k8s.io/client-go/testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func TestEnsureService(t *testing.T) {
 	const createdServiceKey = "createdService"
 	tests := map[string]solverFixture{
 		"should return an existing service if one already exists": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -74,12 +74,12 @@ func TestEnsureService(t *testing.T) {
 			},
 		},
 		"should create a new service if one does not exist": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -127,12 +127,12 @@ func TestEnsureService(t *testing.T) {
 			},
 		},
 		"should clean up if multiple services exist": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -182,12 +182,12 @@ func TestGetServicesForChallenge(t *testing.T) {
 	const createdServiceKey = "createdService"
 	tests := map[string]solverFixture{
 		"should return one service that matches": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
@@ -215,12 +215,12 @@ func TestGetServicesForChallenge(t *testing.T) {
 			},
 		},
 		"should not return a service for the same certificate but different domain": {
-			Challenge: &v1alpha1.Challenge{
-				Spec: v1alpha1.ChallengeSpec{
+			Challenge: &v1alpha2.Challenge{
+				Spec: v1alpha2.ChallengeSpec{
 					DNSName: "example.com",
-					Solver: &v1alpha1.ACMEChallengeSolver{
-						HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-							Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{},
+					Solver: &v1alpha2.ACMEChallengeSolver{
+						HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+							Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{},
 						},
 					},
 				},
diff --git a/pkg/issuer/acme/http/util_test.go b/pkg/issuer/acme/http/util_test.go
index a505aa208..cb28321ac 100644
--- a/pkg/issuer/acme/http/util_test.go
+++ b/pkg/issuer/acme/http/util_test.go
@@ -19,7 +19,7 @@ package http
 import (
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 )
@@ -34,7 +34,7 @@ type solverFixture struct {
 	*test.Builder
 
 	// Challenge resource to use during tests
-	Challenge *v1alpha1.Challenge
+	Challenge *v1alpha2.Challenge
 
 	// PreFn will run before the test is run, but after the fixture has been initialised.
 	// This is useful if you want to load the clientset with some resources *after* the
diff --git a/pkg/issuer/acme/setup.go b/pkg/issuer/acme/setup.go
index ceb7b4722..1b148fbb9 100644
--- a/pkg/issuer/acme/setup.go
+++ b/pkg/issuer/acme/setup.go
@@ -30,7 +30,7 @@ import (
 	"github.com/jetstack/cert-manager/pkg/acme"
 	"github.com/jetstack/cert-manager/pkg/acme/client"
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/util/errors"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
@@ -59,7 +59,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 
 	// check if user has specified a v1 account URL, and set a status condition if so.
 	if newURL, ok := acmev1ToV2Mappings[a.issuer.GetSpec().ACME.Server]; ok {
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, "InvalidConfig",
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, "InvalidConfig",
 			fmt.Sprintf("Your ACME server URL is set to a v1 endpoint (%s). "+
 				"You should update the spec.acme.server field to %q", a.issuer.GetSpec().ACME.Server, newURL))
 		// return nil so that Setup only gets called again after the spec is updated
@@ -86,19 +86,19 @@ func (a *Acme) Setup(ctx context.Context) error {
 		pk, err = a.createAccountPrivateKey(a.issuer.GetSpec().ACME.PrivateKey, ns)
 		if err != nil {
 			s := messageAccountRegistrationFailed + err.Error()
-			apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountRegistrationFailed, s)
+			apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountRegistrationFailed, s)
 			return fmt.Errorf(s)
 		}
 		// We clear the ACME account URI as we have generated a new private key
 		a.issuer.GetStatus().ACMEStatus().URI = ""
 
 	case errors.IsInvalidData(err):
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountVerificationFailed, fmt.Sprintf("Account private key is invalid: %v", err))
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountVerificationFailed, fmt.Sprintf("Account private key is invalid: %v", err))
 		return nil
 
 	case err != nil:
 		s := messageAccountVerificationFailed + err.Error()
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountVerificationFailed, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountVerificationFailed, s)
 		return fmt.Errorf(s)
 
 	}
@@ -110,7 +110,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 		s := messageAccountVerificationFailed + err.Error()
 		log.Error(err, "failed to verify acme account")
 		a.Recorder.Event(a.issuer, v1.EventTypeWarning, errorAccountVerificationFailed, s)
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountVerificationFailed, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountVerificationFailed, s)
 		return err
 	}
 
@@ -128,7 +128,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 		r := "InvalidURL"
 		s := fmt.Sprintf("Failed to parse existing ACME server URI %q: %v", rawServerURL, err)
 		a.Recorder.Eventf(a.issuer, v1.EventTypeWarning, r, s)
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, r, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, r, s)
 		// absorb errors as retrying will not help resolve this error
 		return nil
 	}
@@ -139,14 +139,14 @@ func (a *Acme) Setup(ctx context.Context) error {
 		r := "InvalidURL"
 		s := fmt.Sprintf("Failed to parse existing ACME account URI %q: %v", rawAccountURL, err)
 		a.Recorder.Eventf(a.issuer, v1.EventTypeWarning, r, s)
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, r, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, r, s)
 		// absorb errors as retrying will not help resolve this error
 		return nil
 	}
 
-	hasReadyCondition := apiutil.IssuerHasCondition(a.issuer, v1alpha1.IssuerCondition{
-		Type:   v1alpha1.IssuerConditionReady,
-		Status: v1alpha1.ConditionTrue,
+	hasReadyCondition := apiutil.IssuerHasCondition(a.issuer, v1alpha2.IssuerCondition{
+		Type:   v1alpha2.IssuerConditionReady,
+		Status: v1alpha2.ConditionTrue,
 	})
 
 	// If the Host components of the server URL and the account URL match,
@@ -175,7 +175,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 		s := messageAccountVerificationFailed + err.Error()
 		log.Error(err, "failed to verify ACME account")
 		a.Recorder.Event(a.issuer, v1.EventTypeWarning, errorAccountVerificationFailed, s)
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountRegistrationFailed, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountRegistrationFailed, s)
 
 		acmeErr, ok := err.(*acmeapi.Error)
 		// If this is not an ACME error, we will simply return it and retry later
@@ -204,7 +204,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 		s := messageAccountUpdateFailed + err.Error()
 		log.Error(err, "failed to update ACME account")
 		a.Recorder.Event(a.issuer, v1.EventTypeWarning, errorAccountUpdateFailed, s)
-		apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorAccountUpdateFailed, s)
+		apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorAccountUpdateFailed, s)
 
 		acmeErr, ok := err.(*acmeapi.Error)
 		// If this is not an ACME error, we will simply return it and retry later
@@ -226,7 +226,7 @@ func (a *Acme) Setup(ctx context.Context) error {
 	}
 
 	log.Info("verified existing registration with ACME server")
-	apiutil.SetIssuerCondition(a.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionTrue, successAccountRegistered, messageAccountRegistered)
+	apiutil.SetIssuerCondition(a.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionTrue, successAccountRegistered, messageAccountRegistered)
 	a.issuer.GetStatus().ACMEStatus().URI = account.URL
 	a.issuer.GetStatus().ACMEStatus().LastRegisteredEmail = registeredEmail
 
@@ -306,7 +306,7 @@ func (a *Acme) registerAccount(ctx context.Context, cl client.Interface) (*acmea
 
 // createAccountPrivateKey will generate a new RSA private key, and create it
 // as a secret resource in the apiserver.
-func (a *Acme) createAccountPrivateKey(sel v1alpha1.SecretKeySelector, ns string) (*rsa.PrivateKey, error) {
+func (a *Acme) createAccountPrivateKey(sel v1alpha2.SecretKeySelector, ns string) (*rsa.PrivateKey, error) {
 	sel = acme.PrivateKeySelector(sel)
 	accountPrivKey, err := pki.GenerateRSAPrivateKey(pki.MinRSAKeySize)
 	if err != nil {
diff --git a/pkg/issuer/acme/setup_test.go b/pkg/issuer/acme/setup_test.go
index 5356779fc..912fad781 100644
--- a/pkg/issuer/acme/setup_test.go
+++ b/pkg/issuer/acme/setup_test.go
@@ -20,7 +20,7 @@ import (
 	"context"
 	"testing"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	testpkg "github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
diff --git a/pkg/issuer/acme/util_test.go b/pkg/issuer/acme/util_test.go
index 81012718c..823d68d2d 100644
--- a/pkg/issuer/acme/util_test.go
+++ b/pkg/issuer/acme/util_test.go
@@ -26,7 +26,7 @@ import (
 	fakeclock "k8s.io/utils/clock/testing"
 
 	"github.com/jetstack/cert-manager/pkg/acme/client"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
@@ -39,8 +39,8 @@ type acmeFixture struct {
 	Acme *Acme
 	*test.Builder
 
-	Issuer      v1alpha1.GenericIssuer
-	Certificate *v1alpha1.Certificate
+	Issuer      v1alpha2.GenericIssuer
+	Certificate *v1alpha2.Certificate
 	Client      *client.FakeACME
 	Clock       *fakeclock.FakeClock
 
@@ -53,10 +53,10 @@ type acmeFixture struct {
 
 func (s *acmeFixture) Setup(t *testing.T) {
 	if s.Issuer == nil {
-		s.Issuer = &v1alpha1.Issuer{
-			Spec: v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					ACME: &v1alpha1.ACMEIssuer{},
+		s.Issuer = &v1alpha2.Issuer{
+			Spec: v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					ACME: &v1alpha2.ACMEIssuer{},
 				},
 			},
 		}
@@ -102,7 +102,7 @@ func (s *acmeFixture) Finish(t *testing.T, args ...interface{}) {
 	}
 }
 
-func (s *acmeFixture) buildFakeAcme(b *test.Builder, issuer v1alpha1.GenericIssuer) *Acme {
+func (s *acmeFixture) buildFakeAcme(b *test.Builder, issuer v1alpha2.GenericIssuer) *Acme {
 	b.Init()
 	a, err := New(b.Context, issuer)
 	if err != nil {
@@ -115,10 +115,10 @@ func (s *acmeFixture) buildFakeAcme(b *test.Builder, issuer v1alpha1.GenericIssu
 	return acmeStruct
 }
 
-func (s *acmeFixture) ClientForIssuer(iss v1alpha1.GenericIssuer) (client.Interface, error) {
+func (s *acmeFixture) ClientForIssuer(iss v1alpha2.GenericIssuer) (client.Interface, error) {
 	return s.Client, nil
 }
 
-func (s *acmeFixture) ReadPrivateKey(sel v1alpha1.SecretKeySelector, ns string) (*rsa.PrivateKey, error) {
+func (s *acmeFixture) ReadPrivateKey(sel v1alpha2.SecretKeySelector, ns string) (*rsa.PrivateKey, error) {
 	return nil, fmt.Errorf("not implemented")
 }
diff --git a/pkg/issuer/ca/BUILD.bazel b/pkg/issuer/ca/BUILD.bazel
index e7e05f359..f39dbc15f 100644
--- a/pkg/issuer/ca/BUILD.bazel
+++ b/pkg/issuer/ca/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer:go_default_library",
         "//pkg/logs:go_default_library",
@@ -39,7 +39,7 @@ go_test(
     srcs = ["util_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller/test:go_default_library",
     ],
 )
diff --git a/pkg/issuer/ca/ca.go b/pkg/issuer/ca/ca.go
index 1c74ec910..b63e14ec9 100644
--- a/pkg/issuer/ca/ca.go
+++ b/pkg/issuer/ca/ca.go
@@ -20,7 +20,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
@@ -30,7 +30,7 @@ import (
 // used to sign certificates.
 type CA struct {
 	*controller.Context
-	issuer        v1alpha1.GenericIssuer
+	issuer        v1alpha2.GenericIssuer
 	secretsLister corelisters.SecretLister
 
 	// Namespace in which to read resources related to this Issuer from.
@@ -39,7 +39,7 @@ type CA struct {
 	resourceNamespace string
 }
 
-func NewCA(ctx *controller.Context, issuer v1alpha1.GenericIssuer) (issuer.Interface, error) {
+func NewCA(ctx *controller.Context, issuer v1alpha2.GenericIssuer) (issuer.Interface, error) {
 	secretsLister := ctx.KubeSharedInformerFactory.Core().V1().Secrets().Lister()
 
 	return &CA{
diff --git a/pkg/issuer/ca/setup.go b/pkg/issuer/ca/setup.go
index 1122e35e4..a837710f9 100644
--- a/pkg/issuer/ca/setup.go
+++ b/pkg/issuer/ca/setup.go
@@ -22,7 +22,7 @@ import (
 	"k8s.io/api/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/util/kube"
 )
@@ -47,7 +47,7 @@ func (c *CA) Setup(ctx context.Context) error {
 		log.Error(err, "error getting signing CA TLS certificate")
 		s := messageErrorGetKeyPair + err.Error()
 		c.Recorder.Event(c.issuer, v1.EventTypeWarning, errorGetKeyPair, s)
-		apiutil.SetIssuerCondition(c.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorGetKeyPair, s)
+		apiutil.SetIssuerCondition(c.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorGetKeyPair, s)
 		return err
 	}
 
@@ -56,7 +56,7 @@ func (c *CA) Setup(ctx context.Context) error {
 		log.Error(err, "error getting signing CA private key")
 		s := messageErrorGetKeyPair + err.Error()
 		c.Recorder.Event(c.issuer, v1.EventTypeWarning, errorGetKeyPair, s)
-		apiutil.SetIssuerCondition(c.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorGetKeyPair, s)
+		apiutil.SetIssuerCondition(c.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorGetKeyPair, s)
 		return err
 	}
 
@@ -65,14 +65,14 @@ func (c *CA) Setup(ctx context.Context) error {
 		s := messageErrorGetKeyPair + "certificate is not a CA"
 		log.Error(nil, "signing certificate is not a CA")
 		c.Recorder.Event(c.issuer, v1.EventTypeWarning, errorInvalidKeyPair, s)
-		apiutil.SetIssuerCondition(c.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorInvalidKeyPair, s)
+		apiutil.SetIssuerCondition(c.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorInvalidKeyPair, s)
 		// Don't return an error here as there is nothing more we can do
 		return nil
 	}
 
 	log.Info("signing CA verified")
 	c.Recorder.Event(c.issuer, v1.EventTypeNormal, successKeyPairVerified, messageKeyPairVerified)
-	apiutil.SetIssuerCondition(c.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionTrue, successKeyPairVerified, messageKeyPairVerified)
+	apiutil.SetIssuerCondition(c.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionTrue, successKeyPairVerified, messageKeyPairVerified)
 
 	return nil
 }
diff --git a/pkg/issuer/ca/util_test.go b/pkg/issuer/ca/util_test.go
index a76da7b78..19a95b4fe 100644
--- a/pkg/issuer/ca/util_test.go
+++ b/pkg/issuer/ca/util_test.go
@@ -20,7 +20,7 @@ import (
 	"context"
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 )
 
@@ -33,9 +33,9 @@ type caFixture struct {
 	CA *CA
 	*test.Builder
 
-	Issuer             v1alpha1.GenericIssuer
-	Certificate        *v1alpha1.Certificate
-	CertificateRequest *v1alpha1.CertificateRequest
+	Issuer             v1alpha2.GenericIssuer
+	Certificate        *v1alpha2.Certificate
+	CertificateRequest *v1alpha2.CertificateRequest
 
 	PreFn   func(*testing.T, *caFixture)
 	CheckFn func(*testing.T, *caFixture, ...interface{})
@@ -46,10 +46,10 @@ type caFixture struct {
 
 func (s *caFixture) Setup(t *testing.T) {
 	if s.Issuer == nil {
-		s.Issuer = &v1alpha1.Issuer{
-			Spec: v1alpha1.IssuerSpec{
-				IssuerConfig: v1alpha1.IssuerConfig{
-					ACME: &v1alpha1.ACMEIssuer{},
+		s.Issuer = &v1alpha2.Issuer{
+			Spec: v1alpha2.IssuerSpec{
+				IssuerConfig: v1alpha2.IssuerConfig{
+					ACME: &v1alpha2.ACMEIssuer{},
 				},
 			},
 		}
@@ -92,7 +92,7 @@ func (s *caFixture) Finish(t *testing.T, args ...interface{}) {
 	}
 }
 
-func (s *caFixture) buildFakeCA(b *test.Builder, issuer v1alpha1.GenericIssuer) *CA {
+func (s *caFixture) buildFakeCA(b *test.Builder, issuer v1alpha2.GenericIssuer) *CA {
 	b.Init()
 	a, err := NewCA(b.Context, issuer)
 	if err != nil {
diff --git a/pkg/issuer/factory.go b/pkg/issuer/factory.go
index a5231e47a..9d5a0caf6 100644
--- a/pkg/issuer/factory.go
+++ b/pkg/issuer/factory.go
@@ -21,13 +21,13 @@ import (
 	"sync"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 )
 
 // issuerConstructor constructs an issuer given an Issuer resource and a Context.
 // An error will be returned if the appropriate issuer is not registered.
-type IssuerConstructor func(*controller.Context, v1alpha1.GenericIssuer) (Interface, error)
+type IssuerConstructor func(*controller.Context, v1alpha2.GenericIssuer) (Interface, error)
 
 var (
 	constructors     = make(map[string]IssuerConstructor)
@@ -49,7 +49,7 @@ func RegisterIssuer(name string, c IssuerConstructor) {
 // It determines which issuer implementation to use by introspecting the
 // given Issuer resource.
 type Factory interface {
-	IssuerFor(v1alpha1.GenericIssuer) (Interface, error)
+	IssuerFor(v1alpha2.GenericIssuer) (Interface, error)
 }
 
 // factory is the default Factory implementation
@@ -68,7 +68,7 @@ func NewFactory(ctx *controller.Context) Factory {
 // A new instance of the Issuer will be returned for each call to IssuerFor,
 // however this is an inexpensive operation and so, Issuers should not need
 // to be cached and reused.
-func (f *factory) IssuerFor(issuer v1alpha1.GenericIssuer) (Interface, error) {
+func (f *factory) IssuerFor(issuer v1alpha2.GenericIssuer) (Interface, error) {
 	issuerType, err := apiutil.NameForIssuer(issuer)
 	if err != nil {
 		return nil, fmt.Errorf("could not get issuer type: %s", err.Error())
diff --git a/pkg/issuer/fake/BUILD.bazel b/pkg/issuer/fake/BUILD.bazel
index 1eabffec1..c21577e81 100644
--- a/pkg/issuer/fake/BUILD.bazel
+++ b/pkg/issuer/fake/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/issuer/fake",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/issuer:go_default_library",
     ],
 )
diff --git a/pkg/issuer/fake/factory.go b/pkg/issuer/fake/factory.go
index 462a74b05..b8d09b773 100644
--- a/pkg/issuer/fake/factory.go
+++ b/pkg/issuer/fake/factory.go
@@ -17,16 +17,16 @@ limitations under the License.
 package fake
 
 import (
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	issuerpkg "github.com/jetstack/cert-manager/pkg/issuer"
 )
 
 type Factory struct {
-	IssuerForFunc func(iss v1alpha1.GenericIssuer) (issuerpkg.Interface, error)
+	IssuerForFunc func(iss v1alpha2.GenericIssuer) (issuerpkg.Interface, error)
 }
 
 var _ issuerpkg.Factory = &Factory{}
 
-func (f *Factory) IssuerFor(iss v1alpha1.GenericIssuer) (issuerpkg.Interface, error) {
+func (f *Factory) IssuerFor(iss v1alpha2.GenericIssuer) (issuerpkg.Interface, error) {
 	return f.IssuerForFunc(iss)
 }
diff --git a/pkg/issuer/fake/helper.go b/pkg/issuer/fake/helper.go
index 3a71c1008..d5165a7eb 100644
--- a/pkg/issuer/fake/helper.go
+++ b/pkg/issuer/fake/helper.go
@@ -17,7 +17,7 @@ limitations under the License.
 package fake
 
 import (
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	issuerpkg "github.com/jetstack/cert-manager/pkg/issuer"
 )
 
diff --git a/pkg/issuer/fake/issuer.go b/pkg/issuer/fake/issuer.go
index b6bf62978..9cac24151 100644
--- a/pkg/issuer/fake/issuer.go
+++ b/pkg/issuer/fake/issuer.go
@@ -19,7 +19,7 @@ package fake
 import (
 	"context"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
 
diff --git a/pkg/issuer/helper.go b/pkg/issuer/helper.go
index bc3e6bcc8..61dbfa546 100644
--- a/pkg/issuer/helper.go
+++ b/pkg/issuer/helper.go
@@ -19,8 +19,8 @@ package issuer
 import (
 	"fmt"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 )
 
 type Helper interface {
diff --git a/pkg/issuer/helper_test.go b/pkg/issuer/helper_test.go
index 8dd4fd31a..aeba0056a 100644
--- a/pkg/issuer/helper_test.go
+++ b/pkg/issuer/helper_test.go
@@ -22,14 +22,14 @@ import (
 
 	"k8s.io/apimachinery/pkg/runtime"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller/test"
 	"github.com/jetstack/cert-manager/test/unit/gen"
 )
 
 func TestGetGenericIssuer(t *testing.T) {
-	var nilIssuer *v1alpha1.Issuer
-	var nilClusterIssuer *v1alpha1.ClusterIssuer
+	var nilIssuer *v1alpha2.Issuer
+	var nilClusterIssuer *v1alpha2.ClusterIssuer
 	type testT struct {
 		Name                   string
 		Kind                   string
@@ -37,7 +37,7 @@ func TestGetGenericIssuer(t *testing.T) {
 		CMObjects              []runtime.Object
 		NilClusterIssuerLister bool
 		Err                    bool
-		Expected               v1alpha1.GenericIssuer
+		Expected               v1alpha2.GenericIssuer
 	}
 	tests := []testT{
 		{
@@ -85,8 +85,8 @@ func TestGetGenericIssuer(t *testing.T) {
 			}
 			b.Init()
 			c := &helperImpl{
-				issuerLister:        b.FakeCMInformerFactory().Certmanager().V1alpha1().Issuers().Lister(),
-				clusterIssuerLister: b.FakeCMInformerFactory().Certmanager().V1alpha1().ClusterIssuers().Lister(),
+				issuerLister:        b.FakeCMInformerFactory().Certmanager().V1alpha2().Issuers().Lister(),
+				clusterIssuerLister: b.FakeCMInformerFactory().Certmanager().V1alpha2().ClusterIssuers().Lister(),
 			}
 			b.Start()
 			defer b.Stop()
@@ -98,7 +98,7 @@ func TestGetGenericIssuer(t *testing.T) {
 			stopCh := make(chan struct{})
 			defer close(stopCh)
 
-			actual, err := c.GetGenericIssuer(v1alpha1.ObjectReference{Name: row.Name, Kind: row.Kind}, row.Namespace)
+			actual, err := c.GetGenericIssuer(v1alpha2.ObjectReference{Name: row.Name, Kind: row.Kind}, row.Namespace)
 			if err != nil && !row.Err {
 				t.Errorf("Expected no error, but got: %s", err)
 			}
diff --git a/pkg/issuer/selfsigned/BUILD.bazel b/pkg/issuer/selfsigned/BUILD.bazel
index 10648c1e4..d32d9aafc 100644
--- a/pkg/issuer/selfsigned/BUILD.bazel
+++ b/pkg/issuer/selfsigned/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/issuer:go_default_library",
         "//vendor/k8s.io/client-go/listers/core/v1:go_default_library",
diff --git a/pkg/issuer/selfsigned/selfsigned.go b/pkg/issuer/selfsigned/selfsigned.go
index 62aa313f3..c07bc4681 100644
--- a/pkg/issuer/selfsigned/selfsigned.go
+++ b/pkg/issuer/selfsigned/selfsigned.go
@@ -20,7 +20,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
@@ -28,12 +28,12 @@ import (
 // SelfSigned is an Issuer implementation the simply self-signs Certificates.
 type SelfSigned struct {
 	*controller.Context
-	issuer v1alpha1.GenericIssuer
+	issuer v1alpha2.GenericIssuer
 
 	secretsLister corelisters.SecretLister
 }
 
-func NewSelfSigned(ctx *controller.Context, issuer v1alpha1.GenericIssuer) (issuer.Interface, error) {
+func NewSelfSigned(ctx *controller.Context, issuer v1alpha2.GenericIssuer) (issuer.Interface, error) {
 	secretsLister := ctx.KubeSharedInformerFactory.Core().V1().Secrets().Lister()
 
 	return &SelfSigned{
diff --git a/pkg/issuer/selfsigned/setup.go b/pkg/issuer/selfsigned/setup.go
index 669f16010..c20476eb7 100644
--- a/pkg/issuer/selfsigned/setup.go
+++ b/pkg/issuer/selfsigned/setup.go
@@ -20,7 +20,7 @@ import (
 	"context"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 const (
@@ -28,6 +28,6 @@ const (
 )
 
 func (c *SelfSigned) Setup(ctx context.Context) error {
-	apiutil.SetIssuerCondition(c.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionTrue, successReady, "")
+	apiutil.SetIssuerCondition(c.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionTrue, successReady, "")
 	return nil
 }
diff --git a/pkg/issuer/vault/BUILD.bazel b/pkg/issuer/vault/BUILD.bazel
index bc6e32fda..39e5732f7 100644
--- a/pkg/issuer/vault/BUILD.bazel
+++ b/pkg/issuer/vault/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/internal/vault:go_default_library",
         "//pkg/issuer:go_default_library",
diff --git a/pkg/issuer/vault/setup.go b/pkg/issuer/vault/setup.go
index 2fc6c18be..376c4c069 100644
--- a/pkg/issuer/vault/setup.go
+++ b/pkg/issuer/vault/setup.go
@@ -23,7 +23,7 @@ import (
 	"k8s.io/klog"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	vaultinternal "github.com/jetstack/cert-manager/pkg/internal/vault"
 )
 
@@ -45,7 +45,7 @@ const (
 func (v *Vault) Setup(ctx context.Context) error {
 	if v.issuer.GetSpec().Vault == nil {
 		klog.Infof("%s: %s", v.issuer.GetObjectMeta().Name, messageVaultConfigRequired)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messageVaultConfigRequired)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messageVaultConfigRequired)
 		return nil
 	}
 
@@ -53,7 +53,7 @@ func (v *Vault) Setup(ctx context.Context) error {
 	if v.issuer.GetSpec().Vault.Server == "" ||
 		v.issuer.GetSpec().Vault.Path == "" {
 		klog.Infof("%s: %s", v.issuer.GetObjectMeta().Name, messageServerAndPathRequired)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messageServerAndPathRequired)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messageServerAndPathRequired)
 		return nil
 	}
 
@@ -62,7 +62,7 @@ func (v *Vault) Setup(ctx context.Context) error {
 		v.issuer.GetSpec().Vault.Auth.AppRole.RoleId == "" &&
 		v.issuer.GetSpec().Vault.Auth.AppRole.SecretRef.Name == "" {
 		klog.Infof("%s: %s", v.issuer.GetObjectMeta().Name, messsageAuthFieldsRequired)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messsageAuthFieldsRequired)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messsageAuthFieldsRequired)
 		return nil
 	}
 
@@ -71,7 +71,7 @@ func (v *Vault) Setup(ctx context.Context) error {
 		(v.issuer.GetSpec().Vault.Auth.AppRole.RoleId != "" ||
 			v.issuer.GetSpec().Vault.Auth.AppRole.SecretRef.Name != "") {
 		klog.Infof("%s: %s", v.issuer.GetObjectMeta().Name, messageAuthFieldRequired)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messageAuthFieldRequired)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messageAuthFieldRequired)
 		return nil
 	}
 
@@ -80,7 +80,7 @@ func (v *Vault) Setup(ctx context.Context) error {
 		(v.issuer.GetSpec().Vault.Auth.AppRole.RoleId == "" ||
 			v.issuer.GetSpec().Vault.Auth.AppRole.SecretRef.Name == "") {
 		klog.Infof("%s: %s", v.issuer.GetObjectMeta().Name, messageAuthFieldRequired)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messageAuthFieldRequired)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messageAuthFieldRequired)
 		return nil
 	}
 
@@ -88,7 +88,7 @@ func (v *Vault) Setup(ctx context.Context) error {
 	if err != nil {
 		s := messageVaultClientInitFailed + err.Error()
 		klog.V(4).Infof("%s: %s", v.issuer.GetObjectMeta().Name, s)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, s)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, s)
 		return err
 	}
 
@@ -96,17 +96,17 @@ func (v *Vault) Setup(ctx context.Context) error {
 	if err != nil {
 		s := messageVaultHealthCheckFailed + err.Error()
 		klog.V(4).Infof("%s: %s", v.issuer.GetObjectMeta().Name, s)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, s)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, s)
 		return err
 	}
 
 	if !health.Initialized || health.Sealed {
 		klog.V(4).Infof("%s: %s: health: %v", v.issuer.GetObjectMeta().Name, messageVaultStatusVerificationFailed, health)
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse, errorVault, messageVaultStatusVerificationFailed)
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse, errorVault, messageVaultStatusVerificationFailed)
 		return fmt.Errorf(messageVaultStatusVerificationFailed)
 	}
 
 	klog.Info(messageVaultVerified)
-	apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionTrue, successVaultVerified, messageVaultVerified)
+	apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionTrue, successVaultVerified, messageVaultVerified)
 	return nil
 }
diff --git a/pkg/issuer/vault/vault.go b/pkg/issuer/vault/vault.go
index fb914bb97..6fe48461f 100644
--- a/pkg/issuer/vault/vault.go
+++ b/pkg/issuer/vault/vault.go
@@ -20,14 +20,14 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/issuer"
 )
 
 type Vault struct {
 	*controller.Context
-	issuer v1alpha1.GenericIssuer
+	issuer v1alpha2.GenericIssuer
 
 	secretsLister corelisters.SecretLister
 
@@ -37,7 +37,7 @@ type Vault struct {
 	resourceNamespace string
 }
 
-func NewVault(ctx *controller.Context, issuer v1alpha1.GenericIssuer) (issuer.Interface, error) {
+func NewVault(ctx *controller.Context, issuer v1alpha2.GenericIssuer) (issuer.Interface, error) {
 	secretsLister := ctx.KubeSharedInformerFactory.Core().V1().Secrets().Lister()
 
 	return &Vault{
diff --git a/pkg/issuer/venafi/BUILD.bazel b/pkg/issuer/venafi/BUILD.bazel
index 442f2e626..171cdf771 100644
--- a/pkg/issuer/venafi/BUILD.bazel
+++ b/pkg/issuer/venafi/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/internal/venafi:go_default_library",
         "//pkg/issuer:go_default_library",
@@ -39,7 +39,7 @@ go_test(
     srcs = ["setup_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/controller:go_default_library",
         "//pkg/controller/test:go_default_library",
         "//pkg/internal/venafi:go_default_library",
diff --git a/pkg/issuer/venafi/setup.go b/pkg/issuer/venafi/setup.go
index ae1265067..6447624fb 100644
--- a/pkg/issuer/venafi/setup.go
+++ b/pkg/issuer/venafi/setup.go
@@ -24,7 +24,7 @@ import (
 	"k8s.io/klog"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 func (v *Venafi) Setup(ctx context.Context) error {
@@ -36,22 +36,22 @@ func (v *Venafi) Setup(ctx context.Context) error {
 	err = client.Ping()
 	if err != nil {
 		klog.Infof("Issuer could not connect to endpoint with provided credentials. Issuer failed to connect to endpoint\n")
-		apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionFalse,
+		apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionFalse,
 			"ErrorPing", fmt.Sprintf("Failed to connect to Venafi endpoint"))
 		return fmt.Errorf("error verifying Venafi client: %s", err.Error())
 	}
 
 	// If it does not already have a 'ready' condition, we'll also log an event
 	// to make it really clear to users that this Issuer is ready.
-	if !apiutil.IssuerHasCondition(v.issuer, v1alpha1.IssuerCondition{
-		Type:   v1alpha1.IssuerConditionReady,
-		Status: v1alpha1.ConditionTrue,
+	if !apiutil.IssuerHasCondition(v.issuer, v1alpha2.IssuerCondition{
+		Type:   v1alpha2.IssuerConditionReady,
+		Status: v1alpha2.ConditionTrue,
 	}) {
 		v.Recorder.Eventf(v.issuer, corev1.EventTypeNormal, "Ready", "Verified issuer with Venafi server")
 	}
 
 	klog.Info("Venafi issuer started")
-	apiutil.SetIssuerCondition(v.issuer, v1alpha1.IssuerConditionReady, v1alpha1.ConditionTrue, "Venafi issuer started", "Venafi issuer started")
+	apiutil.SetIssuerCondition(v.issuer, v1alpha2.IssuerConditionReady, v1alpha2.ConditionTrue, "Venafi issuer started", "Venafi issuer started")
 
 	return nil
 }
diff --git a/pkg/issuer/venafi/setup_test.go b/pkg/issuer/venafi/setup_test.go
index f3e51a4db..ac2829ef3 100644
--- a/pkg/issuer/venafi/setup_test.go
+++ b/pkg/issuer/venafi/setup_test.go
@@ -22,7 +22,7 @@ import (
 
 	corelisters "k8s.io/client-go/listers/core/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	controllertest "github.com/jetstack/cert-manager/pkg/controller/test"
 	internalvenafi "github.com/jetstack/cert-manager/pkg/internal/venafi"
diff --git a/pkg/issuer/venafi/venafi.go b/pkg/issuer/venafi/venafi.go
index 4967967f1..65118198a 100644
--- a/pkg/issuer/venafi/venafi.go
+++ b/pkg/issuer/venafi/venafi.go
@@ -20,7 +20,7 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/controller"
 	"github.com/jetstack/cert-manager/pkg/internal/venafi"
 	"github.com/jetstack/cert-manager/pkg/issuer"
diff --git a/pkg/metrics/BUILD.bazel b/pkg/metrics/BUILD.bazel
index 86c02bb59..592294bc8 100644
--- a/pkg/metrics/BUILD.bazel
+++ b/pkg/metrics/BUILD.bazel
@@ -6,8 +6,8 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/pkg/metrics",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//pkg/logs:go_default_library",
         "//pkg/util/errors:go_default_library",
         "//pkg/util/kube:go_default_library",
@@ -41,7 +41,7 @@ go_test(
     srcs = ["metrics_test.go"],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//vendor/github.com/prometheus/client_golang/prometheus/testutil:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
     ],
diff --git a/pkg/metrics/metrics.go b/pkg/metrics/metrics.go
index b8922213c..bc8fcf328 100644
--- a/pkg/metrics/metrics.go
+++ b/pkg/metrics/metrics.go
@@ -36,8 +36,8 @@ import (
 	corelisters "k8s.io/client-go/listers/core/v1"
 	"k8s.io/client-go/tools/cache"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 	logf "github.com/jetstack/cert-manager/pkg/logs"
 	"github.com/jetstack/cert-manager/pkg/util/errors"
 	"github.com/jetstack/cert-manager/pkg/util/kube"
@@ -53,7 +53,7 @@ const (
 	prometheusMetricsServerMaxHeaderBytes  = 1 << 20 // 1 MiB
 )
 
-var readyConditionStatuses = [...]string{string(v1alpha1.ConditionTrue), string(v1alpha1.ConditionFalse), string(v1alpha1.ConditionUnknown)}
+var readyConditionStatuses = [...]string{string(v1alpha2.ConditionTrue), string(v1alpha2.ConditionFalse), string(v1alpha2.ConditionUnknown)}
 
 // Default set of metrics
 var Default = New(logf.NewContext(context.Background(), logf.Log.WithName("metrics")))
@@ -215,7 +215,7 @@ func (m *Metrics) Start(stopCh <-chan struct{}) {
 }
 
 // UpdateCertificateExpiry updates the expiry time of a certificate
-func (m *Metrics) UpdateCertificateExpiry(crt *v1alpha1.Certificate, secretLister corelisters.SecretLister) {
+func (m *Metrics) UpdateCertificateExpiry(crt *v1alpha2.Certificate, secretLister corelisters.SecretLister) {
 	log := logf.FromContext(m.ctx)
 	log = logf.WithResource(log, crt)
 	log = logf.WithRelatedResourceName(log, crt.Spec.SecretName, crt.Namespace, "Secret")
@@ -233,7 +233,7 @@ func (m *Metrics) UpdateCertificateExpiry(crt *v1alpha1.Certificate, secretListe
 	updateX509Expiry(crt, cert)
 }
 
-func updateX509Expiry(crt *v1alpha1.Certificate, cert *x509.Certificate) {
+func updateX509Expiry(crt *v1alpha2.Certificate, cert *x509.Certificate) {
 	expiryTime := cert.NotAfter
 	key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(crt)
 	if err != nil {
@@ -249,20 +249,20 @@ func updateX509Expiry(crt *v1alpha1.Certificate, cert *x509.Certificate) {
 	registerCertificateKey(key)
 }
 
-func (m *Metrics) UpdateCertificateStatus(crt *v1alpha1.Certificate) {
+func (m *Metrics) UpdateCertificateStatus(crt *v1alpha2.Certificate) {
 	log := logf.FromContext(m.ctx)
 	log = logf.WithResource(log, crt)
 
 	log.V(logf.DebugLevel).Info("attempting to retrieve ready status for certificate")
 	for _, c := range crt.Status.Conditions {
 		switch c.Type {
-		case v1alpha1.CertificateConditionReady:
+		case v1alpha2.CertificateConditionReady:
 			updateCertificateReadyStatus(crt, c.Status)
 		}
 	}
 }
 
-func updateCertificateReadyStatus(crt *v1alpha1.Certificate, current v1alpha1.ConditionStatus) {
+func updateCertificateReadyStatus(crt *v1alpha2.Certificate, current v1alpha2.ConditionStatus) {
 	key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(crt)
 	if err != nil {
 		return
@@ -317,7 +317,7 @@ func (m *Metrics) cleanUp() {
 }
 
 // cleanUpCertificates removes metrics for recently deleted certificates
-func cleanUpCertificates(activeCrts []*v1alpha1.Certificate) {
+func cleanUpCertificates(activeCrts []*v1alpha2.Certificate) {
 	activeMap := make(map[string]struct{}, len(activeCrts))
 	for _, crt := range activeCrts {
 		key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(crt)
diff --git a/pkg/metrics/metrics_test.go b/pkg/metrics/metrics_test.go
index a12f044df..896a13cfd 100644
--- a/pkg/metrics/metrics_test.go
+++ b/pkg/metrics/metrics_test.go
@@ -24,30 +24,30 @@ import (
 
 	"github.com/prometheus/client_golang/prometheus/testutil"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
-func getReadyConditionStatus(crt *v1alpha1.Certificate) v1alpha1.ConditionStatus {
+func getReadyConditionStatus(crt *v1alpha2.Certificate) v1alpha2.ConditionStatus {
 	for _, c := range crt.Status.Conditions {
 		switch c.Type {
-		case v1alpha1.CertificateConditionReady:
+		case v1alpha2.CertificateConditionReady:
 			return c.Status
 		}
 	}
-	return v1alpha1.ConditionUnknown
+	return v1alpha2.ConditionUnknown
 }
 
-func buildCertificate(name, namespace string, condition v1alpha1.ConditionStatus) *v1alpha1.Certificate {
-	return &v1alpha1.Certificate{
+func buildCertificate(name, namespace string, condition v1alpha2.ConditionStatus) *v1alpha2.Certificate {
+	return &v1alpha2.Certificate{
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      name,
 			Namespace: namespace,
 		},
-		Status: v1alpha1.CertificateStatus{
-			Conditions: []v1alpha1.CertificateCondition{
+		Status: v1alpha2.CertificateStatus{
+			Conditions: []v1alpha2.CertificateCondition{
 				{
-					Type:   v1alpha1.CertificateConditionReady,
+					Type:   v1alpha2.CertificateConditionReady,
 					Status: condition,
 				},
 			},
@@ -61,13 +61,13 @@ func TestUpdateCertificateExpiry(t *testing.T) {
 	# TYPE certmanager_certificate_expiration_timestamp_seconds gauge
 `
 	type testT struct {
-		crt      *v1alpha1.Certificate
+		crt      *v1alpha2.Certificate
 		cert     *x509.Certificate
 		expected string
 	}
 	tests := map[string]testT{
 		"first": {
-			crt: &v1alpha1.Certificate{
+			crt: &v1alpha2.Certificate{
 				ObjectMeta: metav1.ObjectMeta{
 					Name:      "something",
 					Namespace: "default",
@@ -106,12 +106,12 @@ func TestUpdateCertificateReadyStatus(t *testing.T) {
 `
 
 	type testT struct {
-		crt      *v1alpha1.Certificate
+		crt      *v1alpha2.Certificate
 		expected string
 	}
 	tests := map[string]testT{
 		"ready status true is updated correctly": {
-			crt: buildCertificate("something", "default", v1alpha1.ConditionTrue),
+			crt: buildCertificate("something", "default", v1alpha2.ConditionTrue),
 			expected: `
 	certmanager_certificate_ready_status{condition="False",name="something",namespace="default"} 0
 	certmanager_certificate_ready_status{condition="True",name="something",namespace="default"} 1
@@ -119,7 +119,7 @@ func TestUpdateCertificateReadyStatus(t *testing.T) {
 `,
 		},
 		"ready status false is updated correctly": {
-			crt: buildCertificate("something", "default", v1alpha1.ConditionFalse),
+			crt: buildCertificate("something", "default", v1alpha2.ConditionFalse),
 			expected: `
 	certmanager_certificate_ready_status{condition="False",name="something",namespace="default"} 1
 	certmanager_certificate_ready_status{condition="True",name="something",namespace="default"} 0
@@ -127,7 +127,7 @@ func TestUpdateCertificateReadyStatus(t *testing.T) {
 `,
 		},
 		"ready status unknown is updated correctly": {
-			crt: buildCertificate("something", "default", v1alpha1.ConditionUnknown),
+			crt: buildCertificate("something", "default", v1alpha2.ConditionUnknown),
 			expected: `
 	certmanager_certificate_ready_status{condition="False",name="something",namespace="default"} 0
 	certmanager_certificate_ready_status{condition="True",name="something",namespace="default"} 0
@@ -161,21 +161,21 @@ func TestCleanUp(t *testing.T) {
 	# TYPE certmanager_certificate_ready_status gauge
 `
 	type testT struct {
-		active         map[*v1alpha1.Certificate]*x509.Certificate
-		inactive       map[*v1alpha1.Certificate]*x509.Certificate
+		active         map[*v1alpha2.Certificate]*x509.Certificate
+		inactive       map[*v1alpha2.Certificate]*x509.Certificate
 		expectedExpiry string
 		expectedReady  string
 	}
 	tests := map[string]testT{
 		"inactive certificate metrics cleaned up while active certificate metrics kept": {
-			active: map[*v1alpha1.Certificate]*x509.Certificate{
-				buildCertificate("active", "default", v1alpha1.ConditionTrue): {
+			active: map[*v1alpha2.Certificate]*x509.Certificate{
+				buildCertificate("active", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
 			},
-			inactive: map[*v1alpha1.Certificate]*x509.Certificate{
-				buildCertificate("inactive", "default", v1alpha1.ConditionTrue): {
+			inactive: map[*v1alpha2.Certificate]*x509.Certificate{
+				buildCertificate("inactive", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
@@ -190,17 +190,17 @@ func TestCleanUp(t *testing.T) {
 `,
 		},
 		"no metrics cleaned up when only active certificate metrics": {
-			active: map[*v1alpha1.Certificate]*x509.Certificate{
-				buildCertificate("active", "default", v1alpha1.ConditionTrue): {
+			active: map[*v1alpha2.Certificate]*x509.Certificate{
+				buildCertificate("active", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
-				buildCertificate("also-active", "default", v1alpha1.ConditionTrue): {
+				buildCertificate("also-active", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
 			},
-			inactive: map[*v1alpha1.Certificate]*x509.Certificate{},
+			inactive: map[*v1alpha2.Certificate]*x509.Certificate{},
 			expectedExpiry: `
 	certmanager_certificate_expiration_timestamp_seconds{name="active",namespace="default"} 2.208988804e+09
 	certmanager_certificate_expiration_timestamp_seconds{name="also-active",namespace="default"} 2.208988804e+09
@@ -215,13 +215,13 @@ func TestCleanUp(t *testing.T) {
 `,
 		},
 		"all metrics cleaned up when only inactive certificate metrics": {
-			active: map[*v1alpha1.Certificate]*x509.Certificate{},
-			inactive: map[*v1alpha1.Certificate]*x509.Certificate{
-				buildCertificate("inactive", "default", v1alpha1.ConditionTrue): {
+			active: map[*v1alpha2.Certificate]*x509.Certificate{},
+			inactive: map[*v1alpha2.Certificate]*x509.Certificate{
+				buildCertificate("inactive", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
-				buildCertificate("also-inactive", "default", v1alpha1.ConditionTrue): {
+				buildCertificate("also-inactive", "default", v1alpha2.ConditionTrue): {
 					// fixed expiry time for testing
 					NotAfter: time.Unix(2208988804, 0),
 				},
@@ -234,7 +234,7 @@ func TestCleanUp(t *testing.T) {
 		t.Run(n, func(t *testing.T) {
 			defer cleanUpCertificates(nil)
 
-			var activeCrts []*v1alpha1.Certificate
+			var activeCrts []*v1alpha2.Certificate
 			for crt, cert := range test.active {
 				updateX509Expiry(crt, cert)
 				updateCertificateReadyStatus(crt, getReadyConditionStatus(crt))
diff --git a/pkg/util/pki/BUILD.bazel b/pkg/util/pki/BUILD.bazel
index 71c2e60f1..ddc07aa0b 100644
--- a/pkg/util/pki/BUILD.bazel
+++ b/pkg/util/pki/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util/errors:go_default_library",
     ],
 )
@@ -25,7 +25,7 @@ go_test(
     ],
     embed = [":go_default_library"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
     ],
 )
diff --git a/pkg/util/pki/csr.go b/pkg/util/pki/csr.go
index 1b416c834..fb885587b 100644
--- a/pkg/util/pki/csr.go
+++ b/pkg/util/pki/csr.go
@@ -30,12 +30,12 @@ import (
 	"time"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 // CommonNameForCertificate returns the common name that should be used for the
 // given Certificate resource, by inspecting the CommonName and DNSNames fields.
-func CommonNameForCertificate(crt *v1alpha1.Certificate) string {
+func CommonNameForCertificate(crt *v1alpha2.Certificate) string {
 	if crt.Spec.CommonName != "" {
 		return crt.Spec.CommonName
 	}
@@ -47,7 +47,7 @@ func CommonNameForCertificate(crt *v1alpha1.Certificate) string {
 
 // DNSNamesForCertificate returns the DNS names that should be used for the
 // given Certificate resource, by inspecting the CommonName and DNSNames fields.
-func DNSNamesForCertificate(crt *v1alpha1.Certificate) []string {
+func DNSNamesForCertificate(crt *v1alpha2.Certificate) []string {
 	if len(crt.Spec.DNSNames) == 0 {
 		if crt.Spec.CommonName == "" {
 			return []string{}
@@ -60,7 +60,7 @@ func DNSNamesForCertificate(crt *v1alpha1.Certificate) []string {
 	return crt.Spec.DNSNames
 }
 
-func IPAddressesForCertificate(crt *v1alpha1.Certificate) []net.IP {
+func IPAddressesForCertificate(crt *v1alpha2.Certificate) []net.IP {
 	var ipAddresses []net.IP
 	var ip net.IP
 	for _, ipName := range crt.Spec.IPAddresses {
@@ -99,7 +99,7 @@ const defaultOrganization = "cert-manager"
 // OrganizationForCertificate will return the Organization to set for the
 // Certificate resource.
 // If an Organization is not specifically set, a default will be used.
-func OrganizationForCertificate(crt *v1alpha1.Certificate) []string {
+func OrganizationForCertificate(crt *v1alpha2.Certificate) []string {
 	if len(crt.Spec.Organization) == 0 {
 		return []string{defaultOrganization}
 	}
@@ -109,13 +109,13 @@ func OrganizationForCertificate(crt *v1alpha1.Certificate) []string {
 
 var serialNumberLimit = new(big.Int).Lsh(big.NewInt(1), 128)
 
-func buildUsages(usages []v1alpha1.KeyUsage, isCA bool) (ku x509.KeyUsage, eku []x509.ExtKeyUsage, err error) {
-	var unk []v1alpha1.KeyUsage
+func buildUsages(usages []v1alpha2.KeyUsage, isCA bool) (ku x509.KeyUsage, eku []x509.ExtKeyUsage, err error) {
+	var unk []v1alpha2.KeyUsage
 	if isCA {
 		ku |= x509.KeyUsageCertSign
 	}
 	if len(usages) == 0 {
-		usages = append(usages, v1alpha1.DefaultKeyUsages()...)
+		usages = append(usages, v1alpha2.DefaultKeyUsages()...)
 	}
 	for _, u := range usages {
 		if kuse, ok := apiutil.KeyUsageType(u); ok {
@@ -136,7 +136,7 @@ func buildUsages(usages []v1alpha1.KeyUsage, isCA bool) (ku x509.KeyUsage, eku [
 // by issuers that utilise CSRs to obtain Certificates.
 // The CSR will not be signed, and should be passed to either EncodeCSR or
 // to the x509.CreateCertificateRequest function.
-func GenerateCSR(crt *v1alpha1.Certificate) (*x509.CertificateRequest, error) {
+func GenerateCSR(crt *v1alpha2.Certificate) (*x509.CertificateRequest, error) {
 	commonName := CommonNameForCertificate(crt)
 	dnsNames := DNSNamesForCertificate(crt)
 	iPAddresses := IPAddressesForCertificate(crt)
@@ -170,7 +170,7 @@ func GenerateCSR(crt *v1alpha1.Certificate) (*x509.CertificateRequest, error) {
 // This should create a Certificate template that is equivalent to the CertificateRequest
 // generated by GenerateCSR.
 // The PublicKey field must be populated by the caller.
-func GenerateTemplate(crt *v1alpha1.Certificate) (*x509.Certificate, error) {
+func GenerateTemplate(crt *v1alpha2.Certificate) (*x509.Certificate, error) {
 	commonName := CommonNameForCertificate(crt)
 	dnsNames := DNSNamesForCertificate(crt)
 	ipAddresses := IPAddressesForCertificate(crt)
@@ -218,7 +218,7 @@ func GenerateTemplate(crt *v1alpha1.Certificate) (*x509.Certificate, error) {
 
 // GenerateTemplate will create a x509.Certificate for the given
 // CertificateRequest resource
-func GenerateTemplateFromCertificateRequest(cr *v1alpha1.CertificateRequest) (*x509.Certificate, error) {
+func GenerateTemplateFromCertificateRequest(cr *v1alpha2.CertificateRequest) (*x509.Certificate, error) {
 	certDuration := apiutil.DefaultCertDuration(cr.Spec.Duration)
 	keyUsage, extKeyUsage, err := buildUsages(cr.Spec.Usages, cr.Spec.IsCA)
 	if err != nil {
@@ -275,7 +275,7 @@ func GenerateTemplateFromCSRPEMWithUsages(csrPEM []byte, duration time.Duration,
 }
 
 // SignCertificate returns a signed x509.Certificate object for the given
-// *v1alpha1.Certificate crt.
+// *v1alpha2.Certificate crt.
 // publicKey is the public key of the signee, and signerKey is the private
 // key of the signer.
 // It returns a PEM encoded copy of the Certificate as well as a *x509.Certificate
@@ -376,15 +376,15 @@ func EncodeX509Chain(certs []*x509.Certificate) ([]byte, error) {
 // SignatureAlgorithm will determine the appropriate signature algorithm for
 // the given certificate.
 // Adapted from https://github.com/cloudflare/cfssl/blob/master/csr/csr.go#L102
-func SignatureAlgorithm(crt *v1alpha1.Certificate) (x509.PublicKeyAlgorithm, x509.SignatureAlgorithm, error) {
+func SignatureAlgorithm(crt *v1alpha2.Certificate) (x509.PublicKeyAlgorithm, x509.SignatureAlgorithm, error) {
 	var sigAlgo x509.SignatureAlgorithm
 	var pubKeyAlgo x509.PublicKeyAlgorithm
 	switch crt.Spec.KeyAlgorithm {
-	case v1alpha1.KeyAlgorithm(""):
+	case v1alpha2.KeyAlgorithm(""):
 		// If keyAlgorithm is not specified, we default to rsa with keysize 2048
 		pubKeyAlgo = x509.RSA
 		sigAlgo = x509.SHA256WithRSA
-	case v1alpha1.RSAKeyAlgorithm:
+	case v1alpha2.RSAKeyAlgorithm:
 		pubKeyAlgo = x509.RSA
 		switch {
 		case crt.Spec.KeySize >= 4096:
@@ -399,7 +399,7 @@ func SignatureAlgorithm(crt *v1alpha1.Certificate) (x509.PublicKeyAlgorithm, x50
 		default:
 			return x509.UnknownPublicKeyAlgorithm, x509.UnknownSignatureAlgorithm, fmt.Errorf("unsupported rsa keysize specified: %d. min keysize %d", crt.Spec.KeySize, MinRSAKeySize)
 		}
-	case v1alpha1.ECDSAKeyAlgorithm:
+	case v1alpha2.ECDSAKeyAlgorithm:
 		pubKeyAlgo = x509.ECDSA
 		switch crt.Spec.KeySize {
 		case 521:
diff --git a/pkg/util/pki/csr_test.go b/pkg/util/pki/csr_test.go
index 1d4476959..d70c7a71d 100644
--- a/pkg/util/pki/csr_test.go
+++ b/pkg/util/pki/csr_test.go
@@ -21,13 +21,13 @@ import (
 	"reflect"
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 )
 
-func buildCertificate(cn string, dnsNames ...string) *v1alpha1.Certificate {
-	return &v1alpha1.Certificate{
-		Spec: v1alpha1.CertificateSpec{
+func buildCertificate(cn string, dnsNames ...string) *v1alpha2.Certificate {
+	return &v1alpha2.Certificate{
+		Spec: v1alpha2.CertificateSpec{
 			CommonName: cn,
 			DNSNames:   dnsNames,
 		},
@@ -37,7 +37,7 @@ func buildCertificate(cn string, dnsNames ...string) *v1alpha1.Certificate {
 func TestBuildUsages(t *testing.T) {
 	type testT struct {
 		name                string
-		usages              []v1alpha1.KeyUsage
+		usages              []v1alpha2.KeyUsage
 		isCa                bool
 		expectedKeyUsage    x509.KeyUsage
 		expectedExtKeyUsage []x509.ExtKeyUsage
@@ -46,43 +46,43 @@ func TestBuildUsages(t *testing.T) {
 	tests := []testT{
 		{
 			name:             "default",
-			usages:           []v1alpha1.KeyUsage{},
+			usages:           []v1alpha2.KeyUsage{},
 			expectedKeyUsage: x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment,
 			expectedError:    false,
 		},
 		{
 			name:             "isCa",
-			usages:           []v1alpha1.KeyUsage{},
+			usages:           []v1alpha2.KeyUsage{},
 			isCa:             true,
 			expectedKeyUsage: x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment | x509.KeyUsageCertSign,
 			expectedError:    false,
 		},
 		{
 			name:             "existing keyusage",
-			usages:           []v1alpha1.KeyUsage{"crl sign"},
+			usages:           []v1alpha2.KeyUsage{"crl sign"},
 			expectedKeyUsage: x509.KeyUsageCRLSign,
 			expectedError:    false,
 		},
 		{
 			name:          "nonexisting keyusage error",
-			usages:        []v1alpha1.KeyUsage{"nonexistant"},
+			usages:        []v1alpha2.KeyUsage{"nonexistant"},
 			expectedError: true,
 		},
 		{
 			name:             "duplicate keyusage",
-			usages:           []v1alpha1.KeyUsage{"signing", "signing"},
+			usages:           []v1alpha2.KeyUsage{"signing", "signing"},
 			expectedKeyUsage: x509.KeyUsageDigitalSignature,
 			expectedError:    false,
 		},
 		{
 			name:                "existing extkeyusage",
-			usages:              []v1alpha1.KeyUsage{"server auth"},
+			usages:              []v1alpha2.KeyUsage{"server auth"},
 			expectedExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},
 			expectedError:       false,
 		},
 		{
 			name:                "duplicate extkeyusage",
-			usages:              []v1alpha1.KeyUsage{"s/mime", "s/mime"},
+			usages:              []v1alpha2.KeyUsage{"s/mime", "s/mime"},
 			expectedExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageEmailProtection, x509.ExtKeyUsageEmailProtection},
 			expectedError:       false,
 		},
@@ -218,7 +218,7 @@ func TestDNSNamesForCertificate(t *testing.T) {
 func TestSignatureAlgorithmForCertificate(t *testing.T) {
 	type testT struct {
 		name            string
-		keyAlgo         v1alpha1.KeyAlgorithm
+		keyAlgo         v1alpha2.KeyAlgorithm
 		keySize         int
 		expectErr       bool
 		expectedSigAlgo x509.SignatureAlgorithm
@@ -228,79 +228,79 @@ func TestSignatureAlgorithmForCertificate(t *testing.T) {
 	tests := []testT{
 		{
 			name:      "certificate with KeyAlgorithm rsa and size 1024",
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			keySize:   1024,
 			expectErr: true,
 		},
 		{
 			name:            "certificate with KeyAlgorithm rsa and no size set should default to rsa256",
-			keyAlgo:         v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.RSAKeyAlgorithm,
 			expectedSigAlgo: x509.SHA256WithRSA,
 			expectedKeyType: x509.RSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm not set",
-			keyAlgo:         v1alpha1.KeyAlgorithm(""),
+			keyAlgo:         v1alpha2.KeyAlgorithm(""),
 			expectedSigAlgo: x509.SHA256WithRSA,
 			expectedKeyType: x509.RSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm rsa and size 2048",
-			keyAlgo:         v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.RSAKeyAlgorithm,
 			keySize:         2048,
 			expectedSigAlgo: x509.SHA256WithRSA,
 			expectedKeyType: x509.RSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm rsa and size 3072",
-			keyAlgo:         v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.RSAKeyAlgorithm,
 			keySize:         3072,
 			expectedSigAlgo: x509.SHA384WithRSA,
 			expectedKeyType: x509.RSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm rsa and size 4096",
-			keyAlgo:         v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.RSAKeyAlgorithm,
 			keySize:         4096,
 			expectedSigAlgo: x509.SHA512WithRSA,
 			expectedKeyType: x509.RSA,
 		},
 		{
 			name:            "certificate with ecdsa key algorithm set and no key size default to ecdsa256",
-			keyAlgo:         v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.ECDSAKeyAlgorithm,
 			expectedSigAlgo: x509.ECDSAWithSHA256,
 			expectedKeyType: x509.ECDSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm ecdsa and size 256",
-			keyAlgo:         v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.ECDSAKeyAlgorithm,
 			keySize:         256,
 			expectedSigAlgo: x509.ECDSAWithSHA256,
 			expectedKeyType: x509.ECDSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm ecdsa and size 384",
-			keyAlgo:         v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.ECDSAKeyAlgorithm,
 			keySize:         384,
 			expectedSigAlgo: x509.ECDSAWithSHA384,
 			expectedKeyType: x509.ECDSA,
 		},
 		{
 			name:            "certificate with KeyAlgorithm ecdsa and size 521",
-			keyAlgo:         v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:         v1alpha2.ECDSAKeyAlgorithm,
 			keySize:         521,
 			expectedSigAlgo: x509.ECDSAWithSHA512,
 			expectedKeyType: x509.ECDSA,
 		},
 		{
 			name:      "certificate with KeyAlgorithm ecdsa and size 100",
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			keySize:   100,
 			expectErr: true,
 		},
 		{
 			name:      "certificate with KeyAlgorithm set to unknown key algo",
-			keyAlgo:   v1alpha1.KeyAlgorithm("blah"),
+			keyAlgo:   v1alpha2.KeyAlgorithm("blah"),
 			expectErr: true,
 		},
 	}
diff --git a/pkg/util/pki/generate.go b/pkg/util/pki/generate.go
index b589f3573..00a74d615 100644
--- a/pkg/util/pki/generate.go
+++ b/pkg/util/pki/generate.go
@@ -26,7 +26,7 @@ import (
 	"encoding/pem"
 	"fmt"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
 const (
@@ -50,9 +50,9 @@ const (
 // the provided cert-manager Certificate resource, taking into account the
 // parameters on the provided resource.
 // The returned key will either be RSA or ECDSA.
-func GeneratePrivateKeyForCertificate(crt *v1alpha1.Certificate) (crypto.Signer, error) {
+func GeneratePrivateKeyForCertificate(crt *v1alpha2.Certificate) (crypto.Signer, error) {
 	switch crt.Spec.KeyAlgorithm {
-	case v1alpha1.KeyAlgorithm(""), v1alpha1.RSAKeyAlgorithm:
+	case v1alpha2.KeyAlgorithm(""), v1alpha2.RSAKeyAlgorithm:
 		keySize := MinRSAKeySize
 
 		if crt.Spec.KeySize > 0 {
@@ -60,7 +60,7 @@ func GeneratePrivateKeyForCertificate(crt *v1alpha1.Certificate) (crypto.Signer,
 		}
 
 		return GenerateRSAPrivateKey(keySize)
-	case v1alpha1.ECDSAKeyAlgorithm:
+	case v1alpha2.ECDSAKeyAlgorithm:
 		keySize := ECCurve256
 
 		if crt.Spec.KeySize > 0 {
@@ -110,9 +110,9 @@ func GenerateECPrivateKey(keySize int) (*ecdsa.PrivateKey, error) {
 // EncodePrivateKey will encode a given crypto.PrivateKey by first inspecting
 // the type of key encoding and then inspecting the type of key provided.
 // It only supports encoding RSA or ECDSA keys.
-func EncodePrivateKey(pk crypto.PrivateKey, keyEncoding v1alpha1.KeyEncoding) ([]byte, error) {
+func EncodePrivateKey(pk crypto.PrivateKey, keyEncoding v1alpha2.KeyEncoding) ([]byte, error) {
 	switch keyEncoding {
-	case v1alpha1.KeyEncoding(""), v1alpha1.PKCS1:
+	case v1alpha2.KeyEncoding(""), v1alpha2.PKCS1:
 		switch k := pk.(type) {
 		case *rsa.PrivateKey:
 			return EncodePKCS1PrivateKey(k), nil
@@ -121,7 +121,7 @@ func EncodePrivateKey(pk crypto.PrivateKey, keyEncoding v1alpha1.KeyEncoding) ([
 		default:
 			return nil, fmt.Errorf("error encoding private key: unknown key type: %T", pk)
 		}
-	case v1alpha1.PKCS8:
+	case v1alpha2.PKCS8:
 		return EncodePKCS8PrivateKey(pk)
 	default:
 		return nil, fmt.Errorf("error encoding private key: unknown key encoding: %s", keyEncoding)
diff --git a/pkg/util/pki/generate_test.go b/pkg/util/pki/generate_test.go
index adc649f1c..c86eb8e4e 100644
--- a/pkg/util/pki/generate_test.go
+++ b/pkg/util/pki/generate_test.go
@@ -30,12 +30,12 @@ import (
 	"testing"
 	"time"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func buildCertificateWithKeyParams(keyAlgo v1alpha1.KeyAlgorithm, keySize int) *v1alpha1.Certificate {
-	return &v1alpha1.Certificate{
-		Spec: v1alpha1.CertificateSpec{
+func buildCertificateWithKeyParams(keyAlgo v1alpha2.KeyAlgorithm, keySize int) *v1alpha2.Certificate {
+	return &v1alpha2.Certificate{
+		Spec: v1alpha2.CertificateSpec{
 			CommonName:   "test",
 			DNSNames:     []string{"test.test"},
 			KeyAlgorithm: keyAlgo,
@@ -60,7 +60,7 @@ func ecCurveForKeySize(keySize int) (elliptic.Curve, error) {
 func TestGeneratePrivateKeyForCertificate(t *testing.T) {
 	type testT struct {
 		name         string
-		keyAlgo      v1alpha1.KeyAlgorithm
+		keyAlgo      v1alpha2.KeyAlgorithm
 		keySize      int
 		expectErr    bool
 		expectErrStr string
@@ -69,76 +69,76 @@ func TestGeneratePrivateKeyForCertificate(t *testing.T) {
 	tests := []testT{
 		{
 			name:         "rsa key with weak keysize (< 2048)",
-			keyAlgo:      v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:      v1alpha2.RSAKeyAlgorithm,
 			keySize:      1024,
 			expectErr:    true,
 			expectErrStr: "weak rsa key size specified",
 		},
 		{
 			name:         "rsa key with too big keysize (> 8192)",
-			keyAlgo:      v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:      v1alpha2.RSAKeyAlgorithm,
 			keySize:      8196,
 			expectErr:    true,
 			expectErrStr: "rsa key size specified too big",
 		},
 		{
 			name:         "ecdsa key with unsupported keysize",
-			keyAlgo:      v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:      v1alpha2.ECDSAKeyAlgorithm,
 			keySize:      100,
 			expectErr:    true,
 			expectErrStr: "unsupported ecdsa key size specified",
 		},
 		{
 			name:         "unsupported key algo specified",
-			keyAlgo:      v1alpha1.KeyAlgorithm("blahblah"),
+			keyAlgo:      v1alpha2.KeyAlgorithm("blahblah"),
 			keySize:      256,
 			expectErr:    true,
 			expectErrStr: "unsupported private key algorithm specified",
 		},
 		{
 			name:      "rsa key with keysize 2048",
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			keySize:   2048,
 			expectErr: false,
 		},
 		{
 			name:      "rsa key with keysize 4096",
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			keySize:   4096,
 			expectErr: false,
 		},
 		{
 			name:      "ecdsa key with keysize 256",
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			keySize:   256,
 			expectErr: false,
 		},
 		{
 			name:      "ecdsa key with keysize 384",
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			keySize:   384,
 			expectErr: false,
 		},
 		{
 			name:      "ecdsa key with keysize 521",
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			keySize:   521,
 			expectErr: false,
 		},
 		{
 			name:      "valid key size with key algorithm not specified",
-			keyAlgo:   v1alpha1.KeyAlgorithm(""),
+			keyAlgo:   v1alpha2.KeyAlgorithm(""),
 			keySize:   2048,
 			expectErr: false,
 		},
 		{
 			name:      "rsa with keysize not specified",
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			expectErr: false,
 		},
 		{
 			name:      "ecdsa with keysize not specified",
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			expectErr: false,
 		},
 	}
@@ -241,7 +241,7 @@ func signTestCert(key crypto.Signer) *x509.Certificate {
 			CommonName:   commonName,
 		},
 		NotBefore: time.Now(),
-		NotAfter:  time.Now().Add(v1alpha1.DefaultCertificateDuration),
+		NotAfter:  time.Now().Add(v1alpha2.DefaultCertificateDuration),
 		// see http://golang.org/pkg/crypto/x509/#KeyUsage
 		KeyUsage: x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment,
 	}
@@ -341,7 +341,7 @@ func TestPrivateKeyEncodings(t *testing.T) {
 	type testT struct {
 		name         string
 		key          []byte
-		keyEncoding  v1alpha1.KeyEncoding
+		keyEncoding  v1alpha2.KeyEncoding
 		expectErr    bool
 		expectErrStr string
 	}
@@ -381,19 +381,19 @@ O7WnDn8nuLFdW+NzzbIrTw==
 		{
 			name:        "rsa 2048 private key with empty key encoding",
 			key:         privateKeyBytes,
-			keyEncoding: v1alpha1.PKCS1,
+			keyEncoding: v1alpha2.PKCS1,
 			expectErr:   false,
 		},
 		{
 			name:        "rsa 2048 private key with pkcs1 key encoding",
 			key:         privateKeyBytes,
-			keyEncoding: v1alpha1.PKCS1,
+			keyEncoding: v1alpha2.PKCS1,
 			expectErr:   false,
 		},
 		{
 			name:        "rsa 2048 private key with pkcs8 key encoding",
 			key:         privateKeyBytes,
-			keyEncoding: v1alpha1.PKCS8,
+			keyEncoding: v1alpha2.PKCS8,
 			expectErr:   false,
 		},
 	}
@@ -423,16 +423,16 @@ O7WnDn8nuLFdW+NzzbIrTw==
 				}
 
 				expectedEncoding := test.keyEncoding
-				actualEncoding := v1alpha1.KeyEncoding("")
+				actualEncoding := v1alpha2.KeyEncoding("")
 				block, _ := pem.Decode(encodedKey)
 
 				switch block.Type {
 				case "PRIVATE KEY":
-					actualEncoding = v1alpha1.PKCS8
+					actualEncoding = v1alpha2.PKCS8
 				case "RSA PRIVATE KEY":
-					actualEncoding = v1alpha1.PKCS1
+					actualEncoding = v1alpha2.PKCS1
 				case "EC PRIVATE KEY":
-					actualEncoding = v1alpha1.PKCS1
+					actualEncoding = v1alpha2.PKCS1
 				default:
 					err := "unknown key encoding for private key"
 					t.Errorf("%s", err)
diff --git a/pkg/util/pki/parse_test.go b/pkg/util/pki/parse_test.go
index ea986246f..fffdd0a56 100644
--- a/pkg/util/pki/parse_test.go
+++ b/pkg/util/pki/parse_test.go
@@ -23,10 +23,10 @@ import (
 	"strings"
 	"testing"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-func generatePrivateKeyBytes(keyAlgo v1alpha1.KeyAlgorithm, keySize int) ([]byte, error) {
+func generatePrivateKeyBytes(keyAlgo v1alpha2.KeyAlgorithm, keySize int) ([]byte, error) {
 	cert := buildCertificateWithKeyParams(keyAlgo, keySize)
 	privateKey, err := GeneratePrivateKeyForCertificate(cert)
 	if err != nil {
@@ -36,7 +36,7 @@ func generatePrivateKeyBytes(keyAlgo v1alpha1.KeyAlgorithm, keySize int) ([]byte
 	return EncodePrivateKey(privateKey, cert.Spec.KeyEncoding)
 }
 
-func generatePKCS8PrivateKey(keyAlgo v1alpha1.KeyAlgorithm, keySize int) ([]byte, error) {
+func generatePKCS8PrivateKey(keyAlgo v1alpha2.KeyAlgorithm, keySize int) ([]byte, error) {
 	privateKey, err := GeneratePrivateKeyForCertificate(buildCertificateWithKeyParams(keyAlgo, keySize))
 	if err != nil {
 		return nil, err
@@ -48,30 +48,30 @@ func TestDecodePrivateKeyBytes(t *testing.T) {
 	type testT struct {
 		name         string
 		keyBytes     []byte
-		keyAlgo      v1alpha1.KeyAlgorithm
+		keyAlgo      v1alpha2.KeyAlgorithm
 		expectErr    bool
 		expectErrStr string
 	}
 
-	rsaKeyBytes, err := generatePrivateKeyBytes(v1alpha1.RSAKeyAlgorithm, MinRSAKeySize)
+	rsaKeyBytes, err := generatePrivateKeyBytes(v1alpha2.RSAKeyAlgorithm, MinRSAKeySize)
 	if err != nil {
 		t.Errorf("error generating key bytes: %s", err)
 		return
 	}
 
-	pkcs8RsaKeyBytes, err := generatePKCS8PrivateKey(v1alpha1.RSAKeyAlgorithm, MinRSAKeySize)
+	pkcs8RsaKeyBytes, err := generatePKCS8PrivateKey(v1alpha2.RSAKeyAlgorithm, MinRSAKeySize)
 	if err != nil {
 		t.Errorf("error generating key bytes: %s", err)
 		return
 	}
 
-	ecdsaKeyBytes, err := generatePrivateKeyBytes(v1alpha1.ECDSAKeyAlgorithm, 256)
+	ecdsaKeyBytes, err := generatePrivateKeyBytes(v1alpha2.ECDSAKeyAlgorithm, 256)
 	if err != nil {
 		t.Errorf("error generating key bytes: %s", err)
 		return
 	}
 
-	pkcs8EcdsaKeyBytes, err := generatePKCS8PrivateKey(v1alpha1.ECDSAKeyAlgorithm, 256)
+	pkcs8EcdsaKeyBytes, err := generatePKCS8PrivateKey(v1alpha2.ECDSAKeyAlgorithm, 256)
 	if err != nil {
 		t.Errorf("error generating key bytes: %s", err)
 		return
@@ -89,25 +89,25 @@ func TestDecodePrivateKeyBytes(t *testing.T) {
 		{
 			name:      "decode pem encoded rsa private key bytes",
 			keyBytes:  rsaKeyBytes,
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			expectErr: false,
 		},
 		{
 			name:      "decode pkcs#8 encoded rsa private key bytes",
 			keyBytes:  pkcs8RsaKeyBytes,
-			keyAlgo:   v1alpha1.RSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.RSAKeyAlgorithm,
 			expectErr: false,
 		},
 		{
 			name:      "decode pem encoded ecdsa private key bytes",
 			keyBytes:  ecdsaKeyBytes,
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			expectErr: false,
 		},
 		{
 			name:      "decode pkcs#8 encoded ecdsa private key bytes",
 			keyBytes:  pkcs8EcdsaKeyBytes,
-			keyAlgo:   v1alpha1.ECDSAKeyAlgorithm,
+			keyAlgo:   v1alpha2.ECDSAKeyAlgorithm,
 			expectErr: false,
 		},
 		{
@@ -151,7 +151,7 @@ func TestDecodePrivateKeyBytes(t *testing.T) {
 					return
 				}
 
-				if test.keyAlgo == v1alpha1.RSAKeyAlgorithm {
+				if test.keyAlgo == v1alpha2.RSAKeyAlgorithm {
 					_, ok := privateKey.(*rsa.PrivateKey)
 					if !ok {
 						t.Errorf("expected rsa private key, but got %T", privateKey)
@@ -159,7 +159,7 @@ func TestDecodePrivateKeyBytes(t *testing.T) {
 					}
 				}
 
-				if test.keyAlgo == v1alpha1.ECDSAKeyAlgorithm {
+				if test.keyAlgo == v1alpha2.ECDSAKeyAlgorithm {
 					_, ok := privateKey.(*ecdsa.PrivateKey)
 					if !ok {
 						t.Errorf("expected ecdsa private key, but got %T", privateKey)
diff --git a/pkg/webhook/handlers/mutation_test.go b/pkg/webhook/handlers/mutation_test.go
index 3d9549231..4b2553e75 100644
--- a/pkg/webhook/handlers/mutation_test.go
+++ b/pkg/webhook/handlers/mutation_test.go
@@ -54,7 +54,7 @@ func TestDefaultCertificate(t *testing.T) {
 	klog.InitFlags(flag.CommandLine)
 	c := NewSchemeBackedDefaulter(log, testgroup.GroupName, scheme)
 	tests := map[string]testT{
-		"convert Certificate from v1alpha1 to v1beta1": {
+		"apply defaults to TestType": {
 			inputRequest: admissionv1beta1.AdmissionRequest{
 				Object: runtime.RawExtension{
 					Raw: []byte(`
diff --git a/test/e2e/framework/BUILD.bazel b/test/e2e/framework/BUILD.bazel
index 6c4e8db9c..792c25d94 100644
--- a/test/e2e/framework/BUILD.bazel
+++ b/test/e2e/framework/BUILD.bazel
@@ -12,7 +12,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/client/clientset/versioned/scheme:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/apiservice.yaml b/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/apiservice.yaml
index 504ab914b..73a7c94a9 100644
--- a/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/apiservice.yaml
+++ b/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/apiservice.yaml
@@ -1,7 +1,7 @@
 apiVersion: apiregistration.k8s.io/v1beta1
 kind: APIService
 metadata:
-  name: v1alpha1.{{ .Values.groupName }}
+  name: v1alpha2.{{ .Values.groupName }}
   labels:
     app: {{ include "example-webhook.name" . }}
     chart: {{ include "example-webhook.chart" . }}
@@ -16,4 +16,4 @@ spec:
   service:
     name: {{ include "example-webhook.fullname" . }}
     namespace: {{ .Release.Namespace }}
-  version: v1alpha1
+  version: v1alpha2
diff --git a/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/pki.yaml b/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/pki.yaml
index 89b6a23cc..35de282d0 100644
--- a/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/pki.yaml
+++ b/test/e2e/framework/addon/samplewebhook/sample/chart/example-webhook/templates/pki.yaml
@@ -1,7 +1,7 @@
 ---
 # Create a selfsigned Issuer, in order to create a root CA certificate for
 # signing webhook serving certificates
-apiVersion: certmanager.k8s.io/v1alpha1
+apiVersion: certmanager.k8s.io/v1alpha2
 kind: Issuer
 metadata:
   name: {{ include "example-webhook.selfSignedIssuer" . }}
@@ -17,7 +17,7 @@ spec:
 ---
 
 # Generate a CA Certificate used to sign certificates for the webhook
-apiVersion: certmanager.k8s.io/v1alpha1
+apiVersion: certmanager.k8s.io/v1alpha2
 kind: Certificate
 metadata:
   name: {{ include "example-webhook.rootCACertificate" . }}
@@ -38,7 +38,7 @@ spec:
 ---
 
 # Create an Issuer that uses the above generated CA certificate to issue certs
-apiVersion: certmanager.k8s.io/v1alpha1
+apiVersion: certmanager.k8s.io/v1alpha2
 kind: Issuer
 metadata:
   name: {{ include "example-webhook.rootCAIssuer" . }}
@@ -55,7 +55,7 @@ spec:
 ---
 
 # Finally, generate a serving certificate for the webhook to use
-apiVersion: certmanager.k8s.io/v1alpha1
+apiVersion: certmanager.k8s.io/v1alpha2
 kind: Certificate
 metadata:
   name: {{ include "example-webhook.servingCertificate" . }}
diff --git a/test/e2e/framework/addon/samplewebhook/sample/main.go b/test/e2e/framework/addon/samplewebhook/sample/main.go
index 6476733e4..0297ebb81 100644
--- a/test/e2e/framework/addon/samplewebhook/sample/main.go
+++ b/test/e2e/framework/addon/samplewebhook/sample/main.go
@@ -81,7 +81,7 @@ type customDNSProviderConfig struct {
 	// `issuer.spec.acme.dns01.providers.webhook.config` field.
 
 	//Email           string `json:"email"`
-	//APIKeySecretRef v1alpha1.SecretKeySelector `json:"apiKeySecretRef"`
+	//APIKeySecretRef v1alpha2.SecretKeySelector `json:"apiKeySecretRef"`
 }
 
 // Name is used as the name for this DNS solver when referencing it on the ACME
diff --git a/test/e2e/framework/framework.go b/test/e2e/framework/framework.go
index 0e07a0b84..d204fd8b9 100644
--- a/test/e2e/framework/framework.go
+++ b/test/e2e/framework/framework.go
@@ -34,7 +34,7 @@ import (
 	apireg "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1beta1"
 	crclient "sigs.k8s.io/controller-runtime/pkg/client"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	certmgrscheme "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/scheme"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
@@ -232,7 +232,7 @@ func (f *Framework) Helper() *helper.Helper {
 	return f.helper
 }
 
-func (f *Framework) CertificateDurationValid(c *v1alpha1.Certificate, duration time.Duration) {
+func (f *Framework) CertificateDurationValid(c *v1alpha2.Certificate, duration time.Duration) {
 	By("Verifying TLS certificate exists")
 	secret, err := f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Get(c.Spec.SecretName, metav1.GetOptions{})
 	Expect(err).NotTo(HaveOccurred())
@@ -248,7 +248,7 @@ func (f *Framework) CertificateDurationValid(c *v1alpha1.Certificate, duration t
 	}
 }
 
-func (f *Framework) CertificateRequestDurationValid(c *v1alpha1.CertificateRequest, duration time.Duration) {
+func (f *Framework) CertificateRequestDurationValid(c *v1alpha2.CertificateRequest, duration time.Duration) {
 	By("Verifying TLS certificate exists")
 	if len(c.Status.Certificate) == 0 {
 		Failf("No certificate data found for CertificateRequest %s", c.Name)
diff --git a/test/e2e/framework/helper/BUILD.bazel b/test/e2e/framework/helper/BUILD.bazel
index 5f32ffad4..c55de13e8 100644
--- a/test/e2e/framework/helper/BUILD.bazel
+++ b/test/e2e/framework/helper/BUILD.bazel
@@ -14,7 +14,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/util:go_default_library",
         "//pkg/util/pki:go_default_library",
diff --git a/test/e2e/framework/helper/certificaterequests.go b/test/e2e/framework/helper/certificaterequests.go
index b8af28a7e..524f8d84e 100644
--- a/test/e2e/framework/helper/certificaterequests.go
+++ b/test/e2e/framework/helper/certificaterequests.go
@@ -29,7 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/wait"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 	"github.com/jetstack/cert-manager/test/e2e/framework/log"
@@ -37,19 +37,19 @@ import (
 
 // WaitForCertificateRequestReady waits for the CertificateRequest resource to
 // enter a Ready state.
-func (h *Helper) WaitForCertificateRequestReady(ns, name string, timeout time.Duration) (*v1alpha1.CertificateRequest, error) {
-	var cr *v1alpha1.CertificateRequest
+func (h *Helper) WaitForCertificateRequestReady(ns, name string, timeout time.Duration) (*v1alpha2.CertificateRequest, error) {
+	var cr *v1alpha2.CertificateRequest
 	err := wait.PollImmediate(time.Second, timeout,
 		func() (bool, error) {
 			var err error
 			log.Logf("Waiting for CertificateRequest %s to be ready", name)
-			cr, err = h.CMClient.CertmanagerV1alpha1().CertificateRequests(ns).Get(name, metav1.GetOptions{})
+			cr, err = h.CMClient.CertmanagerV1alpha2().CertificateRequests(ns).Get(name, metav1.GetOptions{})
 			if err != nil {
 				return false, fmt.Errorf("error getting CertificateRequest %s: %v", name, err)
 			}
-			isReady := apiutil.CertificateRequestHasCondition(cr, v1alpha1.CertificateRequestCondition{
-				Type:   v1alpha1.CertificateRequestConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			isReady := apiutil.CertificateRequestHasCondition(cr, v1alpha2.CertificateRequestCondition{
+				Type:   v1alpha2.CertificateRequestConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 			if !isReady {
 				log.Logf("Expected CertificateReques to have Ready condition 'true' but it has: %v", cr.Status.Conditions)
@@ -70,7 +70,7 @@ func (h *Helper) WaitForCertificateRequestReady(ns, name string, timeout time.Du
 // CertificateRequest has a certificate issued for it, and that the details on
 // the x509 certificate are correct as defined by the CertificateRequest's
 // spec.
-func (h *Helper) ValidateIssuedCertificateRequest(cr *v1alpha1.CertificateRequest, key crypto.Signer, rootCAPEM []byte) (*x509.Certificate, error) {
+func (h *Helper) ValidateIssuedCertificateRequest(cr *v1alpha2.CertificateRequest, key crypto.Signer, rootCAPEM []byte) (*x509.Certificate, error) {
 	csr, err := pki.DecodeX509CertificateRequestBytes(cr.Spec.CSRPEM)
 	if err != nil {
 		return nil, fmt.Errorf("failed to decode CertificateRequest's Spec.CSRPEM: %s", err)
@@ -121,7 +121,7 @@ func (h *Helper) ValidateIssuedCertificateRequest(cr *v1alpha1.CertificateReques
 		expectedDNSName = expectedDNSNames[0]
 	}
 
-	usages := make(map[v1alpha1.KeyUsage]bool)
+	usages := make(map[v1alpha2.KeyUsage]bool)
 	for _, u := range cr.Spec.Usages {
 		usages[u] = true
 	}
@@ -132,7 +132,7 @@ func (h *Helper) ValidateIssuedCertificateRequest(cr *v1alpha1.CertificateReques
 		if cert.KeyUsage&x509.KeyUsageCertSign == 0 {
 			return nil, fmt.Errorf("Expected csr cert to have x509.KeyUsageCertSign bit set but was not")
 		}
-		usages[v1alpha1.UsageCertSign] = true
+		usages[v1alpha2.UsageCertSign] = true
 	}
 
 	if len(cr.Spec.Usages) > 0 {
diff --git a/test/e2e/framework/helper/certificates.go b/test/e2e/framework/helper/certificates.go
index 436328b78..0689ef97f 100644
--- a/test/e2e/framework/helper/certificates.go
+++ b/test/e2e/framework/helper/certificates.go
@@ -29,7 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/wait"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 	"github.com/jetstack/cert-manager/test/e2e/framework/log"
@@ -37,19 +37,19 @@ import (
 
 // WaitForCertificateReady waits for the certificate resource to enter a Ready
 // state.
-func (h *Helper) WaitForCertificateReady(ns, name string, timeout time.Duration) (*v1alpha1.Certificate, error) {
-	var certificate *v1alpha1.Certificate
+func (h *Helper) WaitForCertificateReady(ns, name string, timeout time.Duration) (*v1alpha2.Certificate, error) {
+	var certificate *v1alpha2.Certificate
 	err := wait.PollImmediate(time.Second, timeout,
 		func() (bool, error) {
 			var err error
 			log.Logf("Waiting for Certificate %v to be ready", name)
-			certificate, err = h.CMClient.CertmanagerV1alpha1().Certificates(ns).Get(name, metav1.GetOptions{})
+			certificate, err = h.CMClient.CertmanagerV1alpha2().Certificates(ns).Get(name, metav1.GetOptions{})
 			if err != nil {
 				return false, fmt.Errorf("error getting Certificate %v: %v", name, err)
 			}
-			isReady := apiutil.CertificateHasCondition(certificate, v1alpha1.CertificateCondition{
-				Type:   v1alpha1.CertificateConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			isReady := apiutil.CertificateHasCondition(certificate, v1alpha2.CertificateCondition{
+				Type:   v1alpha2.CertificateConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 			if !isReady {
 				log.Logf("Expected Certificate to have Ready condition 'true' but it has: %v", certificate.Status.Conditions)
@@ -68,19 +68,19 @@ func (h *Helper) WaitForCertificateReady(ns, name string, timeout time.Duration)
 
 // WaitForCertificateNotReady waits for the certificate resource to enter a
 // non-Ready state.
-func (h *Helper) WaitForCertificateNotReady(ns, name string, timeout time.Duration) (*v1alpha1.Certificate, error) {
-	var certificate *v1alpha1.Certificate
+func (h *Helper) WaitForCertificateNotReady(ns, name string, timeout time.Duration) (*v1alpha2.Certificate, error) {
+	var certificate *v1alpha2.Certificate
 	err := wait.PollImmediate(time.Second, timeout,
 		func() (bool, error) {
 			var err error
 			log.Logf("Waiting for Certificate %v to be ready", name)
-			certificate, err = h.CMClient.CertmanagerV1alpha1().Certificates(ns).Get(name, metav1.GetOptions{})
+			certificate, err = h.CMClient.CertmanagerV1alpha2().Certificates(ns).Get(name, metav1.GetOptions{})
 			if err != nil {
 				return false, fmt.Errorf("error getting Certificate %v: %v", name, err)
 			}
-			isReady := apiutil.CertificateHasCondition(certificate, v1alpha1.CertificateCondition{
-				Type:   v1alpha1.CertificateConditionReady,
-				Status: v1alpha1.ConditionFalse,
+			isReady := apiutil.CertificateHasCondition(certificate, v1alpha2.CertificateCondition{
+				Type:   v1alpha2.CertificateConditionReady,
+				Status: v1alpha2.ConditionFalse,
 			})
 			if !isReady {
 				log.Logf("Expected Certificate to have Ready condition 'true' but it has: %v", certificate.Status.Conditions)
@@ -100,7 +100,7 @@ func (h *Helper) WaitForCertificateNotReady(ns, name string, timeout time.Durati
 // ValidateIssuedCertificate will ensure that the given Certificate has a
 // certificate issued for it, and that the details on the x509 certificate are
 // correct as defined by the Certificate's spec.
-func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha1.Certificate, rootCAPEM []byte) (*x509.Certificate, error) {
+func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha2.Certificate, rootCAPEM []byte) (*x509.Certificate, error) {
 	log.Logf("Getting the TLS certificate Secret resource")
 	secret, err := h.KubeClient.CoreV1().Secrets(certificate.Namespace).Get(certificate.Spec.SecretName, metav1.GetOptions{})
 	if err != nil {
@@ -121,13 +121,13 @@ func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha1.Certificate, ro
 
 	// validate private key is of the correct type (rsa or ecdsa)
 	switch certificate.Spec.KeyAlgorithm {
-	case v1alpha1.KeyAlgorithm(""),
-		v1alpha1.RSAKeyAlgorithm:
+	case v1alpha2.KeyAlgorithm(""),
+		v1alpha2.RSAKeyAlgorithm:
 		_, ok := key.(*rsa.PrivateKey)
 		if !ok {
 			return nil, fmt.Errorf("Expected private key of type RSA, but it was: %T", key)
 		}
-	case v1alpha1.ECDSAKeyAlgorithm:
+	case v1alpha2.ECDSAKeyAlgorithm:
 		_, ok := key.(*ecdsa.PrivateKey)
 		if !ok {
 			return nil, fmt.Errorf("Expected private key of type ECDSA, but it was: %T", key)
@@ -163,7 +163,7 @@ func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha1.Certificate, ro
 		return nil, fmt.Errorf("Expected certificate expiry date to be %v, but got %v", certificate.Status.NotAfter, cert.NotAfter)
 	}
 
-	label, ok := secret.Annotations[v1alpha1.CertificateNameKey]
+	label, ok := secret.Annotations[v1alpha2.CertificateNameKey]
 	if !ok {
 		return nil, fmt.Errorf("Expected secret to have certificate-name label, but had none")
 	}
@@ -172,7 +172,7 @@ func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha1.Certificate, ro
 		return nil, fmt.Errorf("Expected secret to have certificate-name label with a value of %q, but got %q", certificate.Name, label)
 	}
 
-	usages := make(map[v1alpha1.KeyUsage]bool)
+	usages := make(map[v1alpha2.KeyUsage]bool)
 	for _, u := range certificate.Spec.Usages {
 		usages[u] = true
 	}
@@ -183,7 +183,7 @@ func (h *Helper) ValidateIssuedCertificate(certificate *v1alpha1.Certificate, ro
 		if cert.KeyUsage&x509.KeyUsageCertSign == 0 {
 			return nil, fmt.Errorf("Expected secret to have x509.KeyUsageCertSign bit set but was not")
 		}
-		usages[v1alpha1.UsageCertSign] = true
+		usages[v1alpha2.UsageCertSign] = true
 	}
 
 	if len(certificate.Spec.Usages) > 0 {
diff --git a/test/e2e/framework/matcher/BUILD.bazel b/test/e2e/framework/matcher/BUILD.bazel
index 28cd04f60..493c0d1f0 100644
--- a/test/e2e/framework/matcher/BUILD.bazel
+++ b/test/e2e/framework/matcher/BUILD.bazel
@@ -7,7 +7,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//vendor/github.com/onsi/gomega/types:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
diff --git a/test/e2e/framework/matcher/have_condition_matcher.go b/test/e2e/framework/matcher/have_condition_matcher.go
index c22907fa3..2add98312 100644
--- a/test/e2e/framework/matcher/have_condition_matcher.go
+++ b/test/e2e/framework/matcher/have_condition_matcher.go
@@ -23,7 +23,7 @@ import (
 	"github.com/onsi/gomega/types"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 )
 
@@ -54,11 +54,11 @@ func toGenericCondition(c interface{}) (*genericCondition, error) {
 func (c *conditionMatcher) getUpToDateResource(obj interface{}) (interface{}, error) {
 	switch obj := obj.(type) {
 	case *cmapi.Certificate:
-		return c.f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
+		return c.f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
 	case *cmapi.Issuer:
-		return c.f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
+		return c.f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
 	case *cmapi.CertificateRequest:
-		return c.f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
+		return c.f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(obj.Namespace).Get(obj.Name, metav1.GetOptions{})
 	default:
 		return nil, fmt.Errorf("unsupported resource type %T", c)
 	}
diff --git a/test/e2e/suite/conformance/certificates/BUILD.bazel b/test/e2e/suite/conformance/certificates/BUILD.bazel
index eb8888123..97960c1b2 100644
--- a/test/e2e/suite/conformance/certificates/BUILD.bazel
+++ b/test/e2e/suite/conformance/certificates/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//vendor/github.com/onsi/ginkgo:go_default_library",
diff --git a/test/e2e/suite/conformance/certificates/acme/BUILD.bazel b/test/e2e/suite/conformance/certificates/acme/BUILD.bazel
index 95ac5326f..669941544 100644
--- a/test/e2e/suite/conformance/certificates/acme/BUILD.bazel
+++ b/test/e2e/suite/conformance/certificates/acme/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates/acme",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon/pebble:go_default_library",
         "//test/e2e/framework/addon/tiller:go_default_library",
diff --git a/test/e2e/suite/conformance/certificates/acme/acme.go b/test/e2e/suite/conformance/certificates/acme/acme.go
index b3a96fded..9cbb9bdee 100644
--- a/test/e2e/suite/conformance/certificates/acme/acme.go
+++ b/test/e2e/suite/conformance/certificates/acme/acme.go
@@ -21,7 +21,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/pebble"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
@@ -121,7 +121,7 @@ func (a *acmeIssuerProvisioner) create(f *framework.Framework) cmapi.ObjectRefer
 			},
 		},
 	}
-	issuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+	issuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 	Expect(err).NotTo(HaveOccurred(), "failed to create acme issuer")
 
 	return cmapi.ObjectReference{
diff --git a/test/e2e/suite/conformance/certificates/ca/BUILD.bazel b/test/e2e/suite/conformance/certificates/ca/BUILD.bazel
index abe5ee012..3ba1f6bf7 100644
--- a/test/e2e/suite/conformance/certificates/ca/BUILD.bazel
+++ b/test/e2e/suite/conformance/certificates/ca/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates/ca",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/suite/conformance/certificates:go_default_library",
         "//vendor/github.com/onsi/ginkgo:go_default_library",
diff --git a/test/e2e/suite/conformance/certificates/ca/ca.go b/test/e2e/suite/conformance/certificates/ca/ca.go
index 15a443f0d..0a8ee0622 100644
--- a/test/e2e/suite/conformance/certificates/ca/ca.go
+++ b/test/e2e/suite/conformance/certificates/ca/ca.go
@@ -22,7 +22,7 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates"
 )
@@ -39,7 +39,7 @@ func createCAIssuer(f *framework.Framework) cmapi.ObjectReference {
 	rootCertSecret, err := f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Create(newSigningKeypairSecret("root-cert"))
 	Expect(err).NotTo(HaveOccurred(), "failed to create root signing keypair secret")
 
-	issuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(&cmapi.Issuer{
+	issuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(&cmapi.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: "ca",
 		},
diff --git a/test/e2e/suite/conformance/certificates/selfsigned/BUILD.bazel b/test/e2e/suite/conformance/certificates/selfsigned/BUILD.bazel
index d4c06f3b2..00eba60fa 100644
--- a/test/e2e/suite/conformance/certificates/selfsigned/BUILD.bazel
+++ b/test/e2e/suite/conformance/certificates/selfsigned/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates/selfsigned",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/suite/conformance/certificates:go_default_library",
         "//vendor/github.com/onsi/ginkgo:go_default_library",
diff --git a/test/e2e/suite/conformance/certificates/selfsigned/selfsigned.go b/test/e2e/suite/conformance/certificates/selfsigned/selfsigned.go
index 82a3cf743..a3b994521 100644
--- a/test/e2e/suite/conformance/certificates/selfsigned/selfsigned.go
+++ b/test/e2e/suite/conformance/certificates/selfsigned/selfsigned.go
@@ -21,7 +21,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/suite/conformance/certificates"
 )
@@ -35,7 +35,7 @@ var _ = framework.ConformanceDescribe("Certificates", func() {
 
 func createSelfSignedIssuer(f *framework.Framework) cmapi.ObjectReference {
 	By("Creating a SelfSigned issuer")
-	_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(&cmapi.Issuer{
+	_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(&cmapi.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: "selfsigned",
 		},
diff --git a/test/e2e/suite/conformance/certificates/suite.go b/test/e2e/suite/conformance/certificates/suite.go
index c6b822256..fc5970b5a 100644
--- a/test/e2e/suite/conformance/certificates/suite.go
+++ b/test/e2e/suite/conformance/certificates/suite.go
@@ -25,7 +25,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 )
diff --git a/test/e2e/suite/issuers/acme/BUILD.bazel b/test/e2e/suite/issuers/acme/BUILD.bazel
index 2d63ec438..903954b86 100644
--- a/test/e2e/suite/issuers/acme/BUILD.bazel
+++ b/test/e2e/suite/issuers/acme/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon:go_default_library",
         "//test/e2e/framework/addon/pebble:go_default_library",
diff --git a/test/e2e/suite/issuers/acme/certificate/BUILD.bazel b/test/e2e/suite/issuers/acme/certificate/BUILD.bazel
index 8a16cc7db..a04d41051 100644
--- a/test/e2e/suite/issuers/acme/certificate/BUILD.bazel
+++ b/test/e2e/suite/issuers/acme/certificate/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework:go_default_library",
diff --git a/test/e2e/suite/issuers/acme/certificate/dns01.go b/test/e2e/suite/issuers/acme/certificate/dns01.go
index 9c2dcb089..86f23e6c1 100644
--- a/test/e2e/suite/issuers/acme/certificate/dns01.go
+++ b/test/e2e/suite/issuers/acme/certificate/dns01.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
 	"github.com/jetstack/cert-manager/test/e2e/suite/issuers/acme/dnsproviders"
@@ -66,36 +66,36 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 			By("Creating an Issuer")
 			issuer := gen.Issuer(issuerName,
-				gen.SetIssuerACME(v1alpha1.ACMEIssuer{
+				gen.SetIssuerACME(v1alpha2.ACMEIssuer{
 					SkipTLSVerify: true,
 					Server:        "https://acme-staging-v02.api.letsencrypt.org/directory",
 					Email:         testingACMEEmail,
-					PrivateKey: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{
+					PrivateKey: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{
 							Name: testingACMEPrivateKey,
 						},
 					},
-					Solvers: []v1alpha1.ACMEChallengeSolver{
+					Solvers: []v1alpha2.ACMEChallengeSolver{
 						{
 							DNS01: &p.Details().ProviderConfig,
 						},
 					},
 				}))
 			issuer.Namespace = f.Namespace.Name
-			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 			Expect(err).NotTo(HaveOccurred())
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the ACME account URI is set")
-			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				func(i *v1alpha1.Issuer) (bool, error) {
+				func(i *v1alpha2.Issuer) (bool, error) {
 					if i.GetStatus().ACMEStatus().URI == "" {
 						return false, nil
 					}
@@ -112,7 +112,7 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 		AfterEach(func() {
 			By("Cleaning up")
-			f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+			f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 			f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 			f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(certificateSecretName, nil)
 		})
@@ -120,11 +120,11 @@ func testDNSProvider(name string, p dns01Provider) bool {
 		It("should obtain a signed certificate for a regular domain", func() {
 			By("Creating a Certificate")
 
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			cert := gen.Certificate(certificateName,
 				gen.SetCertificateSecretName(certificateSecretName),
-				gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+				gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 				gen.SetCertificateDNSNames(dnsDomain),
 			)
 			cert.Namespace = f.Namespace.Name
@@ -140,12 +140,12 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 			cert := gen.Certificate(certificateName,
 				gen.SetCertificateSecretName(certificateSecretName),
-				gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+				gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 				gen.SetCertificateDNSNames("*."+dnsDomain),
 			)
 			cert.Namespace = f.Namespace.Name
 
-			cert, err := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name).Create(cert)
+			cert, err := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name).Create(cert)
 			Expect(err).NotTo(HaveOccurred())
 			err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*5)
 			Expect(err).NotTo(HaveOccurred())
@@ -156,12 +156,12 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 			cert := gen.Certificate(certificateName,
 				gen.SetCertificateSecretName(certificateSecretName),
-				gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+				gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 				gen.SetCertificateDNSNames("*."+dnsDomain, dnsDomain),
 			)
 			cert.Namespace = f.Namespace.Name
 
-			cert, err := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name).Create(cert)
+			cert, err := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name).Create(cert)
 			Expect(err).NotTo(HaveOccurred())
 			// use a longer timeout for this, as it requires performing 2 dns validations in serial
 			err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*10)
diff --git a/test/e2e/suite/issuers/acme/certificate/http01.go b/test/e2e/suite/issuers/acme/certificate/http01.go
index 0d827dd2e..8778dbf77 100644
--- a/test/e2e/suite/issuers/acme/certificate/http01.go
+++ b/test/e2e/suite/issuers/acme/certificate/http01.go
@@ -29,7 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/util/intstr"
 	"k8s.io/apimachinery/pkg/util/wait"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
@@ -82,42 +82,42 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	BeforeEach(func() {
 		acmeURL := pebble.Details().Host
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
-		acmeIssuer.Spec.ACME.Solvers = []v1alpha1.ACMEChallengeSolver{
+		acmeIssuer.Spec.ACME.Solvers = []v1alpha2.ACMEChallengeSolver{
 			{
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 						Class: &addon.NginxIngress.Details().IngressClass,
 					},
 				},
 			},
 			{
-				Selector: &v1alpha1.CertificateDNSNameSelector{
+				Selector: &v1alpha2.CertificateDNSNameSelector{
 					MatchLabels: map[string]string{
 						"testing.cert-manager.io/fixed-ingress": "true",
 					},
 				},
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 						Name: fixedIngressName,
 					},
 				},
 			},
 		}
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 		By("Verifying the ACME account URI is set")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				if i.GetStatus().ACMEStatus().URI == "" {
 					return false, nil
 				}
@@ -139,17 +139,17 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 	})
 
 	It("should obtain a signed certificate with a single CN from the ACME server", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(acmeIngressDomain),
 		)
 		cert.Namespace = f.Namespace.Name
@@ -162,16 +162,16 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	})
 
 	It("should obtain a signed ecdsa certificate with a single CN from the ACME server", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{
 				Name: issuerName,
 			}),
 			gen.SetCertificateDNSNames(acmeIngressDomain),
-			gen.SetCertificateKeyAlgorithm(v1alpha1.ECDSAKeyAlgorithm),
+			gen.SetCertificateKeyAlgorithm(v1alpha2.ECDSAKeyAlgorithm),
 		)
 		cert.Namespace = f.Namespace.Name
 		_, err := certClient.Create(cert)
@@ -182,7 +182,7 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	})
 
 	It("should obtain a signed certificate for a long domain using http01 validation", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		// the maximum length of a single segment of the domain being requested
 		const maxLengthOfDomainSegment = 63
@@ -191,7 +191,7 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(acmeIngressDomain, fmt.Sprintf("%s.%s", cmutil.RandStringRunes(maxLengthOfDomainSegment), acmeIngressDomain)),
 		)
 		cert.Namespace = f.Namespace.Name
@@ -203,12 +203,12 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	})
 
 	It("should obtain a signed certificate with a CN and single subdomain as dns name from the ACME server", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(fmt.Sprintf("%s.%s", cmutil.RandStringRunes(5), acmeIngressDomain)),
 		)
 		cert.Namespace = f.Namespace.Name
@@ -221,12 +221,12 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	})
 
 	It("should allow updating an existing certificate with a new dns name", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(fmt.Sprintf("%s.%s", cmutil.RandStringRunes(5), acmeIngressDomain)),
 		)
 		cert.Namespace = f.Namespace.Name
@@ -264,17 +264,17 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames("google.com"),
 		)
 		cert.Namespace = f.Namespace.Name
 
-		cert, err := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name).Create(cert)
+		cert, err := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name).Create(cert)
 		Expect(err).NotTo(HaveOccurred())
 
-		notReadyCondition := v1alpha1.CertificateCondition{
-			Type:   v1alpha1.CertificateConditionReady,
-			Status: v1alpha1.ConditionFalse,
+		notReadyCondition := v1alpha2.CertificateCondition{
+			Type:   v1alpha2.CertificateConditionReady,
+			Status: v1alpha2.ConditionFalse,
 		}
 		Eventually(cert, "30s", "1s").Should(HaveCondition(f, notReadyCondition))
 		Consistently(cert, "1m", "10s").Should(HaveCondition(f, notReadyCondition))
@@ -282,7 +282,7 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 
 	It("should obtain a signed certificate with a single CN from the ACME server when putting an annotation on an ingress resource", func() {
 		ingClient := f.KubeClientSet.ExtensionsV1beta1().Ingresses(f.Namespace.Name)
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating an Ingress with the issuer name annotation set")
 		_, err := ingClient.Create(util.NewIngress(certificateSecretName, certificateSecretName, map[string]string{
@@ -301,27 +301,27 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 
 	It("should obtain a signed certificate with a single CN from the ACME server when redirected", func() {
 
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		// force-ssl-redirect should make every request turn into a redirect,
 		// but I haven't been able to make this happen. Create a TLS cert via
 		// the self-sign issuer to make it have a "proper" TLS cert
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer("selfsign"))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer("selfsign"))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for (self-sign) Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		const dummycert = "dummy-tls"
 		const secretname = "dummy-tls-secret"
 
-		selfcert := util.NewCertManagerBasicCertificate("dummy-tls", secretname, "selfsign", v1alpha1.IssuerKind, nil, nil, acmeIngressDomain)
+		selfcert := util.NewCertManagerBasicCertificate("dummy-tls", secretname, "selfsign", v1alpha2.IssuerKind, nil, nil, acmeIngressDomain)
 		_, err = certClient.Create(selfcert)
 		Expect(err).NotTo(HaveOccurred())
 		err = h.WaitCertificateIssuedValid(f.Namespace.Name, dummycert, time.Minute*5)
@@ -373,7 +373,7 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(acmeIngressDomain),
 		)
 		cert.Namespace = f.Namespace.Name
@@ -390,12 +390,12 @@ var _ = framework.CertManagerDescribe("ACME Certificate (HTTP01)", func() {
 	})
 
 	It("should automatically recreate challenge pod and still obtain a certificate if it is manually deleted", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		By("Creating a Certificate")
 		cert := gen.Certificate(certificateName,
 			gen.SetCertificateSecretName(certificateSecretName),
-			gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+			gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 			gen.SetCertificateDNSNames(acmeIngressDomain),
 		)
 		cert.Namespace = f.Namespace.Name
diff --git a/test/e2e/suite/issuers/acme/certificate/webhook.go b/test/e2e/suite/issuers/acme/certificate/webhook.go
index 470c68234..354030092 100644
--- a/test/e2e/suite/issuers/acme/certificate/webhook.go
+++ b/test/e2e/suite/issuers/acme/certificate/webhook.go
@@ -25,7 +25,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/wait"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/client/clientset/versioned"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
@@ -79,19 +79,19 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 
 			By("Creating an Issuer")
 			issuer := gen.Issuer(issuerName,
-				gen.SetIssuerACME(v1alpha1.ACMEIssuer{
+				gen.SetIssuerACME(v1alpha2.ACMEIssuer{
 					SkipTLSVerify: true,
 					Server:        pebble.Details().Host,
 					Email:         testingACMEEmail,
-					PrivateKey: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{
+					PrivateKey: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{
 							Name: testingACMEPrivateKey,
 						},
 					},
-					Solvers: []v1alpha1.ACMEChallengeSolver{
+					Solvers: []v1alpha2.ACMEChallengeSolver{
 						{
-							DNS01: &v1alpha1.ACMEChallengeSolverDNS01{
-								Webhook: &v1alpha1.ACMEIssuerDNS01ProviderWebhook{
+							DNS01: &v1alpha2.ACMEChallengeSolverDNS01{
+								Webhook: &v1alpha2.ACMEIssuerDNS01ProviderWebhook{
 									GroupName:  webhook.Details().GroupName,
 									SolverName: webhook.Details().SolverName,
 									Config: &v1beta1.JSON{
@@ -103,20 +103,20 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 					},
 				}))
 			issuer.Namespace = f.Namespace.Name
-			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 			Expect(err).NotTo(HaveOccurred())
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the ACME account URI is set")
-			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				func(i *v1alpha1.Issuer) (bool, error) {
+				func(i *v1alpha2.Issuer) (bool, error) {
 					if i.GetStatus().ACMEStatus().URI == "" {
 						return false, nil
 					}
@@ -133,7 +133,7 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 
 		AfterEach(func() {
 			By("Cleaning up")
-			f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+			f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 			f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 			f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(certificateSecretName, nil)
 		})
@@ -141,11 +141,11 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 		It("should call the dummy webhook provider and mark the challenges as presented=true", func() {
 			By("Creating a Certificate")
 
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			cert := gen.Certificate(certificateName,
 				gen.SetCertificateSecretName(certificateSecretName),
-				gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName}),
+				gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName}),
 				gen.SetCertificateDNSNames(dnsDomain),
 			)
 			cert.Namespace = f.Namespace.Name
@@ -153,7 +153,7 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 			cert, err := certClient.Create(cert)
 			Expect(err).NotTo(HaveOccurred())
 
-			var order *v1alpha1.Order
+			var order *v1alpha2.Order
 			pollErr := wait.PollImmediate(500*time.Millisecond, time.Second*30,
 				func() (bool, error) {
 					orders, err := listOwnedOrders(f.CertManagerClientSet, cert)
@@ -201,13 +201,13 @@ var _ = framework.CertManagerDescribe("ACME webhook DNS provider", func() {
 	})
 })
 
-func listOwnedChallenges(cl versioned.Interface, owner *v1alpha1.Order) ([]*v1alpha1.Challenge, error) {
-	l, err := cl.CertmanagerV1alpha1().Challenges(owner.Namespace).List(metav1.ListOptions{})
+func listOwnedChallenges(cl versioned.Interface, owner *v1alpha2.Order) ([]*v1alpha2.Challenge, error) {
+	l, err := cl.CertmanagerV1alpha2().Challenges(owner.Namespace).List(metav1.ListOptions{})
 	if err != nil {
 		return nil, err
 	}
 
-	var owned []*v1alpha1.Challenge
+	var owned []*v1alpha2.Challenge
 	for _, ch := range l.Items {
 		if !metav1.IsControlledBy(&ch, owner) {
 			continue
@@ -218,15 +218,15 @@ func listOwnedChallenges(cl versioned.Interface, owner *v1alpha1.Order) ([]*v1al
 	return owned, nil
 }
 
-func listOwnedOrders(cl versioned.Interface, owner *v1alpha1.Certificate) ([]*v1alpha1.Order, error) {
-	l, err := cl.CertmanagerV1alpha1().Orders(owner.Namespace).List(metav1.ListOptions{})
+func listOwnedOrders(cl versioned.Interface, owner *v1alpha2.Certificate) ([]*v1alpha2.Order, error) {
+	l, err := cl.CertmanagerV1alpha2().Orders(owner.Namespace).List(metav1.ListOptions{})
 	if err != nil {
 		return nil, err
 	}
 
-	var owned []*v1alpha1.Order
+	var owned []*v1alpha2.Order
 	for _, o := range l.Items {
-		v, ok := o.Annotations[v1alpha1.CertificateNameKey]
+		v, ok := o.Annotations[v1alpha2.CertificateNameKey]
 		if !ok || v != owner.Name {
 			continue
 		}
diff --git a/test/e2e/suite/issuers/acme/certificaterequest/BUILD.bazel b/test/e2e/suite/issuers/acme/certificaterequest/BUILD.bazel
index a919385b5..b249ab2ee 100644
--- a/test/e2e/suite/issuers/acme/certificaterequest/BUILD.bazel
+++ b/test/e2e/suite/issuers/acme/certificaterequest/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/issuers/acme/certificaterequest",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon:go_default_library",
diff --git a/test/e2e/suite/issuers/acme/certificaterequest/dns01.go b/test/e2e/suite/issuers/acme/certificaterequest/dns01.go
index 0d5fcf72f..a076ea6c3 100644
--- a/test/e2e/suite/issuers/acme/certificaterequest/dns01.go
+++ b/test/e2e/suite/issuers/acme/certificaterequest/dns01.go
@@ -24,7 +24,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
 	"github.com/jetstack/cert-manager/test/e2e/suite/issuers/acme/dnsproviders"
@@ -69,36 +69,36 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 			By("Creating an Issuer")
 			issuer := gen.Issuer(issuerName,
-				gen.SetIssuerACME(v1alpha1.ACMEIssuer{
+				gen.SetIssuerACME(v1alpha2.ACMEIssuer{
 					SkipTLSVerify: true,
 					Server:        "https://acme-staging-v02.api.letsencrypt.org/directory",
 					Email:         testingACMEEmail,
-					PrivateKey: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{
+					PrivateKey: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{
 							Name: testingACMEPrivateKey,
 						},
 					},
-					Solvers: []v1alpha1.ACMEChallengeSolver{
+					Solvers: []v1alpha2.ACMEChallengeSolver{
 						{
 							DNS01: &p.Details().ProviderConfig,
 						},
 					},
 				}))
 			issuer.Namespace = f.Namespace.Name
-			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+			issuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 			Expect(err).NotTo(HaveOccurred())
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the ACME account URI is set")
-			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				func(i *v1alpha1.Issuer) (bool, error) {
+				func(i *v1alpha2.Issuer) (bool, error) {
 					if i.GetStatus().ACMEStatus().URI == "" {
 						return false, nil
 					}
@@ -115,16 +115,16 @@ func testDNSProvider(name string, p dns01Provider) bool {
 
 		AfterEach(func() {
 			By("Cleaning up")
-			f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+			f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 			f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 		})
 
 		It("should obtain a signed certificate for a regular domain", func() {
 			By("Creating a CertificateRequest")
 
-			crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
-			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 				[]string{dnsDomain}, nil, nil, x509.RSA)
 			Expect(err).NotTo(HaveOccurred())
 
@@ -137,11 +137,11 @@ func testDNSProvider(name string, p dns01Provider) bool {
 		It("should obtain a signed certificate for a wildcard domain", func() {
 			By("Creating a CertificateRequest")
 
-			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 				[]string{"*." + dnsDomain}, nil, nil, x509.RSA)
 			Expect(err).NotTo(HaveOccurred())
 
-			cr, err = f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name).Create(cr)
+			cr, err = f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name).Create(cr)
 			Expect(err).NotTo(HaveOccurred())
 			err = h.WaitCertificateRequestIssuedValid(f.Namespace.Name, certificateRequestName, time.Minute*5, key)
 			Expect(err).NotTo(HaveOccurred())
@@ -150,11 +150,11 @@ func testDNSProvider(name string, p dns01Provider) bool {
 		It("should obtain a signed certificate for a wildcard and apex domain", func() {
 			By("Creating a CertificateRequest")
 
-			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 				[]string{"*." + dnsDomain, dnsDomain}, nil, nil, x509.RSA)
 			Expect(err).NotTo(HaveOccurred())
 
-			cr, err = f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name).Create(cr)
+			cr, err = f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name).Create(cr)
 			Expect(err).NotTo(HaveOccurred())
 			// use a longer timeout for this, as it requires performing 2 dns validations in serial
 			err = h.WaitCertificateRequestIssuedValid(f.Namespace.Name, certificateRequestName, time.Minute*10, key)
diff --git a/test/e2e/suite/issuers/acme/certificaterequest/http01.go b/test/e2e/suite/issuers/acme/certificaterequest/http01.go
index aff4315a8..be19ba528 100644
--- a/test/e2e/suite/issuers/acme/certificaterequest/http01.go
+++ b/test/e2e/suite/issuers/acme/certificaterequest/http01.go
@@ -28,7 +28,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/wait"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
@@ -75,42 +75,42 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 	BeforeEach(func() {
 		acmeURL := pebble.Details().Host
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
-		acmeIssuer.Spec.ACME.Solvers = []v1alpha1.ACMEChallengeSolver{
+		acmeIssuer.Spec.ACME.Solvers = []v1alpha2.ACMEChallengeSolver{
 			{
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 						Class: &addon.NginxIngress.Details().IngressClass,
 					},
 				},
 			},
 			{
-				Selector: &v1alpha1.CertificateDNSNameSelector{
+				Selector: &v1alpha2.CertificateDNSNameSelector{
 					MatchLabels: map[string]string{
 						"testing.cert-manager.io/fixed-ingress": "true",
 					},
 				},
-				HTTP01: &v1alpha1.ACMEChallengeSolverHTTP01{
-					Ingress: &v1alpha1.ACMEChallengeSolverHTTP01Ingress{
+				HTTP01: &v1alpha2.ACMEChallengeSolverHTTP01{
+					Ingress: &v1alpha2.ACMEChallengeSolverHTTP01Ingress{
 						Name: fixedIngressName,
 					},
 				},
 			},
 		}
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 		By("Verifying the ACME account URI is set")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				if i.GetStatus().ACMEStatus().URI == "" {
 					return false, nil
 				}
@@ -132,15 +132,15 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 	})
 
 	It("should obtain a signed certificate with a single CN from the ACME server", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{acmeIngressDomain}, nil, nil, x509.RSA)
 		Expect(err).NotTo(HaveOccurred())
 
@@ -153,10 +153,10 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 	})
 
 	It("should obtain a signed ecdsa certificate with a single CN from the ACME server", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{acmeIngressDomain}, nil, nil, x509.ECDSA)
 		Expect(err).NotTo(HaveOccurred())
 
@@ -168,12 +168,12 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 	})
 
 	It("should obtain a signed certificate for a long domain using http01 validation", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		// the maximum length of a single segment of the domain being requested
 		const maxLengthOfDomainSegment = 63
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{acmeIngressDomain, fmt.Sprintf("%s.%s", cmutil.RandStringRunes(maxLengthOfDomainSegment), acmeIngressDomain)},
 			nil, nil, x509.RSA)
 		Expect(err).NotTo(HaveOccurred())
@@ -185,10 +185,10 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 	})
 
 	It("should obtain a signed certificate with a CN and single subdomain as dns name from the ACME server", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{fmt.Sprintf("%s.%s", cmutil.RandStringRunes(5), acmeIngressDomain)},
 			nil, nil, x509.RSA)
 		Expect(err).NotTo(HaveOccurred())
@@ -203,26 +203,26 @@ var _ = framework.CertManagerDescribe("ACME CertificateRequest (HTTP01)", func()
 	It("should fail to obtain a certificate for an invalid ACME dns name", func() {
 		// create test fixture
 		By("Creating a CertificateRequest")
-		cr, _, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, _, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{"google.com"}, nil, nil, x509.RSA)
 		Expect(err).NotTo(HaveOccurred())
 
-		cr, err = f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name).Create(cr)
+		cr, err = f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name).Create(cr)
 		Expect(err).NotTo(HaveOccurred())
 
-		notReadyCondition := v1alpha1.CertificateRequestCondition{
-			Type:   v1alpha1.CertificateRequestConditionReady,
-			Status: v1alpha1.ConditionFalse,
+		notReadyCondition := v1alpha2.CertificateRequestCondition{
+			Type:   v1alpha2.CertificateRequestConditionReady,
+			Status: v1alpha2.ConditionFalse,
 		}
 		Eventually(cr, "30s", "1s").Should(HaveCondition(f, notReadyCondition))
 		Consistently(cr, "1m", "10s").Should(HaveCondition(f, notReadyCondition))
 	})
 
 	It("should automatically recreate challenge pod and still obtain a certificate if it is manually deleted", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind, nil,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind, nil,
 			[]string{acmeIngressDomain}, nil, nil, x509.RSA)
 		Expect(err).NotTo(HaveOccurred())
 
diff --git a/test/e2e/suite/issuers/acme/dnsproviders/BUILD.bazel b/test/e2e/suite/issuers/acme/dnsproviders/BUILD.bazel
index 45273fc16..9f77f5af9 100644
--- a/test/e2e/suite/issuers/acme/dnsproviders/BUILD.bazel
+++ b/test/e2e/suite/issuers/acme/dnsproviders/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework/addon/base:go_default_library",
         "//test/e2e/framework/config:go_default_library",
diff --git a/test/e2e/suite/issuers/acme/dnsproviders/cloudflare.go b/test/e2e/suite/issuers/acme/dnsproviders/cloudflare.go
index 4fe076258..629119a71 100644
--- a/test/e2e/suite/issuers/acme/dnsproviders/cloudflare.go
+++ b/test/e2e/suite/issuers/acme/dnsproviders/cloudflare.go
@@ -20,7 +20,7 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/base"
 	"github.com/jetstack/cert-manager/test/e2e/framework/config"
 	"github.com/jetstack/cert-manager/test/e2e/framework/util/errors"
diff --git a/test/e2e/suite/issuers/acme/dnsproviders/dnsproviders.go b/test/e2e/suite/issuers/acme/dnsproviders/dnsproviders.go
index 54d611875..830f3d7ca 100644
--- a/test/e2e/suite/issuers/acme/dnsproviders/dnsproviders.go
+++ b/test/e2e/suite/issuers/acme/dnsproviders/dnsproviders.go
@@ -23,7 +23,7 @@ package dnsproviders
 import (
 	"fmt"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 )
 
diff --git a/test/e2e/suite/issuers/acme/issuer.go b/test/e2e/suite/issuers/acme/issuer.go
index 55e04bfd3..412789211 100644
--- a/test/e2e/suite/issuers/acme/issuer.go
+++ b/test/e2e/suite/issuers/acme/issuer.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/pebble"
@@ -63,7 +63,7 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(testingACMEPrivateKey, nil)
 	})
 
@@ -72,22 +72,22 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
 
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Verifying the ACME account URI is set")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				if i.GetStatus().ACMEStatus().URI == "" {
 					return false, nil
 				}
@@ -108,23 +108,23 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
 
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Verifying the ACME account URI is set")
 		var finalURI string
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				if i.GetStatus().ACMEStatus().URI == "" {
 					return false, nil
 				}
@@ -142,27 +142,27 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		}
 
 		By("Deleting the Issuer")
-		err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(acmeIssuer.Name, &metav1.DeleteOptions{})
+		err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(acmeIssuer.Name, &metav1.DeleteOptions{})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Recreating the Issuer")
 		acmeIssuer = util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
-		_, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Verifying the ACME account URI has been recovered correctly")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				uri := i.GetStatus().ACMEStatus().URI
 				if uri == "" {
 					return false, nil
@@ -179,15 +179,15 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, invalidACMEURL, testingACMEEmail, testingACMEPrivateKey)
 
 		By("Creating an Issuer with an invalid server")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become non-Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionFalse,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionFalse,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
@@ -197,22 +197,22 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		acmeIssuer := util.NewCertManagerACMEIssuer(issuerName, acmeURL, testingACMEEmail, testingACMEPrivateKey)
 
 		By("Creating an Issuer")
-		acmeIssuer, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(acmeIssuer)
+		acmeIssuer, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Verifying the ACME account URI is set")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				if i.GetStatus().ACMEStatus().URI == "" {
 					return false, nil
 				}
@@ -228,9 +228,9 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		}
 
 		By("Verifying the ACME account email has been registered")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				registeredEmail := i.GetStatus().ACMEStatus().LastRegisteredEmail
 				if registeredEmail == testingACMEEmail {
 					return true, nil
@@ -240,24 +240,24 @@ var _ = framework.CertManagerDescribe("ACME Issuer", func() {
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Changing the email field")
-		acmeIssuer, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Get(acmeIssuer.Name, metav1.GetOptions{})
+		acmeIssuer, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Get(acmeIssuer.Name, metav1.GetOptions{})
 		acmeIssuer.Spec.ACME.Email = testingACMEEmailAlternative
-		acmeIssuer, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Update(acmeIssuer)
+		acmeIssuer, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Update(acmeIssuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Verifying the changed ACME account email has been registered")
-		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerStatusFunc(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			acmeIssuer.Name,
-			func(i *v1alpha1.Issuer) (bool, error) {
+			func(i *v1alpha2.Issuer) (bool, error) {
 				registeredEmail := i.GetStatus().ACMEStatus().LastRegisteredEmail
 				if registeredEmail == testingACMEEmailAlternative {
 					return true, nil
diff --git a/test/e2e/suite/issuers/ca/BUILD.bazel b/test/e2e/suite/issuers/ca/BUILD.bazel
index 17a216314..6c515fd0e 100644
--- a/test/e2e/suite/issuers/ca/BUILD.bazel
+++ b/test/e2e/suite/issuers/ca/BUILD.bazel
@@ -13,7 +13,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon:go_default_library",
diff --git a/test/e2e/suite/issuers/ca/certificate.go b/test/e2e/suite/issuers/ca/certificate.go
index a1ad212c7..c4276bcff 100644
--- a/test/e2e/suite/issuers/ca/certificate.go
+++ b/test/e2e/suite/issuers/ca/certificate.go
@@ -22,7 +22,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 	"github.com/jetstack/cert-manager/test/unit/gen"
@@ -40,14 +40,14 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 
 	JustBeforeEach(func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, issuerSecretName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, issuerSecretName))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
@@ -55,7 +55,7 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 	AfterEach(func() {
 		By("Cleaning up")
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(issuerSecretName, nil)
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 	})
 
 	Context("when the CA is the root", func() {
@@ -66,10 +66,10 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 		})
 
 		It("should generate a signed keypair", func() {
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			By("Creating a Certificate")
-			_, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil))
+			_, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil))
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the Certificate is valid")
 			err = h.WaitCertificateIssuedValidTLS(f.Namespace.Name, certificateName, time.Second*30, []byte(rootCert))
@@ -77,10 +77,10 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 		})
 
 		It("should be able to obtain an ECDSA key from a RSA backed issuer", func() {
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
-			crt := util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil)
-			crt.Spec.KeyAlgorithm = v1alpha1.ECDSAKeyAlgorithm
+			crt := util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil)
+			crt.Spec.KeyAlgorithm = v1alpha2.ECDSAKeyAlgorithm
 			crt.Spec.KeySize = 521
 
 			By("Creating a Certificate")
@@ -114,10 +114,10 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 		for _, v := range cases {
 			v := v
 			It("should generate a signed keypair valid for "+v.label, func() {
-				certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+				certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 				By("Creating a Certificate")
-				cert, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, v.inputDuration, v.inputRenewBefore))
+				cert, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, v.inputDuration, v.inputRenewBefore))
 				Expect(err).NotTo(HaveOccurred())
 				By("Verifying the Certificate is valid")
 				err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Second*30)
@@ -135,10 +135,10 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 		})
 
 		It("should generate a signed keypair", func() {
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			By("Creating a Certificate")
-			_, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil))
+			_, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil))
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the Certificate is valid")
 			err = h.WaitCertificateIssuedValidTLS(f.Namespace.Name, certificateName, time.Second*30, []byte(rootCert))
@@ -154,10 +154,10 @@ var _ = framework.CertManagerDescribe("CA Certificate", func() {
 		})
 
 		It("should generate a signed keypair", func() {
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			By("Creating a Certificate with Usages")
-			_, err := certClient.Create(gen.Certificate(certificateName, gen.SetCertificateNamespace(f.Namespace.Name), gen.SetCertificateCommonName("test.domain.com"), gen.SetCertificateSecretName(certificateSecretName), gen.SetCertificateIssuer(v1alpha1.ObjectReference{Name: issuerName, Kind: v1alpha1.IssuerKind}), gen.SetCertificateKeyUsages(v1alpha1.UsageServerAuth, v1alpha1.UsageClientAuth)))
+			_, err := certClient.Create(gen.Certificate(certificateName, gen.SetCertificateNamespace(f.Namespace.Name), gen.SetCertificateCommonName("test.domain.com"), gen.SetCertificateSecretName(certificateSecretName), gen.SetCertificateIssuer(v1alpha2.ObjectReference{Name: issuerName, Kind: v1alpha2.IssuerKind}), gen.SetCertificateKeyUsages(v1alpha2.UsageServerAuth, v1alpha2.UsageClientAuth)))
 			Expect(err).NotTo(HaveOccurred())
 			By("Verifying the Certificate is valid")
 			err = h.WaitCertificateIssuedValidTLS(f.Namespace.Name, certificateName, time.Second*30, []byte(rootCert))
diff --git a/test/e2e/suite/issuers/ca/certificaterequest.go b/test/e2e/suite/issuers/ca/certificaterequest.go
index 9c84d43e6..6cf302960 100644
--- a/test/e2e/suite/issuers/ca/certificaterequest.go
+++ b/test/e2e/suite/issuers/ca/certificaterequest.go
@@ -26,7 +26,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 	"github.com/jetstack/cert-manager/test/unit/gen"
@@ -56,14 +56,14 @@ var _ = framework.CertManagerDescribe("CA CertificateRequest", func() {
 
 	JustBeforeEach(func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, issuerSecretName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, issuerSecretName))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
@@ -71,7 +71,7 @@ var _ = framework.CertManagerDescribe("CA CertificateRequest", func() {
 	AfterEach(func() {
 		By("Cleaning up")
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(issuerSecretName, nil)
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 	})
 
 	Context("when the CA is the root", func() {
@@ -82,10 +82,10 @@ var _ = framework.CertManagerDescribe("CA CertificateRequest", func() {
 		})
 
 		It("should generate a valid certificate from CSR", func() {
-			certRequestClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			certRequestClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 			By("Creating a CertificateRequest")
-			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind,
+			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind,
 				&metav1.Duration{
 					Duration: time.Hour * 24 * 90,
 				},
@@ -99,10 +99,10 @@ var _ = framework.CertManagerDescribe("CA CertificateRequest", func() {
 		})
 
 		It("should be able to obtain an ECDSA key from a RSA backed issuer", func() {
-			certRequestClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			certRequestClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 			By("Creating a CertificateRequest")
-			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind,
+			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind,
 				&metav1.Duration{
 					Duration: time.Hour * 24 * 90,
 				},
@@ -134,12 +134,12 @@ var _ = framework.CertManagerDescribe("CA CertificateRequest", func() {
 		for _, v := range cases {
 			v := v
 			It("should generate a signed certificate valid for "+v.label, func() {
-				crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+				crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 				By("Creating a CertificateRequest with Usages")
 				csr, key, err := gen.CSR(x509.RSA, gen.SetCSRDNSNames(exampleDNSNames...), gen.SetCSRIPAddresses(exampleIPAddresses...), gen.SetCSRURIs(exampleURLs()...))
 				Expect(err).NotTo(HaveOccurred())
-				cr := gen.CertificateRequest(certificateRequestName, gen.SetCertificateRequestNamespace(f.Namespace.Name), gen.SetCertificateRequestIssuer(v1alpha1.ObjectReference{Kind: v1alpha1.IssuerKind, Name: issuerName}), gen.SetCertificateRequestDuration(v.inputDuration), gen.SetCertificateRequestCSR(csr))
+				cr := gen.CertificateRequest(certificateRequestName, gen.SetCertificateRequestNamespace(f.Namespace.Name), gen.SetCertificateRequestIssuer(v1alpha2.ObjectReference{Kind: v1alpha2.IssuerKind, Name: issuerName}), gen.SetCertificateRequestDuration(v.inputDuration), gen.SetCertificateRequestCSR(csr))
 				cr, err = crClient.Create(cr)
 				Expect(err).NotTo(HaveOccurred())
 
diff --git a/test/e2e/suite/issuers/ca/clusterissuer.go b/test/e2e/suite/issuers/ca/clusterissuer.go
index 47eefcf0b..558dd0ecf 100644
--- a/test/e2e/suite/issuers/ca/clusterissuer.go
+++ b/test/e2e/suite/issuers/ca/clusterissuer.go
@@ -20,7 +20,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon"
@@ -49,20 +49,20 @@ var _ = framework.CertManagerDescribe("CA ClusterIssuer", func() {
 	AfterEach(func() {
 		By("Cleaning up")
 		f.KubeClientSet.CoreV1().Secrets(clusterResourceNamespace).Delete(secretName, nil)
-		f.CertManagerClientSet.CertmanagerV1alpha1().ClusterIssuers().Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().ClusterIssuers().Delete(issuerName, nil)
 	})
 
 	It("should validate a signing keypair", func() {
 		By("Creating an Issuer")
 		clusterIssuer := util.NewCertManagerCAClusterIssuer(issuerName, secretName)
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().ClusterIssuers().Create(clusterIssuer)
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().ClusterIssuers().Create(clusterIssuer)
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForClusterIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().ClusterIssuers(),
+		err = util.WaitForClusterIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().ClusterIssuers(),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
diff --git a/test/e2e/suite/issuers/ca/issuer.go b/test/e2e/suite/issuers/ca/issuer.go
index 1150eb6d5..fa925c538 100644
--- a/test/e2e/suite/issuers/ca/issuer.go
+++ b/test/e2e/suite/issuers/ca/issuer.go
@@ -20,7 +20,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 )
@@ -44,14 +44,14 @@ var _ = framework.CertManagerDescribe("CA Issuer", func() {
 
 	It("should generate a signing keypair", func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, secretName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerCAIssuer(issuerName, secretName))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
diff --git a/test/e2e/suite/issuers/selfsigned/BUILD.bazel b/test/e2e/suite/issuers/selfsigned/BUILD.bazel
index 1ab9ca36a..a0d0691cb 100644
--- a/test/e2e/suite/issuers/selfsigned/BUILD.bazel
+++ b/test/e2e/suite/issuers/selfsigned/BUILD.bazel
@@ -12,7 +12,7 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/apis/certmanager:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/util:go_default_library",
diff --git a/test/e2e/suite/issuers/selfsigned/certificate.go b/test/e2e/suite/issuers/selfsigned/certificate.go
index 732fdd35a..66211cb36 100644
--- a/test/e2e/suite/issuers/selfsigned/certificate.go
+++ b/test/e2e/suite/issuers/selfsigned/certificate.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -40,20 +40,20 @@ var _ = framework.CertManagerDescribe("Self Signed Certificate", func() {
 	It("should generate a signed keypair", func() {
 		By("Creating an Issuer")
 
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 		By("Creating a Certificate")
-		_, err = certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil))
+		_, err = certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil))
 		Expect(err).NotTo(HaveOccurred())
 		err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*5)
 		Expect(err).NotTo(HaveOccurred())
@@ -81,23 +81,23 @@ var _ = framework.CertManagerDescribe("Self Signed Certificate", func() {
 	for _, v := range cases {
 		v := v
 		It("should generate a signed keypair valid for "+v.label, func() {
-			certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+			certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 			By("Creating an Issuer")
 			issuerDurationName := fmt.Sprintf("%s-%d", issuerName, v.expectedDuration)
-			_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerDurationName))
+			_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerDurationName))
 			Expect(err).NotTo(HaveOccurred())
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerDurationName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 
 			By("Creating a Certificate")
-			cert, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerDurationName, v1alpha1.IssuerKind, v.inputDuration, v.inputRenewBefore))
+			cert, err := certClient.Create(util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerDurationName, v1alpha2.IssuerKind, v.inputDuration, v.inputRenewBefore))
 			Expect(err).NotTo(HaveOccurred())
 			err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Second*30)
 			Expect(err).NotTo(HaveOccurred())
@@ -108,13 +108,13 @@ var _ = framework.CertManagerDescribe("Self Signed Certificate", func() {
 	It("should correctly encode a certificate's private key based on the key encoding", func() {
 		By("Creating an Issuer")
 
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
 		Expect(err).NotTo(HaveOccurred())
 
-		crt := util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil)
-		crt.Spec.KeyEncoding = v1alpha1.PKCS8
+		crt := util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil)
+		crt.Spec.KeyEncoding = v1alpha2.PKCS8
 
 		By("Creating a Certificate")
 		_, err = certClient.Create(crt)
diff --git a/test/e2e/suite/issuers/selfsigned/certificaterequest.go b/test/e2e/suite/issuers/selfsigned/certificaterequest.go
index 31288e8af..17d8d5426 100644
--- a/test/e2e/suite/issuers/selfsigned/certificaterequest.go
+++ b/test/e2e/suite/issuers/selfsigned/certificaterequest.go
@@ -24,7 +24,7 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
 	"github.com/jetstack/cert-manager/pkg/apis/certmanager"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 	"github.com/jetstack/cert-manager/test/unit/gen"
@@ -34,21 +34,21 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 	f := framework.NewDefaultFramework("create-selfsigned-certificaterequest")
 	h := f.Helper()
 
-	var basicCR *v1alpha1.CertificateRequest
+	var basicCR *v1alpha2.CertificateRequest
 	issuerName := "test-selfsigned-issuer"
 	certificateRequestName := "test-selfsigned-certificaterequest"
 	certificateRequestSecretName := "test-selfsigned-private-key"
 
 	JustBeforeEach(func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerSelfSignedIssuer(issuerName))
 		Expect(err).NotTo(HaveOccurred())
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
@@ -56,13 +56,13 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 		basicCR = gen.CertificateRequest(certificateRequestName,
 			gen.SetCertificateRequestNamespace(f.Namespace.Name),
 			gen.SetCertificateRequestIsCA(true),
-			gen.SetCertificateRequestIssuer(v1alpha1.ObjectReference{
+			gen.SetCertificateRequestIssuer(v1alpha2.ObjectReference{
 				Name:  issuerName,
 				Group: certmanager.GroupName,
 				Kind:  "Issuer",
 			}),
 			gen.AddCertificateRequestAnnotations(map[string]string{
-				v1alpha1.CRPrivateKeyAnnotationKey: certificateRequestSecretName,
+				v1alpha2.CRPrivateKeyAnnotationKey: certificateRequestSecretName,
 			}),
 		)
 	})
@@ -70,7 +70,7 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 	AfterEach(func() {
 		By("Cleaning up")
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(certificateRequestSecretName, nil)
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 	})
 
 	Context("Self Signed and private key", func() {
@@ -83,7 +83,7 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 		})
 
 		It("should generate a valid certificate from CSR backed by a RSA key", func() {
-			crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 			By("Creating a CertificateRequest")
 			csr, err := generateRSACSR()
@@ -105,7 +105,7 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 				certificateRequestSecretName, f.Namespace.Name, rootECKey))
 			Expect(err).NotTo(HaveOccurred())
 
-			crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 			By("Creating a CertificateRequest")
 			csr, err := generateECCSR()
 			Expect(err).NotTo(HaveOccurred())
@@ -138,7 +138,7 @@ var _ = framework.CertManagerDescribe("SelfSigned CertificateRequest", func() {
 		}
 		for _, v := range cases {
 			It("should generate a signed certificate valid for "+v.label, func() {
-				crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+				crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 				By("Creating a CertificateRequest")
 				csr, err := generateRSACSR()
diff --git a/test/e2e/suite/issuers/vault/BUILD.bazel b/test/e2e/suite/issuers/vault/BUILD.bazel
index 0f0c129ec..6f2b68479 100644
--- a/test/e2e/suite/issuers/vault/BUILD.bazel
+++ b/test/e2e/suite/issuers/vault/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon/tiller:go_default_library",
         "//test/e2e/framework/addon/vault:go_default_library",
diff --git a/test/e2e/suite/issuers/vault/certificate/BUILD.bazel b/test/e2e/suite/issuers/vault/certificate/BUILD.bazel
index d67692d3f..4a67ff050 100644
--- a/test/e2e/suite/issuers/vault/certificate/BUILD.bazel
+++ b/test/e2e/suite/issuers/vault/certificate/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon/tiller:go_default_library",
         "//test/e2e/framework/addon/vault:go_default_library",
diff --git a/test/e2e/suite/issuers/vault/certificate/approle.go b/test/e2e/suite/issuers/vault/certificate/approle.go
index 7b2f6a65b..617264677 100644
--- a/test/e2e/suite/issuers/vault/certificate/approle.go
+++ b/test/e2e/suite/issuers/vault/certificate/approle.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
 	vaultaddon "github.com/jetstack/cert-manager/test/e2e/framework/addon/vault"
@@ -88,7 +88,7 @@ var _ = framework.CertManagerDescribe("Vault Certificate (AppRole)", func() {
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(vaultSecretAppRoleName, nil)
 	})
 
@@ -96,23 +96,23 @@ var _ = framework.CertManagerDescribe("Vault Certificate (AppRole)", func() {
 		By("Creating an Issuer")
 		vaultURL := vault.Details().Host
 
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Creating a Certificate")
-		_, err = certClient.Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil))
+		_, err = certClient.Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil))
 		Expect(err).NotTo(HaveOccurred())
 
 		err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*5)
@@ -157,20 +157,20 @@ var _ = framework.CertManagerDescribe("Vault Certificate (AppRole)", func() {
 		v := v
 		It("should generate a new certificate "+v.label, func() {
 			By("Creating an Issuer")
-			_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+			_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 			Expect(err).NotTo(HaveOccurred())
 
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 
 			By("Creating a Certificate")
-			cert, err := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name).Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, v.inputDuration, v.inputRenewBefore))
+			cert, err := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name).Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, v.inputDuration, v.inputRenewBefore))
 			Expect(err).NotTo(HaveOccurred())
 
 			err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*5)
diff --git a/test/e2e/suite/issuers/vault/certificate/approle_custom_mount.go b/test/e2e/suite/issuers/vault/certificate/approle_custom_mount.go
index c4a86ed09..5c81a2a14 100644
--- a/test/e2e/suite/issuers/vault/certificate/approle_custom_mount.go
+++ b/test/e2e/suite/issuers/vault/certificate/approle_custom_mount.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
 	vaultaddon "github.com/jetstack/cert-manager/test/e2e/framework/addon/vault"
@@ -88,7 +88,7 @@ var _ = framework.CertManagerDescribe("Vault Certificate (AppRole with a custom
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(vaultSecretAppRoleName, nil)
 	})
 
@@ -96,22 +96,22 @@ var _ = framework.CertManagerDescribe("Vault Certificate (AppRole with a custom
 		By("Creating an Issuer")
 		vaultURL := vault.Details().Host
 
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Creating a Certificate")
-		_, err = certClient.Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha1.IssuerKind, nil, nil))
+		_, err = certClient.Create(util.NewCertManagerVaultCertificate(certificateName, certificateSecretName, issuerName, v1alpha2.IssuerKind, nil, nil))
 		Expect(err).NotTo(HaveOccurred())
 
 		err = h.WaitCertificateIssuedValid(f.Namespace.Name, certificateName, time.Minute*5)
diff --git a/test/e2e/suite/issuers/vault/certificaterequest/BUILD.bazel b/test/e2e/suite/issuers/vault/certificaterequest/BUILD.bazel
index 2af48ffad..c3d05a00e 100644
--- a/test/e2e/suite/issuers/vault/certificaterequest/BUILD.bazel
+++ b/test/e2e/suite/issuers/vault/certificaterequest/BUILD.bazel
@@ -9,7 +9,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/issuers/vault/certificaterequest",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/framework/addon/tiller:go_default_library",
         "//test/e2e/framework/addon/vault:go_default_library",
diff --git a/test/e2e/suite/issuers/vault/certificaterequest/approle.go b/test/e2e/suite/issuers/vault/certificaterequest/approle.go
index f223f0360..04d09840e 100644
--- a/test/e2e/suite/issuers/vault/certificaterequest/approle.go
+++ b/test/e2e/suite/issuers/vault/certificaterequest/approle.go
@@ -26,7 +26,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
 	vaultaddon "github.com/jetstack/cert-manager/test/e2e/framework/addon/vault"
@@ -95,7 +95,7 @@ var _ = framework.CertManagerDescribe("Vault CertificateRequest (AppRole)", func
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(vaultSecretAppRoleName, nil)
 	})
 
@@ -103,23 +103,23 @@ var _ = framework.CertManagerDescribe("Vault CertificateRequest (AppRole)", func
 		By("Creating an Issuer")
 		vaultURL := vault.Details().Host
 
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Creating a CertificateRequest")
-		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha1.IssuerKind,
+		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName, v1alpha2.IssuerKind,
 			&metav1.Duration{
 				Duration: time.Hour * 24 * 90,
 			},
@@ -165,23 +165,23 @@ var _ = framework.CertManagerDescribe("Vault CertificateRequest (AppRole)", func
 		v := v
 		It("should generate a new certificate "+v.label, func() {
 			By("Creating an Issuer")
-			_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+			_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 			Expect(err).NotTo(HaveOccurred())
 
 			By("Waiting for Issuer to become Ready")
-			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+			err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 				issuerName,
-				v1alpha1.IssuerCondition{
-					Type:   v1alpha1.IssuerConditionReady,
-					Status: v1alpha1.ConditionTrue,
+				v1alpha2.IssuerCondition{
+					Type:   v1alpha2.IssuerConditionReady,
+					Status: v1alpha2.ConditionTrue,
 				})
 			Expect(err).NotTo(HaveOccurred())
 
 			By("Creating a CertificateRequest")
-			crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+			crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 			cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName,
-				v1alpha1.IssuerKind, v.inputDuration, crDNSNames, crIPAddresses, nil, x509.RSA)
+				v1alpha2.IssuerKind, v.inputDuration, crDNSNames, crIPAddresses, nil, x509.RSA)
 			Expect(err).NotTo(HaveOccurred())
 			_, err = crClient.Create(cr)
 			Expect(err).NotTo(HaveOccurred())
diff --git a/test/e2e/suite/issuers/vault/certificaterequest/approle_custom_mount.go b/test/e2e/suite/issuers/vault/certificaterequest/approle_custom_mount.go
index 328a407ba..5478c7ed4 100644
--- a/test/e2e/suite/issuers/vault/certificaterequest/approle_custom_mount.go
+++ b/test/e2e/suite/issuers/vault/certificaterequest/approle_custom_mount.go
@@ -26,7 +26,7 @@ import (
 	. "github.com/onsi/gomega"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
 	vaultaddon "github.com/jetstack/cert-manager/test/e2e/framework/addon/vault"
@@ -96,7 +96,7 @@ var _ = framework.CertManagerDescribe("Vault CertificateRequest (AppRole with a
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(vaultSecretAppRoleName, nil)
 	})
 
@@ -104,23 +104,23 @@ var _ = framework.CertManagerDescribe("Vault CertificateRequest (AppRole with a
 		By("Creating an Issuer")
 		vaultURL := vault.Details().Host
 
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vaultURL, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Creating a CertificateRequest")
 		cr, key, err := util.NewCertManagerBasicCertificateRequest(certificateRequestName, issuerName,
-			v1alpha1.IssuerKind, &metav1.Duration{
+			v1alpha2.IssuerKind, &metav1.Duration{
 				Duration: time.Hour * 24 * 90,
 			},
 			crDNSNames, crIPAddresses, nil, x509.RSA)
diff --git a/test/e2e/suite/issuers/vault/issuer.go b/test/e2e/suite/issuers/vault/issuer.go
index c979819ca..5427333c0 100644
--- a/test/e2e/suite/issuers/vault/issuer.go
+++ b/test/e2e/suite/issuers/vault/issuer.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/tiller"
 	vaultaddon "github.com/jetstack/cert-manager/test/e2e/framework/addon/vault"
@@ -82,7 +82,7 @@ var _ = framework.CertManagerDescribe("Vault Issuer", func() {
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuerName, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuerName, nil)
 		f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Delete(vaultSecretAppRoleName, nil)
 		vaultInit.CleanAppRole()
 		vaultInit.Clean()
@@ -94,45 +94,45 @@ var _ = framework.CertManagerDescribe("Vault Issuer", func() {
 		_, err := f.KubeClientSet.CoreV1().Secrets(f.Namespace.Name).Create(vaultaddon.NewVaultAppRoleSecret(vaultSecretAppRoleName, secretId))
 		Expect(err).NotTo(HaveOccurred())
 
-		_, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionTrue,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionTrue,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
 
 	It("should fail to init with missing Vault AppRole", func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerAppRole(issuerName, vault.Details().Host, vaultPath, roleId, vaultSecretAppRoleName, authPath, vault.Details().VaultCA))
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionFalse,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionFalse,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
 
 	It("should fail to init with missing Vault Token", func() {
 		By("Creating an Issuer")
-		_, err := f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerToken(issuerName, vault.Details().Host, vaultPath, vaultSecretTokenName, authPath, vault.Details().VaultCA))
+		_, err := f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(util.NewCertManagerVaultIssuerToken(issuerName, vault.Details().Host, vaultPath, vaultSecretTokenName, authPath, vault.Details().VaultCA))
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuerName,
-			v1alpha1.IssuerCondition{
-				Type:   v1alpha1.IssuerConditionReady,
-				Status: v1alpha1.ConditionFalse,
+			v1alpha2.IssuerCondition{
+				Type:   v1alpha2.IssuerConditionReady,
+				Status: v1alpha2.ConditionFalse,
 			})
 		Expect(err).NotTo(HaveOccurred())
 	})
diff --git a/test/e2e/suite/issuers/venafi/addon/BUILD.bazel b/test/e2e/suite/issuers/venafi/addon/BUILD.bazel
index a651ff3dd..228f68bd3 100644
--- a/test/e2e/suite/issuers/venafi/addon/BUILD.bazel
+++ b/test/e2e/suite/issuers/venafi/addon/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework/addon/base:go_default_library",
         "//test/e2e/framework/config:go_default_library",
         "//test/e2e/framework/util/errors:go_default_library",
diff --git a/test/e2e/suite/issuers/venafi/addon/tpp.go b/test/e2e/suite/issuers/venafi/addon/tpp.go
index 4a9cd0bf1..a9429d519 100644
--- a/test/e2e/suite/issuers/venafi/addon/tpp.go
+++ b/test/e2e/suite/issuers/venafi/addon/tpp.go
@@ -22,7 +22,7 @@ import (
 	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework/addon/base"
 	"github.com/jetstack/cert-manager/test/e2e/framework/config"
 	"github.com/jetstack/cert-manager/test/e2e/framework/util/errors"
diff --git a/test/e2e/suite/issuers/venafi/tpp/BUILD.bazel b/test/e2e/suite/issuers/venafi/tpp/BUILD.bazel
index d866ea2b8..d7395ba82 100644
--- a/test/e2e/suite/issuers/venafi/tpp/BUILD.bazel
+++ b/test/e2e/suite/issuers/venafi/tpp/BUILD.bazel
@@ -11,7 +11,7 @@ go_library(
     tags = ["manual"],
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/suite/issuers/venafi/addon:go_default_library",
diff --git a/test/e2e/suite/issuers/venafi/tpp/certificate.go b/test/e2e/suite/issuers/venafi/tpp/certificate.go
index 27f24deae..5851dfbce 100644
--- a/test/e2e/suite/issuers/venafi/tpp/certificate.go
+++ b/test/e2e/suite/issuers/venafi/tpp/certificate.go
@@ -22,7 +22,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	vaddon "github.com/jetstack/cert-manager/test/e2e/suite/issuers/venafi/addon"
@@ -52,11 +52,11 @@ var _ = TPPDescribe("Certificate with a properly configured Issuer", func() {
 
 		By("Creating a Venafi Issuer resource")
 		issuer = tppAddon.Details().BuildIssuer()
-		issuer, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+		issuer, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuer.Name,
 			cmapi.IssuerCondition{
 				Type:   cmapi.IssuerConditionReady,
@@ -67,11 +67,11 @@ var _ = TPPDescribe("Certificate with a properly configured Issuer", func() {
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuer.Name, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuer.Name, nil)
 	})
 
 	It("should obtain a signed certificate for a single domain", func() {
-		certClient := f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name)
+		certClient := f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name)
 
 		crt := util.NewCertManagerBasicCertificate(certificateName, certificateSecretName, issuer.Name, cmapi.IssuerKind, nil, nil)
 		crt.Spec.CommonName = cmutil.RandStringRunes(10) + ".venafi-e2e.example"
diff --git a/test/e2e/suite/issuers/venafi/tpp/certificaterequest.go b/test/e2e/suite/issuers/venafi/tpp/certificaterequest.go
index 9ebea8a42..879411096 100644
--- a/test/e2e/suite/issuers/venafi/tpp/certificaterequest.go
+++ b/test/e2e/suite/issuers/venafi/tpp/certificaterequest.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	cmapi "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	cmutil "github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	vaddon "github.com/jetstack/cert-manager/test/e2e/suite/issuers/venafi/addon"
@@ -52,11 +52,11 @@ var _ = TPPDescribe("CertificateRequest with a properly configured Issuer", func
 
 		By("Creating a Venafi Issuer resource")
 		issuer = tppAddon.Details().BuildIssuer()
-		issuer, err = f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Create(issuer)
+		issuer, err = f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Create(issuer)
 		Expect(err).NotTo(HaveOccurred())
 
 		By("Waiting for Issuer to become Ready")
-		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+		err = util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 			issuer.Name,
 			cmapi.IssuerCondition{
 				Type:   cmapi.IssuerConditionReady,
@@ -67,11 +67,11 @@ var _ = TPPDescribe("CertificateRequest with a properly configured Issuer", func
 
 	AfterEach(func() {
 		By("Cleaning up")
-		f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name).Delete(issuer.Name, nil)
+		f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name).Delete(issuer.Name, nil)
 	})
 
 	It("should obtain a signed certificate for a single domain", func() {
-		crClient := f.CertManagerClientSet.CertmanagerV1alpha1().CertificateRequests(f.Namespace.Name)
+		crClient := f.CertManagerClientSet.CertmanagerV1alpha2().CertificateRequests(f.Namespace.Name)
 
 		dnsNames := []string{cmutil.RandStringRunes(10) + ".venafi-e2e.example"}
 
diff --git a/test/e2e/suite/serving/BUILD.bazel b/test/e2e/suite/serving/BUILD.bazel
index cf14c5c6e..4c3b7f876 100644
--- a/test/e2e/suite/serving/BUILD.bazel
+++ b/test/e2e/suite/serving/BUILD.bazel
@@ -6,7 +6,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/e2e/suite/serving",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//test/e2e/framework:go_default_library",
         "//test/e2e/util:go_default_library",
         "//vendor/github.com/onsi/ginkgo:go_default_library",
diff --git a/test/e2e/suite/serving/cainjector.go b/test/e2e/suite/serving/cainjector.go
index a24adc0c5..64493634c 100644
--- a/test/e2e/suite/serving/cainjector.go
+++ b/test/e2e/suite/serving/cainjector.go
@@ -23,7 +23,7 @@ import (
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 
-	certmanager "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	certmanager "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/test/e2e/framework"
 	"github.com/jetstack/cert-manager/test/e2e/util"
 	admissionreg "k8s.io/api/admissionregistration/v1beta1"
@@ -59,7 +59,7 @@ var _ = framework.CertManagerDescribe("CA Injector", func() {
 				Expect(f.CRClient.Create(context.Background(), issuer)).To(Succeed())
 
 				By("Waiting for Issuer to become Ready")
-				err := util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Issuers(f.Namespace.Name),
+				err := util.WaitForIssuerCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Issuers(f.Namespace.Name),
 					issuerName,
 					certmanager.IssuerCondition{
 						Type:   certmanager.IssuerConditionReady,
@@ -85,7 +85,7 @@ var _ = framework.CertManagerDescribe("CA Injector", func() {
 				cert.Namespace = f.Namespace.Name
 				Expect(f.CRClient.Create(context.Background(), cert)).To(Succeed())
 
-				err := util.WaitForCertificateCondition(f.CertManagerClientSet.CertmanagerV1alpha1().Certificates(f.Namespace.Name), "serving-certs", certmanager.CertificateCondition{
+				err := util.WaitForCertificateCondition(f.CertManagerClientSet.CertmanagerV1alpha2().Certificates(f.Namespace.Name), "serving-certs", certmanager.CertificateCondition{
 					Type:   certmanager.CertificateConditionReady,
 					Status: certmanager.ConditionTrue,
 				}, time.Second*30)
diff --git a/test/e2e/util/BUILD.bazel b/test/e2e/util/BUILD.bazel
index 8edb87b8b..231dcfe52 100644
--- a/test/e2e/util/BUILD.bazel
+++ b/test/e2e/util/BUILD.bazel
@@ -7,9 +7,9 @@ go_library(
     visibility = ["//visibility:public"],
     deps = [
         "//pkg/api/util:go_default_library",
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/client/clientset/versioned/scheme:go_default_library",
-        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha1:go_default_library",
+        "//pkg/client/clientset/versioned/typed/certmanager/v1alpha2:go_default_library",
         "//pkg/util:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//test/e2e/framework/log:go_default_library",
diff --git a/test/e2e/util/util.go b/test/e2e/util/util.go
index 436fce25b..2111ae0be 100644
--- a/test/e2e/util/util.go
+++ b/test/e2e/util/util.go
@@ -39,8 +39,8 @@ import (
 	"k8s.io/client-go/kubernetes"
 
 	apiutil "github.com/jetstack/cert-manager/pkg/api/util"
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha2"
 	"github.com/jetstack/cert-manager/pkg/util"
 	"github.com/jetstack/cert-manager/pkg/util/pki"
 	"github.com/jetstack/cert-manager/test/e2e/framework/log"
@@ -53,7 +53,7 @@ func CertificateOnlyValidForDomains(cert *x509.Certificate, commonName string, d
 	return true
 }
 
-func WaitForIssuerStatusFunc(client clientset.IssuerInterface, name string, fn func(*v1alpha1.Issuer) (bool, error)) error {
+func WaitForIssuerStatusFunc(client clientset.IssuerInterface, name string, fn func(*v1alpha2.Issuer) (bool, error)) error {
 	return wait.PollImmediate(500*time.Millisecond, time.Minute,
 		func() (bool, error) {
 			issuer, err := client.Get(name, metav1.GetOptions{})
@@ -66,7 +66,7 @@ func WaitForIssuerStatusFunc(client clientset.IssuerInterface, name string, fn f
 
 // WaitForIssuerCondition waits for the status of the named issuer to contain
 // a condition whose type and status matches the supplied one.
-func WaitForIssuerCondition(client clientset.IssuerInterface, name string, condition v1alpha1.IssuerCondition) error {
+func WaitForIssuerCondition(client clientset.IssuerInterface, name string, condition v1alpha2.IssuerCondition) error {
 	pollErr := wait.PollImmediate(500*time.Millisecond, time.Minute,
 		func() (bool, error) {
 			log.Logf("Waiting for issuer %v condition %#v", name, condition)
@@ -82,7 +82,7 @@ func WaitForIssuerCondition(client clientset.IssuerInterface, name string, condi
 }
 
 // try to retrieve last condition to help diagnose tests.
-func wrapErrorWithIssuerStatusCondition(client clientset.IssuerInterface, pollErr error, name string, conditionType v1alpha1.IssuerConditionType) error {
+func wrapErrorWithIssuerStatusCondition(client clientset.IssuerInterface, pollErr error, name string, conditionType v1alpha2.IssuerConditionType) error {
 	if pollErr == nil {
 		return nil
 	}
@@ -104,7 +104,7 @@ func wrapErrorWithIssuerStatusCondition(client clientset.IssuerInterface, pollEr
 
 // WaitForClusterIssuerCondition waits for the status of the named issuer to contain
 // a condition whose type and status matches the supplied one.
-func WaitForClusterIssuerCondition(client clientset.ClusterIssuerInterface, name string, condition v1alpha1.IssuerCondition) error {
+func WaitForClusterIssuerCondition(client clientset.ClusterIssuerInterface, name string, condition v1alpha2.IssuerCondition) error {
 	pollErr := wait.PollImmediate(500*time.Millisecond, time.Minute,
 		func() (bool, error) {
 			log.Logf("Waiting for clusterissuer %v condition %#v", name, condition)
@@ -120,7 +120,7 @@ func WaitForClusterIssuerCondition(client clientset.ClusterIssuerInterface, name
 }
 
 // try to retrieve last condition to help diagnose tests.
-func wrapErrorWithClusterIssuerStatusCondition(client clientset.ClusterIssuerInterface, pollErr error, name string, conditionType v1alpha1.IssuerConditionType) error {
+func wrapErrorWithClusterIssuerStatusCondition(client clientset.ClusterIssuerInterface, pollErr error, name string, conditionType v1alpha2.IssuerConditionType) error {
 	if pollErr == nil {
 		return nil
 	}
@@ -142,7 +142,7 @@ func wrapErrorWithClusterIssuerStatusCondition(client clientset.ClusterIssuerInt
 
 // WaitForCertificateCondition waits for the status of the named Certificate to contain
 // a condition whose type and status matches the supplied one.
-func WaitForCertificateCondition(client clientset.CertificateInterface, name string, condition v1alpha1.CertificateCondition, timeout time.Duration) error {
+func WaitForCertificateCondition(client clientset.CertificateInterface, name string, condition v1alpha2.CertificateCondition, timeout time.Duration) error {
 	pollErr := wait.PollImmediate(500*time.Millisecond, timeout,
 		func() (bool, error) {
 			log.Logf("Waiting for Certificate %v condition %#v", name, condition)
@@ -159,7 +159,7 @@ func WaitForCertificateCondition(client clientset.CertificateInterface, name str
 
 // WaitForCertificateEvent waits for an event on the named Certificate to contain
 // an event reason matches the supplied one.
-func WaitForCertificateEvent(client kubernetes.Interface, cert *v1alpha1.Certificate, reason string, timeout time.Duration) error {
+func WaitForCertificateEvent(client kubernetes.Interface, cert *v1alpha2.Certificate, reason string, timeout time.Duration) error {
 	return wait.PollImmediate(500*time.Millisecond, timeout,
 		func() (bool, error) {
 			log.Logf("Waiting for Certificate event %v reason %#v", cert.Name, reason)
@@ -183,7 +183,7 @@ func hasEvent(events *v1.EventList, reason string) bool {
 }
 
 // try to retrieve last condition to help diagnose tests.
-func wrapErrorWithCertificateStatusCondition(client clientset.CertificateInterface, pollErr error, name string, conditionType v1alpha1.CertificateConditionType) error {
+func wrapErrorWithCertificateStatusCondition(client clientset.CertificateInterface, pollErr error, name string, conditionType v1alpha2.CertificateConditionType) error {
 	if pollErr == nil {
 		return nil
 	}
@@ -240,14 +240,14 @@ func WaitForCRDToNotExist(client apiextcs.CustomResourceDefinitionInterface, nam
 	)
 }
 
-func NewCertManagerCAClusterIssuer(name, secretName string) *v1alpha1.ClusterIssuer {
-	return &v1alpha1.ClusterIssuer{
+func NewCertManagerCAClusterIssuer(name, secretName string) *v1alpha2.ClusterIssuer {
+	return &v1alpha2.ClusterIssuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				CA: &v1alpha1.CAIssuer{
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				CA: &v1alpha2.CAIssuer{
 					SecretName: secretName,
 				},
 			},
@@ -256,23 +256,23 @@ func NewCertManagerCAClusterIssuer(name, secretName string) *v1alpha1.ClusterIss
 }
 
 // Deprecated: use test/unit/gen/Certificate in future
-func NewCertManagerBasicCertificate(name, secretName, issuerName string, issuerKind string, duration, renewBefore *metav1.Duration, dnsNames ...string) *v1alpha1.Certificate {
+func NewCertManagerBasicCertificate(name, secretName, issuerName string, issuerKind string, duration, renewBefore *metav1.Duration, dnsNames ...string) *v1alpha2.Certificate {
 	cn := "test.domain.com"
 	if len(dnsNames) > 0 {
 		cn = dnsNames[0]
 	}
-	return &v1alpha1.Certificate{
+	return &v1alpha2.Certificate{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.CertificateSpec{
+		Spec: v1alpha2.CertificateSpec{
 			CommonName:   cn,
 			DNSNames:     dnsNames,
 			Organization: []string{"test-org"},
 			SecretName:   secretName,
 			Duration:     duration,
 			RenewBefore:  renewBefore,
-			IssuerRef: v1alpha1.ObjectReference{
+			IssuerRef: v1alpha2.ObjectReference{
 				Name: issuerName,
 				Kind: issuerKind,
 			},
@@ -282,7 +282,7 @@ func NewCertManagerBasicCertificate(name, secretName, issuerName string, issuerK
 
 // Deprecated: use test/unit/gen/CertificateRequest in future
 func NewCertManagerBasicCertificateRequest(name, issuerName string, issuerKind string, duration *metav1.Duration,
-	dnsNames []string, ips []net.IP, uris []string, keyAlgorithm x509.PublicKeyAlgorithm) (*v1alpha1.CertificateRequest, crypto.Signer, error) {
+	dnsNames []string, ips []net.IP, uris []string, keyAlgorithm x509.PublicKeyAlgorithm) (*v1alpha2.CertificateRequest, crypto.Signer, error) {
 	cn := "test.domain.com"
 	if len(dnsNames) > 0 {
 		cn = dnsNames[0]
@@ -340,14 +340,14 @@ func NewCertManagerBasicCertificateRequest(name, issuerName string, issuerKind s
 		Type: "CERTIFICATE REQUEST", Bytes: csrBytes,
 	})
 
-	return &v1alpha1.CertificateRequest{
+	return &v1alpha2.CertificateRequest{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.CertificateRequestSpec{
+		Spec: v1alpha2.CertificateRequestSpec{
 			Duration: duration,
 			CSRPEM:   csrPEM,
-			IssuerRef: v1alpha1.ObjectReference{
+			IssuerRef: v1alpha2.ObjectReference{
 				Name: issuerName,
 				Kind: issuerKind,
 			},
@@ -355,17 +355,17 @@ func NewCertManagerBasicCertificateRequest(name, issuerName string, issuerKind s
 	}, sk, nil
 }
 
-func NewCertManagerVaultCertificate(name, secretName, issuerName string, issuerKind string, duration, renewBefore *metav1.Duration) *v1alpha1.Certificate {
-	return &v1alpha1.Certificate{
+func NewCertManagerVaultCertificate(name, secretName, issuerName string, issuerKind string, duration, renewBefore *metav1.Duration) *v1alpha2.Certificate {
+	return &v1alpha2.Certificate{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.CertificateSpec{
+		Spec: v1alpha2.CertificateSpec{
 			CommonName:  "test.domain.com",
 			SecretName:  secretName,
 			Duration:    duration,
 			RenewBefore: renewBefore,
-			IssuerRef: v1alpha1.ObjectReference{
+			IssuerRef: v1alpha2.ObjectReference{
 				Name: issuerName,
 				Kind: issuerKind,
 			},
@@ -408,19 +408,19 @@ func NewIngress(name, secretName string, annotations map[string]string, dnsNames
 	}
 }
 
-func NewCertManagerACMEIssuer(name, acmeURL, acmeEmail, acmePrivateKey string) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func NewCertManagerACMEIssuer(name, acmeURL, acmeEmail, acmePrivateKey string) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				ACME: &v1alpha1.ACMEIssuer{
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				ACME: &v1alpha2.ACMEIssuer{
 					Email:         acmeEmail,
 					Server:        acmeURL,
 					SkipTLSVerify: true,
-					PrivateKey: v1alpha1.SecretKeySelector{
-						LocalObjectReference: v1alpha1.LocalObjectReference{
+					PrivateKey: v1alpha2.SecretKeySelector{
+						LocalObjectReference: v1alpha2.LocalObjectReference{
 							Name: acmePrivateKey,
 						},
 					},
@@ -430,14 +430,14 @@ func NewCertManagerACMEIssuer(name, acmeURL, acmeEmail, acmePrivateKey string) *
 	}
 }
 
-func NewCertManagerCAIssuer(name, secretName string) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func NewCertManagerCAIssuer(name, secretName string) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				CA: &v1alpha1.CAIssuer{
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				CA: &v1alpha2.CAIssuer{
 					SecretName: secretName,
 				},
 			},
@@ -445,34 +445,34 @@ func NewCertManagerCAIssuer(name, secretName string) *v1alpha1.Issuer {
 	}
 }
 
-func NewCertManagerSelfSignedIssuer(name string) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func NewCertManagerSelfSignedIssuer(name string) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				SelfSigned: &v1alpha1.SelfSignedIssuer{},
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				SelfSigned: &v1alpha2.SelfSignedIssuer{},
 			},
 		},
 	}
 }
 
-func NewCertManagerVaultIssuerToken(name, vaultURL, vaultPath, vaultSecretToken, authPath string, caBundle []byte) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func NewCertManagerVaultIssuerToken(name, vaultURL, vaultPath, vaultSecretToken, authPath string, caBundle []byte) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				Vault: &v1alpha1.VaultIssuer{
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				Vault: &v1alpha2.VaultIssuer{
 					Server:   vaultURL,
 					Path:     vaultPath,
 					CABundle: caBundle,
-					Auth: v1alpha1.VaultAuth{
-						TokenSecretRef: v1alpha1.SecretKeySelector{
+					Auth: v1alpha2.VaultAuth{
+						TokenSecretRef: v1alpha2.SecretKeySelector{
 							Key: "secretkey",
-							LocalObjectReference: v1alpha1.LocalObjectReference{
+							LocalObjectReference: v1alpha2.LocalObjectReference{
 								Name: vaultSecretToken,
 							},
 						},
@@ -483,24 +483,24 @@ func NewCertManagerVaultIssuerToken(name, vaultURL, vaultPath, vaultSecretToken,
 	}
 }
 
-func NewCertManagerVaultIssuerAppRole(name, vaultURL, vaultPath, roleId, vaultSecretAppRole string, authPath string, caBundle []byte) *v1alpha1.Issuer {
-	return &v1alpha1.Issuer{
+func NewCertManagerVaultIssuerAppRole(name, vaultURL, vaultPath, roleId, vaultSecretAppRole string, authPath string, caBundle []byte) *v1alpha2.Issuer {
+	return &v1alpha2.Issuer{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
 		},
-		Spec: v1alpha1.IssuerSpec{
-			IssuerConfig: v1alpha1.IssuerConfig{
-				Vault: &v1alpha1.VaultIssuer{
+		Spec: v1alpha2.IssuerSpec{
+			IssuerConfig: v1alpha2.IssuerConfig{
+				Vault: &v1alpha2.VaultIssuer{
 					Server:   vaultURL,
 					Path:     vaultPath,
 					CABundle: caBundle,
-					Auth: v1alpha1.VaultAuth{
-						AppRole: v1alpha1.VaultAppRole{
+					Auth: v1alpha2.VaultAuth{
+						AppRole: v1alpha2.VaultAppRole{
 							Path:   authPath,
 							RoleId: roleId,
-							SecretRef: v1alpha1.SecretKeySelector{
+							SecretRef: v1alpha2.SecretKeySelector{
 								Key: "secretkey",
-								LocalObjectReference: v1alpha1.LocalObjectReference{
+								LocalObjectReference: v1alpha2.LocalObjectReference{
 									Name: vaultSecretAppRole,
 								},
 							},
diff --git a/test/unit/gen/BUILD.bazel b/test/unit/gen/BUILD.bazel
index a97e42c7b..03e2085f6 100644
--- a/test/unit/gen/BUILD.bazel
+++ b/test/unit/gen/BUILD.bazel
@@ -15,7 +15,7 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/unit/gen",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
         "//pkg/util/pki:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
     ],
diff --git a/test/unit/gen/certificate.go b/test/unit/gen/certificate.go
index 7ca2cf668..20d113bfa 100644
--- a/test/unit/gen/certificate.go
+++ b/test/unit/gen/certificate.go
@@ -21,13 +21,13 @@ import (
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-type CertificateModifier func(*v1alpha1.Certificate)
+type CertificateModifier func(*v1alpha2.Certificate)
 
-func Certificate(name string, mods ...CertificateModifier) *v1alpha1.Certificate {
-	c := &v1alpha1.Certificate{
+func Certificate(name string, mods ...CertificateModifier) *v1alpha2.Certificate {
+	c := &v1alpha2.Certificate{
 		ObjectMeta: ObjectMeta(name),
 	}
 	for _, mod := range mods {
@@ -36,7 +36,7 @@ func Certificate(name string, mods ...CertificateModifier) *v1alpha1.Certificate
 	return c
 }
 
-func CertificateFrom(crt *v1alpha1.Certificate, mods ...CertificateModifier) *v1alpha1.Certificate {
+func CertificateFrom(crt *v1alpha2.Certificate, mods ...CertificateModifier) *v1alpha2.Certificate {
 	crt = crt.DeepCopy()
 	for _, mod := range mods {
 		mod(crt)
@@ -45,70 +45,70 @@ func CertificateFrom(crt *v1alpha1.Certificate, mods ...CertificateModifier) *v1
 }
 
 // SetIssuer sets the Certificate.spec.issuerRef field
-func SetCertificateIssuer(o v1alpha1.ObjectReference) CertificateModifier {
-	return func(c *v1alpha1.Certificate) {
+func SetCertificateIssuer(o v1alpha2.ObjectReference) CertificateModifier {
+	return func(c *v1alpha2.Certificate) {
 		c.Spec.IssuerRef = o
 	}
 }
 
 func SetCertificateDNSNames(dnsNames ...string) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.DNSNames = dnsNames
 	}
 }
 
 func SetCertificateCommonName(commonName string) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.CommonName = commonName
 	}
 }
 
 func SetCertificateIsCA(isCA bool) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.IsCA = isCA
 	}
 }
 
-func SetCertificateKeyAlgorithm(keyAlgorithm v1alpha1.KeyAlgorithm) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+func SetCertificateKeyAlgorithm(keyAlgorithm v1alpha2.KeyAlgorithm) CertificateModifier {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.KeyAlgorithm = keyAlgorithm
 	}
 }
 
 func SetCertificateKeySize(keySize int) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.KeySize = keySize
 	}
 }
 
-func SetCertificateKeyEncoding(keyEncoding v1alpha1.KeyEncoding) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+func SetCertificateKeyEncoding(keyEncoding v1alpha2.KeyEncoding) CertificateModifier {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.KeyEncoding = keyEncoding
 	}
 }
 
 func SetCertificateSecretName(secretName string) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.SecretName = secretName
 	}
 }
 
 func SetCertificateDuration(duration time.Duration) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.Duration = &metav1.Duration{Duration: duration}
 	}
 }
 
 func SetCertificateRenewBefore(renewBefore time.Duration) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Spec.RenewBefore = &metav1.Duration{Duration: renewBefore}
 	}
 }
 
-func SetCertificateStatusCondition(c v1alpha1.CertificateCondition) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+func SetCertificateStatusCondition(c v1alpha2.CertificateCondition) CertificateModifier {
+	return func(crt *v1alpha2.Certificate) {
 		if len(crt.Status.Conditions) == 0 {
-			crt.Status.Conditions = []v1alpha1.CertificateCondition{c}
+			crt.Status.Conditions = []v1alpha2.CertificateCondition{c}
 			return
 		}
 		for i, existingC := range crt.Status.Conditions {
@@ -122,31 +122,31 @@ func SetCertificateStatusCondition(c v1alpha1.CertificateCondition) CertificateM
 }
 
 func SetCertificateLastFailureTime(p metav1.Time) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Status.LastFailureTime = &p
 	}
 }
 
 func SetCertificateNotAfter(p metav1.Time) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.Status.NotAfter = &p
 	}
 }
 
 func SetCertificateOrganization(orgs ...string) CertificateModifier {
-	return func(ch *v1alpha1.Certificate) {
+	return func(ch *v1alpha2.Certificate) {
 		ch.Spec.Organization = orgs
 	}
 }
 
 func SetCertificateNamespace(namespace string) CertificateModifier {
-	return func(crt *v1alpha1.Certificate) {
+	return func(crt *v1alpha2.Certificate) {
 		crt.ObjectMeta.Namespace = namespace
 	}
 }
 
-func SetCertificateKeyUsages(usages ...v1alpha1.KeyUsage) CertificateModifier {
-	return func(cr *v1alpha1.Certificate) {
+func SetCertificateKeyUsages(usages ...v1alpha2.KeyUsage) CertificateModifier {
+	return func(cr *v1alpha2.Certificate) {
 		cr.Spec.Usages = usages
 	}
 }
diff --git a/test/unit/gen/certificaterequest.go b/test/unit/gen/certificaterequest.go
index a37157b8e..3c172ff79 100644
--- a/test/unit/gen/certificaterequest.go
+++ b/test/unit/gen/certificaterequest.go
@@ -19,13 +19,13 @@ package gen
 import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-type CertificateRequestModifier func(*v1alpha1.CertificateRequest)
+type CertificateRequestModifier func(*v1alpha2.CertificateRequest)
 
-func CertificateRequest(name string, mods ...CertificateRequestModifier) *v1alpha1.CertificateRequest {
-	c := &v1alpha1.CertificateRequest{
+func CertificateRequest(name string, mods ...CertificateRequestModifier) *v1alpha2.CertificateRequest {
+	c := &v1alpha2.CertificateRequest{
 		ObjectMeta: ObjectMeta(name),
 	}
 	for _, mod := range mods {
@@ -34,7 +34,7 @@ func CertificateRequest(name string, mods ...CertificateRequestModifier) *v1alph
 	return c
 }
 
-func CertificateRequestFrom(cr *v1alpha1.CertificateRequest, mods ...CertificateRequestModifier) *v1alpha1.CertificateRequest {
+func CertificateRequestFrom(cr *v1alpha2.CertificateRequest, mods ...CertificateRequestModifier) *v1alpha2.CertificateRequest {
 	cr = cr.DeepCopy()
 	for _, mod := range mods {
 		mod(cr)
@@ -43,46 +43,46 @@ func CertificateRequestFrom(cr *v1alpha1.CertificateRequest, mods ...Certificate
 }
 
 // SetIssuer sets the CertificateRequest.spec.issuerRef field
-func SetCertificateRequestIssuer(o v1alpha1.ObjectReference) CertificateRequestModifier {
-	return func(c *v1alpha1.CertificateRequest) {
+func SetCertificateRequestIssuer(o v1alpha2.ObjectReference) CertificateRequestModifier {
+	return func(c *v1alpha2.CertificateRequest) {
 		c.Spec.IssuerRef = o
 	}
 }
 
 func SetCertificateRequestCSR(csr []byte) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Spec.CSRPEM = csr
 	}
 }
 
 func SetCertificateRequestIsCA(isCA bool) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Spec.IsCA = isCA
 	}
 }
 
 func SetCertificateRequestDuration(duration *metav1.Duration) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Spec.Duration = duration
 	}
 }
 
 func SetCertificateRequestCA(ca []byte) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Status.CA = ca
 	}
 }
 
 func SetCertificateRequestCertificate(cert []byte) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Status.Certificate = cert
 	}
 }
 
-func SetCertificateRequestStatusCondition(c v1alpha1.CertificateRequestCondition) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+func SetCertificateRequestStatusCondition(c v1alpha2.CertificateRequestCondition) CertificateRequestModifier {
+	return func(cr *v1alpha2.CertificateRequest) {
 		if len(cr.Status.Conditions) == 0 {
-			cr.Status.Conditions = []v1alpha1.CertificateRequestCondition{c}
+			cr.Status.Conditions = []v1alpha2.CertificateRequestCondition{c}
 			return
 		}
 		for i, existingC := range cr.Status.Conditions {
@@ -96,25 +96,25 @@ func SetCertificateRequestStatusCondition(c v1alpha1.CertificateRequestCondition
 }
 
 func SetCertificateRequestNamespace(namespace string) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.ObjectMeta.Namespace = namespace
 	}
 }
 
 func SetCertificateRequestName(name string) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.ObjectMeta.Name = name
 	}
 }
 
-func SetCertificateRequestKeyUsages(usages ...v1alpha1.KeyUsage) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+func SetCertificateRequestKeyUsages(usages ...v1alpha2.KeyUsage) CertificateRequestModifier {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Spec.Usages = usages
 	}
 }
 
 func AddCertificateRequestAnnotations(annotations map[string]string) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		// Make sure to do a merge here with new annotations overriding.
 		annotationsNew := cr.GetAnnotations()
 		if annotationsNew == nil {
@@ -128,13 +128,13 @@ func AddCertificateRequestAnnotations(annotations map[string]string) Certificate
 }
 
 func SetCertificateRequestAnnotations(annotations map[string]string) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.SetAnnotations(annotations)
 	}
 }
 
 func SetCertificateRequestFailureTime(p metav1.Time) CertificateRequestModifier {
-	return func(cr *v1alpha1.CertificateRequest) {
+	return func(cr *v1alpha2.CertificateRequest) {
 		cr.Status.FailureTime = &p
 	}
 }
diff --git a/test/unit/gen/challenge.go b/test/unit/gen/challenge.go
index 54e05c462..2c486594e 100644
--- a/test/unit/gen/challenge.go
+++ b/test/unit/gen/challenge.go
@@ -17,13 +17,13 @@ limitations under the License.
 package gen
 
 import (
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-type ChallengeModifier func(*v1alpha1.Challenge)
+type ChallengeModifier func(*v1alpha2.Challenge)
 
-func Challenge(name string, mods ...ChallengeModifier) *v1alpha1.Challenge {
-	c := &v1alpha1.Challenge{
+func Challenge(name string, mods ...ChallengeModifier) *v1alpha2.Challenge {
+	c := &v1alpha2.Challenge{
 		ObjectMeta: ObjectMeta(name),
 	}
 	for _, mod := range mods {
@@ -32,7 +32,7 @@ func Challenge(name string, mods ...ChallengeModifier) *v1alpha1.Challenge {
 	return c
 }
 
-func ChallengeFrom(ch *v1alpha1.Challenge, mods ...ChallengeModifier) *v1alpha1.Challenge {
+func ChallengeFrom(ch *v1alpha2.Challenge, mods ...ChallengeModifier) *v1alpha2.Challenge {
 	ch = ch.DeepCopy()
 	for _, mod := range mods {
 		mod(ch)
@@ -41,56 +41,56 @@ func ChallengeFrom(ch *v1alpha1.Challenge, mods ...ChallengeModifier) *v1alpha1.
 }
 
 func SetChallengeType(t string) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
-		ch.Spec.Type = v1alpha1.ACMEChallengeType(t)
+	return func(ch *v1alpha2.Challenge) {
+		ch.Spec.Type = v1alpha2.ACMEChallengeType(t)
 	}
 }
 
 // SetIssuer sets the challenge.spec.issuerRef field
-func SetChallengeIssuer(o v1alpha1.ObjectReference) ChallengeModifier {
-	return func(c *v1alpha1.Challenge) {
+func SetChallengeIssuer(o v1alpha2.ObjectReference) ChallengeModifier {
+	return func(c *v1alpha2.Challenge) {
 		c.Spec.IssuerRef = o
 	}
 }
 
 func SetChallengeDNSName(dnsName string) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Spec.DNSName = dnsName
 	}
 }
 
 func SetChallengePresented(p bool) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Status.Presented = p
 	}
 }
 
 func SetChallengeWildcard(p bool) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Spec.Wildcard = p
 	}
 }
 
-func SetChallengeState(s v1alpha1.State) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+func SetChallengeState(s v1alpha2.State) ChallengeModifier {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Status.State = s
 	}
 }
 
 func SetChallengeReason(s string) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Status.Reason = s
 	}
 }
 
 func SetChallengeURL(s string) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Spec.URL = s
 	}
 }
 
 func SetChallengeProcessing(b bool) ChallengeModifier {
-	return func(ch *v1alpha1.Challenge) {
+	return func(ch *v1alpha2.Challenge) {
 		ch.Status.Processing = b
 	}
 }
diff --git a/test/unit/gen/issuer.go b/test/unit/gen/issuer.go
index c37a23f90..3c895667f 100644
--- a/test/unit/gen/issuer.go
+++ b/test/unit/gen/issuer.go
@@ -17,13 +17,13 @@ limitations under the License.
 package gen
 
 import (
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-type IssuerModifier func(v1alpha1.GenericIssuer)
+type IssuerModifier func(v1alpha2.GenericIssuer)
 
-func ClusterIssuer(name string, mods ...IssuerModifier) *v1alpha1.ClusterIssuer {
-	c := &v1alpha1.ClusterIssuer{
+func ClusterIssuer(name string, mods ...IssuerModifier) *v1alpha2.ClusterIssuer {
+	c := &v1alpha2.ClusterIssuer{
 		ObjectMeta: ObjectMeta(name),
 	}
 	c.ObjectMeta.Namespace = ""
@@ -33,15 +33,15 @@ func ClusterIssuer(name string, mods ...IssuerModifier) *v1alpha1.ClusterIssuer
 	return c
 }
 
-func ClusterIssuerFrom(iss *v1alpha1.ClusterIssuer, mods ...IssuerModifier) *v1alpha1.ClusterIssuer {
+func ClusterIssuerFrom(iss *v1alpha2.ClusterIssuer, mods ...IssuerModifier) *v1alpha2.ClusterIssuer {
 	for _, mod := range mods {
 		mod(iss)
 	}
 	return iss
 }
 
-func Issuer(name string, mods ...IssuerModifier) *v1alpha1.Issuer {
-	c := &v1alpha1.Issuer{
+func Issuer(name string, mods ...IssuerModifier) *v1alpha2.Issuer {
+	c := &v1alpha2.Issuer{
 		ObjectMeta: ObjectMeta(name),
 	}
 	for _, mod := range mods {
@@ -50,7 +50,7 @@ func Issuer(name string, mods ...IssuerModifier) *v1alpha1.Issuer {
 	return c
 }
 
-func IssuerFrom(iss *v1alpha1.Issuer, mods ...IssuerModifier) *v1alpha1.Issuer {
+func IssuerFrom(iss *v1alpha2.Issuer, mods ...IssuerModifier) *v1alpha2.Issuer {
 	iss = iss.DeepCopy()
 	for _, mod := range mods {
 		mod(iss)
@@ -58,38 +58,38 @@ func IssuerFrom(iss *v1alpha1.Issuer, mods ...IssuerModifier) *v1alpha1.Issuer {
 	return iss
 }
 
-func SetIssuerACME(a v1alpha1.ACMEIssuer) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func SetIssuerACME(a v1alpha2.ACMEIssuer) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetSpec().ACME = &a
 	}
 }
 
-func SetIssuerCA(a v1alpha1.CAIssuer) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func SetIssuerCA(a v1alpha2.CAIssuer) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetSpec().CA = &a
 	}
 }
 
-func SetIssuerVault(v v1alpha1.VaultIssuer) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func SetIssuerVault(v v1alpha2.VaultIssuer) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetSpec().Vault = &v
 	}
 }
 
-func SetIssuerSelfSigned(a v1alpha1.SelfSignedIssuer) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func SetIssuerSelfSigned(a v1alpha2.SelfSignedIssuer) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetSpec().SelfSigned = &a
 	}
 }
 
-func SetIssuerVenafi(a v1alpha1.VenafiIssuer) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func SetIssuerVenafi(a v1alpha2.VenafiIssuer) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetSpec().Venafi = &a
 	}
 }
 
-func AddIssuerCondition(c v1alpha1.IssuerCondition) IssuerModifier {
-	return func(iss v1alpha1.GenericIssuer) {
+func AddIssuerCondition(c v1alpha2.IssuerCondition) IssuerModifier {
+	return func(iss v1alpha2.GenericIssuer) {
 		iss.GetStatus().Conditions = append(iss.GetStatus().Conditions, c)
 	}
 }
diff --git a/test/unit/gen/order.go b/test/unit/gen/order.go
index 546f14e80..7b365e5f8 100644
--- a/test/unit/gen/order.go
+++ b/test/unit/gen/order.go
@@ -17,13 +17,13 @@ limitations under the License.
 package gen
 
 import (
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
 )
 
-type OrderModifier func(*v1alpha1.Order)
+type OrderModifier func(*v1alpha2.Order)
 
-func Order(name string, mods ...OrderModifier) *v1alpha1.Order {
-	c := &v1alpha1.Order{
+func Order(name string, mods ...OrderModifier) *v1alpha2.Order {
+	c := &v1alpha2.Order{
 		ObjectMeta: ObjectMeta(name),
 	}
 	for _, mod := range mods {
@@ -32,7 +32,7 @@ func Order(name string, mods ...OrderModifier) *v1alpha1.Order {
 	return c
 }
 
-func OrderFrom(crt *v1alpha1.Order, mods ...OrderModifier) *v1alpha1.Order {
+func OrderFrom(crt *v1alpha2.Order, mods ...OrderModifier) *v1alpha2.Order {
 	crt = crt.DeepCopy()
 	for _, mod := range mods {
 		mod(crt)
@@ -41,50 +41,50 @@ func OrderFrom(crt *v1alpha1.Order, mods ...OrderModifier) *v1alpha1.Order {
 }
 
 // SetIssuer sets the Order.spec.issuerRef field
-func SetOrderIssuer(o v1alpha1.ObjectReference) OrderModifier {
-	return func(c *v1alpha1.Order) {
+func SetOrderIssuer(o v1alpha2.ObjectReference) OrderModifier {
+	return func(c *v1alpha2.Order) {
 		c.Spec.IssuerRef = o
 	}
 }
 
 func SetOrderDNSNames(dnsNames ...string) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+	return func(crt *v1alpha2.Order) {
 		crt.Spec.DNSNames = dnsNames
 	}
 }
 
 func SetOrderURL(url string) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+	return func(crt *v1alpha2.Order) {
 		crt.Status.URL = url
 	}
 }
 
-func SetOrderState(s v1alpha1.State) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+func SetOrderState(s v1alpha2.State) OrderModifier {
+	return func(crt *v1alpha2.Order) {
 		crt.Status.State = s
 	}
 }
 
-func SetOrderStatus(s v1alpha1.OrderStatus) OrderModifier {
-	return func(o *v1alpha1.Order) {
+func SetOrderStatus(s v1alpha2.OrderStatus) OrderModifier {
+	return func(o *v1alpha2.Order) {
 		o.Status = s
 	}
 }
 
 func SetOrderCertificate(d []byte) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+	return func(crt *v1alpha2.Order) {
 		crt.Status.Certificate = d
 	}
 }
 
 func SetOrderCommonName(commonName string) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+	return func(crt *v1alpha2.Order) {
 		crt.Spec.CommonName = commonName
 	}
 }
 
 func SetOrderNamespace(namespace string) OrderModifier {
-	return func(crt *v1alpha1.Order) {
+	return func(crt *v1alpha2.Order) {
 		crt.ObjectMeta.Namespace = namespace
 	}
 }
diff --git a/test/unit/listers/BUILD.bazel b/test/unit/listers/BUILD.bazel
index 6a2473943..1a5103592 100644
--- a/test/unit/listers/BUILD.bazel
+++ b/test/unit/listers/BUILD.bazel
@@ -9,8 +9,8 @@ go_library(
     importpath = "github.com/jetstack/cert-manager/test/unit/listers",
     visibility = ["//visibility:public"],
     deps = [
-        "//pkg/apis/certmanager/v1alpha1:go_default_library",
-        "//pkg/client/listers/certmanager/v1alpha1:go_default_library",
+        "//pkg/apis/certmanager/v1alpha2:go_default_library",
+        "//pkg/client/listers/certmanager/v1alpha2:go_default_library",
         "//vendor/k8s.io/api/core/v1:go_default_library",
         "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
         "//vendor/k8s.io/client-go/listers/core/v1:go_default_library",
diff --git a/test/unit/listers/order.go b/test/unit/listers/order.go
index 9a25a5264..4a3d5b9a2 100644
--- a/test/unit/listers/order.go
+++ b/test/unit/listers/order.go
@@ -19,26 +19,26 @@ package listers
 import (
 	"k8s.io/apimachinery/pkg/labels"
 
-	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
-	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
+	"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
+	cmlisters "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha2"
 )
 
 var _ cmlisters.OrderLister = &FakeOrderLister{}
 var _ cmlisters.OrderNamespaceLister = &FakeOrderNamespaceLister{}
 
 type FakeOrderLister struct {
-	ListFn   func(selector labels.Selector) (ret []*v1alpha1.Order, err error)
+	ListFn   func(selector labels.Selector) (ret []*v1alpha2.Order, err error)
 	OrdersFn func(namespace string) cmlisters.OrderNamespaceLister
 }
 
 type FakeOrderNamespaceLister struct {
-	ListFn func(selector labels.Selector) (ret []*v1alpha1.Order, err error)
-	GetFn  func(name string) (ret *v1alpha1.Order, err error)
+	ListFn func(selector labels.Selector) (ret []*v1alpha2.Order, err error)
+	GetFn  func(name string) (ret *v1alpha2.Order, err error)
 }
 
 func NewFakeOrderLister() *FakeOrderLister {
 	return &FakeOrderLister{
-		ListFn: func(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+		ListFn: func(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 			return nil, nil
 		},
 
@@ -50,16 +50,16 @@ func NewFakeOrderLister() *FakeOrderLister {
 
 func NewFakeOrderNamespaceLister() *FakeOrderNamespaceLister {
 	return &FakeOrderNamespaceLister{
-		ListFn: func(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+		ListFn: func(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 			return nil, nil
 		},
-		GetFn: func(name string) (ret *v1alpha1.Order, err error) {
+		GetFn: func(name string) (ret *v1alpha2.Order, err error) {
 			return nil, nil
 		},
 	}
 }
 
-func (f *FakeOrderLister) List(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+func (f *FakeOrderLister) List(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 	return f.ListFn(selector)
 }
 
@@ -67,10 +67,10 @@ func (f *FakeOrderLister) Orders(namespace string) cmlisters.OrderNamespaceListe
 	return f.OrdersFn(namespace)
 }
 
-func (f *FakeOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Order, err error) {
+func (f *FakeOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.Order, err error) {
 	return f.ListFn(selector)
 }
 
-func (f *FakeOrderNamespaceLister) Get(name string) (*v1alpha1.Order, error) {
+func (f *FakeOrderNamespaceLister) Get(name string) (*v1alpha2.Order, error) {
 	return f.GetFn(name)
 }
